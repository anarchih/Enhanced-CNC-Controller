
build/main/main.elf:     file format elf32-littlearm


Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b110      	cbz	r0, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2101      	movs	r1, #1
 80001c0:	7021      	strb	r1, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200005d8 	.word	0x200005d8
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080063d8 	.word	0x080063d8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b06      	ldr	r3, [pc, #24]	; (80001ec <frame_dummy+0x1c>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4806      	ldr	r0, [pc, #24]	; (80001f0 <frame_dummy+0x20>)
 80001d8:	4906      	ldr	r1, [pc, #24]	; (80001f4 <frame_dummy+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	4806      	ldr	r0, [pc, #24]	; (80001f8 <frame_dummy+0x28>)
 80001e0:	6801      	ldr	r1, [r0, #0]
 80001e2:	b111      	cbz	r1, 80001ea <frame_dummy+0x1a>
 80001e4:	4a05      	ldr	r2, [pc, #20]	; (80001fc <frame_dummy+0x2c>)
 80001e6:	b102      	cbz	r2, 80001ea <frame_dummy+0x1a>
 80001e8:	4790      	blx	r2
 80001ea:	bd08      	pop	{r3, pc}
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080063d8 	.word	0x080063d8
 80001f4:	200005dc 	.word	0x200005dc
 80001f8:	200005d8 	.word	0x200005d8
 80001fc:	00000000 	.word	0x00000000

08000200 <fio_printf>:
#include <stdarg.h>
#include "clib.h"

void send_byte(char );

size_t fio_printf(int fd, const char *format, ...){
 8000200:	b40e      	push	{r1, r2, r3}
 8000202:	b580      	push	{r7, lr}
 8000204:	b089      	sub	sp, #36	; 0x24
 8000206:	af00      	add	r7, sp, #0
 8000208:	6078      	str	r0, [r7, #4]
	int i,count=0;
 800020a:	f04f 0300 	mov.w	r3, #0
 800020e:	61bb      	str	r3, [r7, #24]

	va_list(v1);
	va_start(v1, format);
 8000210:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000214:	60fb      	str	r3, [r7, #12]

	int tmpint;
	char *tmpcharp;
	
	for(i=0; format[i]; ++i){
 8000216:	f04f 0300 	mov.w	r3, #0
 800021a:	61fb      	str	r3, [r7, #28]
 800021c:	e073      	b.n	8000306 <fio_printf+0x106>
		if(format[i]=='%'){
 800021e:	69fb      	ldr	r3, [r7, #28]
 8000220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000222:	18d3      	adds	r3, r2, r3
 8000224:	781b      	ldrb	r3, [r3, #0]
 8000226:	2b25      	cmp	r3, #37	; 0x25
 8000228:	d160      	bne.n	80002ec <fio_printf+0xec>
			switch(format[i+1]){
 800022a:	69fb      	ldr	r3, [r7, #28]
 800022c:	f103 0301 	add.w	r3, r3, #1
 8000230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000232:	18d3      	adds	r3, r2, r3
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	2b64      	cmp	r3, #100	; 0x64
 8000238:	d010      	beq.n	800025c <fio_printf+0x5c>
 800023a:	2b64      	cmp	r3, #100	; 0x64
 800023c:	dc04      	bgt.n	8000248 <fio_printf+0x48>
 800023e:	2b25      	cmp	r3, #37	; 0x25
 8000240:	d007      	beq.n	8000252 <fio_printf+0x52>
 8000242:	2b58      	cmp	r3, #88	; 0x58
 8000244:	d00a      	beq.n	800025c <fio_printf+0x5c>
 8000246:	e04c      	b.n	80002e2 <fio_printf+0xe2>
 8000248:	2b73      	cmp	r3, #115	; 0x73
 800024a:	d03a      	beq.n	80002c2 <fio_printf+0xc2>
 800024c:	2b78      	cmp	r3, #120	; 0x78
 800024e:	d005      	beq.n	800025c <fio_printf+0x5c>
 8000250:	e047      	b.n	80002e2 <fio_printf+0xe2>
				case '%':
					send_byte('%'); break;
 8000252:	f04f 0025 	mov.w	r0, #37	; 0x25
 8000256:	f001 ff47 	bl	80020e8 <send_byte>
 800025a:	e042      	b.n	80002e2 <fio_printf+0xe2>
				case 'd':
				case 'x':
				case 'X':
					tmpint = va_arg(v1, int);
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	f103 0204 	add.w	r2, r3, #4
 8000262:	60fa      	str	r2, [r7, #12]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	617b      	str	r3, [r7, #20]
					tmpcharp = itoa(format[i+1]=='x'?"0123456789abcdef":"0123456789ABCDEF", tmpint, format[i+1]=='d'?10: 16);
 8000268:	69fb      	ldr	r3, [r7, #28]
 800026a:	f103 0301 	add.w	r3, r3, #1
 800026e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000270:	18d3      	adds	r3, r2, r3
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	2b78      	cmp	r3, #120	; 0x78
 8000276:	d104      	bne.n	8000282 <fio_printf+0x82>
 8000278:	f246 33f0 	movw	r3, #25584	; 0x63f0
 800027c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000280:	e003      	b.n	800028a <fio_printf+0x8a>
 8000282:	f246 4304 	movw	r3, #25604	; 0x6404
 8000286:	f6c0 0300 	movt	r3, #2048	; 0x800
 800028a:	69fa      	ldr	r2, [r7, #28]
 800028c:	f102 0201 	add.w	r2, r2, #1
 8000290:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000292:	188a      	adds	r2, r1, r2
 8000294:	7812      	ldrb	r2, [r2, #0]
 8000296:	2a64      	cmp	r2, #100	; 0x64
 8000298:	d102      	bne.n	80002a0 <fio_printf+0xa0>
 800029a:	f04f 020a 	mov.w	r2, #10
 800029e:	e001      	b.n	80002a4 <fio_printf+0xa4>
 80002a0:	f04f 0210 	mov.w	r2, #16
 80002a4:	4618      	mov	r0, r3
 80002a6:	6979      	ldr	r1, [r7, #20]
 80002a8:	f000 f882 	bl	80003b0 <itoa>
 80002ac:	6138      	str	r0, [r7, #16]
					fio_write(fd, tmpcharp, strlen(tmpcharp));
 80002ae:	6938      	ldr	r0, [r7, #16]
 80002b0:	f000 f838 	bl	8000324 <strlen>
 80002b4:	4603      	mov	r3, r0
 80002b6:	6878      	ldr	r0, [r7, #4]
 80002b8:	6939      	ldr	r1, [r7, #16]
 80002ba:	461a      	mov	r2, r3
 80002bc:	f001 fb28 	bl	8001910 <fio_write>
					break;
 80002c0:	e00f      	b.n	80002e2 <fio_printf+0xe2>
				case 's':
					tmpcharp = va_arg(v1, char *);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	f103 0204 	add.w	r2, r3, #4
 80002c8:	60fa      	str	r2, [r7, #12]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	613b      	str	r3, [r7, #16]
					fio_write(fd, tmpcharp, strlen(tmpcharp));
 80002ce:	6938      	ldr	r0, [r7, #16]
 80002d0:	f000 f828 	bl	8000324 <strlen>
 80002d4:	4603      	mov	r3, r0
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	6939      	ldr	r1, [r7, #16]
 80002da:	461a      	mov	r2, r3
 80002dc:	f001 fb18 	bl	8001910 <fio_write>
					break;
 80002e0:	bf00      	nop
			}
			/* Skip the next character */
			++i;
 80002e2:	69fb      	ldr	r3, [r7, #28]
 80002e4:	f103 0301 	add.w	r3, r3, #1
 80002e8:	61fb      	str	r3, [r7, #28]
 80002ea:	e008      	b.n	80002fe <fio_printf+0xfe>
		}else
			fio_write(fd, format+i, 1);
 80002ec:	69fb      	ldr	r3, [r7, #28]
 80002ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80002f0:	18d3      	adds	r3, r2, r3
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	4619      	mov	r1, r3
 80002f6:	f04f 0201 	mov.w	r2, #1
 80002fa:	f001 fb09 	bl	8001910 <fio_write>
	va_start(v1, format);

	int tmpint;
	char *tmpcharp;
	
	for(i=0; format[i]; ++i){
 80002fe:	69fb      	ldr	r3, [r7, #28]
 8000300:	f103 0301 	add.w	r3, r3, #1
 8000304:	61fb      	str	r3, [r7, #28]
 8000306:	69fb      	ldr	r3, [r7, #28]
 8000308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800030a:	18d3      	adds	r3, r2, r3
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d185      	bne.n	800021e <fio_printf+0x1e>
		}else
			fio_write(fd, format+i, 1);
	}

	va_end(v1);
	return count;
 8000312:	69bb      	ldr	r3, [r7, #24]
}
 8000314:	4618      	mov	r0, r3
 8000316:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800031a:	46bd      	mov	sp, r7
 800031c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000320:	b003      	add	sp, #12
 8000322:	4770      	bx	lr

08000324 <strlen>:
	dest[p]='\0';
        return count;
}


size_t strlen(const char *str){
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	size_t count;
	for(count=0;*str;++count, ++str);
 800032c:	f04f 0300 	mov.w	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e007      	b.n	8000344 <strlen+0x20>
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	f103 0301 	add.w	r3, r3, #1
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	f103 0301 	add.w	r3, r3, #1
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d1f3      	bne.n	8000334 <strlen+0x10>
	return count;
 800034c:	68fb      	ldr	r3, [r7, #12]
}
 800034e:	4618      	mov	r0, r3
 8000350:	f107 0714 	add.w	r7, r7, #20
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop

0800035c <strcat>:

char *strcat(char * restrict dest, const char * restrict source){
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
 8000364:	6039      	str	r1, [r7, #0]
	/* locate '\0' in dest */
	for(;*dest;++dest);
 8000366:	e003      	b.n	8000370 <strcat+0x14>
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	f103 0301 	add.w	r3, r3, #1
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d1f7      	bne.n	8000368 <strcat+0xc>
	/* copy character from source */
	for(;*source; ++dest, ++source)
 8000378:	e00b      	b.n	8000392 <strcat+0x36>
		*dest=*source;
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	781a      	ldrb	r2, [r3, #0]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	701a      	strb	r2, [r3, #0]

char *strcat(char * restrict dest, const char * restrict source){
	/* locate '\0' in dest */
	for(;*dest;++dest);
	/* copy character from source */
	for(;*source; ++dest, ++source)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f103 0301 	add.w	r3, r3, #1
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	f103 0301 	add.w	r3, r3, #1
 8000390:	603b      	str	r3, [r7, #0]
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d1ef      	bne.n	800037a <strcat+0x1e>
		*dest=*source;
	*dest='\0';
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	f04f 0200 	mov.w	r2, #0
 80003a0:	701a      	strb	r2, [r3, #0]
	return dest;
 80003a2:	687b      	ldr	r3, [r7, #4]
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	f107 070c 	add.w	r7, r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr

080003b0 <itoa>:

char *itoa(const char *numbox, int num, unsigned int base){
 80003b0:	b480      	push	{r7}
 80003b2:	b087      	sub	sp, #28
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	60f8      	str	r0, [r7, #12]
 80003b8:	60b9      	str	r1, [r7, #8]
 80003ba:	607a      	str	r2, [r7, #4]
	static char buf[32]={0};
	int i;
	if(num==0){
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d108      	bne.n	80003d4 <itoa+0x24>
		buf[30]='0';
 80003c2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80003c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003ca:	f04f 0230 	mov.w	r2, #48	; 0x30
 80003ce:	779a      	strb	r2, [r3, #30]
		return &buf[30];
 80003d0:	4b28      	ldr	r3, [pc, #160]	; (8000474 <itoa+0xc4>)
 80003d2:	e048      	b.n	8000466 <itoa+0xb6>
	}
	int negative=(num<0);
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	ea4f 73d3 	mov.w	r3, r3, lsr #31
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	613b      	str	r3, [r7, #16]
	if(negative) num=-num;
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d003      	beq.n	80003ec <itoa+0x3c>
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	f1c3 0300 	rsb	r3, r3, #0
 80003ea:	60bb      	str	r3, [r7, #8]
	for(i=30; i>=0&&num; --i, num/=base)
 80003ec:	f04f 031e 	mov.w	r3, #30
 80003f0:	617b      	str	r3, [r7, #20]
 80003f2:	e01a      	b.n	800042a <itoa+0x7a>
		buf[i] = numbox[num % base];
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80003fc:	6879      	ldr	r1, [r7, #4]
 80003fe:	fb01 f202 	mul.w	r2, r1, r2
 8000402:	1a9b      	subs	r3, r3, r2
 8000404:	68fa      	ldr	r2, [r7, #12]
 8000406:	18d3      	adds	r3, r2, r3
 8000408:	781a      	ldrb	r2, [r3, #0]
 800040a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800040e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000412:	6979      	ldr	r1, [r7, #20]
 8000414:	185b      	adds	r3, r3, r1
 8000416:	701a      	strb	r2, [r3, #0]
		buf[30]='0';
		return &buf[30];
	}
	int negative=(num<0);
	if(negative) num=-num;
	for(i=30; i>=0&&num; --i, num/=base)
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	68ba      	ldr	r2, [r7, #8]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	fbb2 f3f3 	udiv	r3, r2, r3
 8000428:	60bb      	str	r3, [r7, #8]
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	2b00      	cmp	r3, #0
 800042e:	db02      	blt.n	8000436 <itoa+0x86>
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d1de      	bne.n	80003f4 <itoa+0x44>
		buf[i] = numbox[num % base];
	if(negative){
 8000436:	693b      	ldr	r3, [r7, #16]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d00c      	beq.n	8000456 <itoa+0xa6>
		buf[i]='-';
 800043c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8000440:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000444:	697a      	ldr	r2, [r7, #20]
 8000446:	189b      	adds	r3, r3, r2
 8000448:	f04f 022d 	mov.w	r2, #45	; 0x2d
 800044c:	701a      	strb	r2, [r3, #0]
		--i;
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000454:	617b      	str	r3, [r7, #20]
	}
	return buf+i+1;
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	f103 0201 	add.w	r2, r3, #1
 800045c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8000460:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000464:	18d3      	adds	r3, r2, r3
}
 8000466:	4618      	mov	r0, r3
 8000468:	f107 071c 	add.w	r7, r7, #28
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	20000612 	.word	0x20000612

08000478 <malloc>:
	for(i=30; i>=0&&num; --i, num/=base)
		buf[i] = numbox [num % base];
	return buf+i+1;
}

void* malloc(size_t size){
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
    return pvPortMalloc(size);
 8000480:	6878      	ldr	r0, [r7, #4]
 8000482:	f005 fc25 	bl	8005cd0 <pvPortMalloc>
 8000486:	4603      	mov	r3, r0
}
 8000488:	4618      	mov	r0, r3
 800048a:	f107 0708 	add.w	r7, r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop

08000494 <calloc>:

void* calloc(size_t nmemb, size_t size){
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]
    return malloc(nmemb * size);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	683a      	ldr	r2, [r7, #0]
 80004a2:	fb02 f303 	mul.w	r3, r2, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff ffe6 	bl	8000478 <malloc>
 80004ac:	4603      	mov	r3, r0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	f107 0708 	add.w	r7, r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <free>:

void free(void* ptr){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
    vPortFree(ptr);
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f005 fc65 	bl	8005d90 <vPortFree>
}
 80004c6:	f107 0708 	add.w	r7, r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop

080004d0 <stdin_read>:
void send_byte(char);

enum KeyName{ESC=27, BACKSPACE=127};

/* Imple */
ssize_t stdin_read(struct inode_t* node, void* buf, size_t count, off_t offset) {
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b08b      	sub	sp, #44	; 0x2c
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
 80004dc:	603b      	str	r3, [r7, #0]
    int i=0, endofline=0, last_chr_is_esc;
 80004de:	f04f 0300 	mov.w	r3, #0
 80004e2:	627b      	str	r3, [r7, #36]	; 0x24
 80004e4:	f04f 0300 	mov.w	r3, #0
 80004e8:	623b      	str	r3, [r7, #32]
    char *ptrbuf=buf;
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	61bb      	str	r3, [r7, #24]
    char ch;
    while(i < count&&endofline!=1){
 80004ee:	e064      	b.n	80005ba <stdin_read+0xea>
	ptrbuf[i]=recv_byte();
 80004f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f2:	69ba      	ldr	r2, [r7, #24]
 80004f4:	18d4      	adds	r4, r2, r3
 80004f6:	f001 fe25 	bl	8002144 <recv_byte>
 80004fa:	4603      	mov	r3, r0
 80004fc:	7023      	strb	r3, [r4, #0]
	switch(ptrbuf[i]){
 80004fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000500:	69ba      	ldr	r2, [r7, #24]
 8000502:	18d3      	adds	r3, r2, r3
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b1b      	cmp	r3, #27
 8000508:	d02a      	beq.n	8000560 <stdin_read+0x90>
 800050a:	2b1b      	cmp	r3, #27
 800050c:	dc04      	bgt.n	8000518 <stdin_read+0x48>
 800050e:	2b0a      	cmp	r3, #10
 8000510:	d007      	beq.n	8000522 <stdin_read+0x52>
 8000512:	2b0d      	cmp	r3, #13
 8000514:	d005      	beq.n	8000522 <stdin_read+0x52>
 8000516:	e03e      	b.n	8000596 <stdin_read+0xc6>
 8000518:	2b5b      	cmp	r3, #91	; 0x5b
 800051a:	d00c      	beq.n	8000536 <stdin_read+0x66>
 800051c:	2b7f      	cmp	r3, #127	; 0x7f
 800051e:	d023      	beq.n	8000568 <stdin_read+0x98>
 8000520:	e039      	b.n	8000596 <stdin_read+0xc6>
		case '\r':
		case '\n':
			ptrbuf[i]='\0';
 8000522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000524:	69ba      	ldr	r2, [r7, #24]
 8000526:	18d3      	adds	r3, r2, r3
 8000528:	f04f 0200 	mov.w	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
			endofline=1;
 800052e:	f04f 0301 	mov.w	r3, #1
 8000532:	623b      	str	r3, [r7, #32]
			break;
 8000534:	e032      	b.n	800059c <stdin_read+0xcc>
		case '[':
			if(last_chr_is_esc){
 8000536:	69fb      	ldr	r3, [r7, #28]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d011      	beq.n	8000560 <stdin_read+0x90>
				last_chr_is_esc=0;
 800053c:	f04f 0300 	mov.w	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
				ch=recv_byte();
 8000542:	f001 fdff 	bl	8002144 <recv_byte>
 8000546:	4603      	mov	r3, r0
 8000548:	75fb      	strb	r3, [r7, #23]
				if(ch>=1&&ch<=6){
 800054a:	7dfb      	ldrb	r3, [r7, #23]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d031      	beq.n	80005b4 <stdin_read+0xe4>
 8000550:	7dfb      	ldrb	r3, [r7, #23]
 8000552:	2b06      	cmp	r3, #6
 8000554:	d82e      	bhi.n	80005b4 <stdin_read+0xe4>
					ch=recv_byte();
 8000556:	f001 fdf5 	bl	8002144 <recv_byte>
 800055a:	4603      	mov	r3, r0
 800055c:	75fb      	strb	r3, [r7, #23]
				}
				continue;
 800055e:	e029      	b.n	80005b4 <stdin_read+0xe4>
			}
		case ESC:
			last_chr_is_esc=1;
 8000560:	f04f 0301 	mov.w	r3, #1
 8000564:	61fb      	str	r3, [r7, #28]
			continue;
 8000566:	e028      	b.n	80005ba <stdin_read+0xea>
		case BACKSPACE:
			last_chr_is_esc=0;
 8000568:	f04f 0300 	mov.w	r3, #0
 800056c:	61fb      	str	r3, [r7, #28]
			if(i>0){
 800056e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000570:	2b00      	cmp	r3, #0
 8000572:	dd21      	ble.n	80005b8 <stdin_read+0xe8>
				send_byte('\b');
 8000574:	f04f 0008 	mov.w	r0, #8
 8000578:	f001 fdb6 	bl	80020e8 <send_byte>
				send_byte(' ');
 800057c:	f04f 0020 	mov.w	r0, #32
 8000580:	f001 fdb2 	bl	80020e8 <send_byte>
				send_byte('\b');
 8000584:	f04f 0008 	mov.w	r0, #8
 8000588:	f001 fdae 	bl	80020e8 <send_byte>
				--i;
 800058c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000592:	627b      	str	r3, [r7, #36]	; 0x24
			}
			continue;
 8000594:	e010      	b.n	80005b8 <stdin_read+0xe8>
		default:
			last_chr_is_esc=0;
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
	}
	send_byte(ptrbuf[i]);
 800059c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059e:	69ba      	ldr	r2, [r7, #24]
 80005a0:	18d3      	adds	r3, r2, r3
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f001 fd9f 	bl	80020e8 <send_byte>
	++i;
 80005aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ac:	f103 0301 	add.w	r3, r3, #1
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
 80005b2:	e002      	b.n	80005ba <stdin_read+0xea>
				last_chr_is_esc=0;
				ch=recv_byte();
				if(ch>=1&&ch<=6){
					ch=recv_byte();
				}
				continue;
 80005b4:	bf00      	nop
 80005b6:	e000      	b.n	80005ba <stdin_read+0xea>
				send_byte('\b');
				send_byte(' ');
				send_byte('\b');
				--i;
			}
			continue;
 80005b8:	bf00      	nop
/* Imple */
ssize_t stdin_read(struct inode_t* node, void* buf, size_t count, off_t offset) {
    int i=0, endofline=0, last_chr_is_esc;
    char *ptrbuf=buf;
    char ch;
    while(i < count&&endofline!=1){
 80005ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d202      	bcs.n	80005c8 <stdin_read+0xf8>
 80005c2:	6a3b      	ldr	r3, [r7, #32]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d193      	bne.n	80004f0 <stdin_read+0x20>
			last_chr_is_esc=0;
	}
	send_byte(ptrbuf[i]);
	++i;
    }
    return i;
 80005c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd90      	pop	{r4, r7, pc}

080005d4 <stdout_write>:

ssize_t stdout_write(struct inode_t* node, const void* buf, size_t count, off_t offset) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
 80005e0:	603b      	str	r3, [r7, #0]
    int i;
    const char * data = (const char *) buf;
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	613b      	str	r3, [r7, #16]
    
    for (i = 0; i < count; i++)
 80005e6:	f04f 0300 	mov.w	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	e00a      	b.n	8000604 <stdout_write+0x30>
        send_byte(data[i]);
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	693a      	ldr	r2, [r7, #16]
 80005f2:	18d3      	adds	r3, r2, r3
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fd76 	bl	80020e8 <send_byte>

ssize_t stdout_write(struct inode_t* node, const void* buf, size_t count, off_t offset) {
    int i;
    const char * data = (const char *) buf;
    
    for (i = 0; i < count; i++)
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	f103 0301 	add.w	r3, r3, #1
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	697a      	ldr	r2, [r7, #20]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	429a      	cmp	r2, r3
 800060a:	d3f0      	bcc.n	80005ee <stdout_write+0x1a>
        send_byte(data[i]);
    
    return count;
 800060c:	687b      	ldr	r3, [r7, #4]
}
 800060e:	4618      	mov	r0, r3
 8000610:	f107 0718 	add.w	r7, r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <devfs_root_lookup>:

int devfs_root_lookup(struct inode_t* node, const char* path){
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
    const char* slash = strchr(path, '/');
 8000622:	6838      	ldr	r0, [r7, #0]
 8000624:	f04f 012f 	mov.w	r1, #47	; 0x2f
 8000628:	f003 fb04 	bl	8003c34 <strchr>
 800062c:	60f8      	str	r0, [r7, #12]
    uint32_t hash = hash_djb2((uint8_t*)path, (uint32_t)(slash - path));
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	6838      	ldr	r0, [r7, #0]
 8000636:	4619      	mov	r1, r3
 8000638:	f001 fc20 	bl	8001e7c <hash_djb2>
 800063c:	60b8      	str	r0, [r7, #8]
    switch(hash){
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	f645 03a3 	movw	r3, #22691	; 0x58a3
 8000644:	f6c7 73a0 	movt	r3, #32672	; 0x7fa0
 8000648:	429a      	cmp	r2, r3
 800064a:	d017      	beq.n	800067c <devfs_root_lookup+0x64>
 800064c:	f248 3308 	movw	r3, #33544	; 0x8308
 8000650:	f6c7 73a0 	movt	r3, #32672	; 0x7fa0
 8000654:	429a      	cmp	r2, r3
 8000656:	d00b      	beq.n	8000670 <devfs_root_lookup+0x58>
 8000658:	f240 4321 	movw	r3, #1057	; 0x421
 800065c:	f6c0 33a0 	movt	r3, #2976	; 0xba0
 8000660:	429a      	cmp	r2, r3
 8000662:	d111      	bne.n	8000688 <devfs_root_lookup+0x70>
        case STDIN_HASH:
            return devfs_stdin_node.number;
 8000664:	f240 0324 	movw	r3, #36	; 0x24
 8000668:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	e00d      	b.n	800068c <devfs_root_lookup+0x74>
        case STDOUT_HASH:
            return devfs_stdout_node.number;
 8000670:	f240 035c 	movw	r3, #92	; 0x5c
 8000674:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	e007      	b.n	800068c <devfs_root_lookup+0x74>
        case STDERR_HASH:
            return devfs_stderr_node.number;
 800067c:	f240 0394 	movw	r3, #148	; 0x94
 8000680:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	e001      	b.n	800068c <devfs_root_lookup+0x74>
        default:
            return -1;
 8000688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800068c:	4618      	mov	r0, r3
 800068e:	f107 0710 	add.w	r7, r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop

08000698 <devfs_read_inode>:

int devfs_read_inode(inode_t* inode){
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
    switch(inode->number){
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d833      	bhi.n	8000710 <devfs_read_inode+0x78>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <devfs_read_inode+0x18>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c1 	.word	0x080006c1
 80006b4:	080006d5 	.word	0x080006d5
 80006b8:	080006e9 	.word	0x080006e9
 80006bc:	080006fd 	.word	0x080006fd
        case 0:
            memcpy(inode, &devfs_root_node, sizeof(inode_t));
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f240 01cc 	movw	r1, #204	; 0xcc
 80006c6:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80006ca:	f04f 0238 	mov.w	r2, #56	; 0x38
 80006ce:	f003 fa4f 	bl	8003b70 <memcpy>
            break;
 80006d2:	e020      	b.n	8000716 <devfs_read_inode+0x7e>
        case 1:
            memcpy(inode, &devfs_stdin_node, sizeof(inode_t));
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f240 0124 	movw	r1, #36	; 0x24
 80006da:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80006de:	f04f 0238 	mov.w	r2, #56	; 0x38
 80006e2:	f003 fa45 	bl	8003b70 <memcpy>
            break;
 80006e6:	e016      	b.n	8000716 <devfs_read_inode+0x7e>
        case 2:
            memcpy(inode, &devfs_stdout_node, sizeof(inode_t));
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f240 015c 	movw	r1, #92	; 0x5c
 80006ee:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80006f2:	f04f 0238 	mov.w	r2, #56	; 0x38
 80006f6:	f003 fa3b 	bl	8003b70 <memcpy>
            break;
 80006fa:	e00c      	b.n	8000716 <devfs_read_inode+0x7e>
        case 3:
            memcpy(inode, &devfs_stderr_node, sizeof(inode_t));
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f240 0194 	movw	r1, #148	; 0x94
 8000702:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000706:	f04f 0238 	mov.w	r2, #56	; 0x38
 800070a:	f003 fa31 	bl	8003b70 <memcpy>
            break;
 800070e:	e002      	b.n	8000716 <devfs_read_inode+0x7e>
        default:
           return -1;
 8000710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000714:	e001      	b.n	800071a <devfs_read_inode+0x82>
    }
    return 0;
 8000716:	f04f 0300 	mov.w	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	f107 0708 	add.w	r7, r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <devfs_read_superblock>:

int devfs_read_superblock(void* opaque, struct superblock_t* sb){
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
    sb = &dev_superblock;
 800072e:	f240 0300 	movw	r3, #0
 8000732:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000736:	60fb      	str	r3, [r7, #12]
    return 0;
 8000738:	f04f 0300 	mov.w	r3, #0
}
 800073c:	4618      	mov	r0, r3
 800073e:	f107 0714 	add.w	r7, r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <register_devfs>:

void register_devfs() {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
    DBGOUT("Registering devfs.\r\n");
 800074c:	f246 4018 	movw	r0, #25624	; 0x6418
 8000750:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000754:	f001 ff98 	bl	8002688 <osDbgPrintf>
    register_fs(&devfs_r);
 8000758:	f240 1004 	movw	r0, #260	; 0x104
 800075c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000760:	f000 f838 	bl	80007d4 <register_fs>
}
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop

08000768 <get_stdin_node>:

inode_t* get_stdin_node(){
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
    return &devfs_stdin_node;
 800076c:	f240 0324 	movw	r3, #36	; 0x24
 8000770:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8000774:	4618      	mov	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <get_stdout_node>:
inode_t* get_stdout_node(){
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
    return &devfs_stdout_node;
 8000780:	f240 035c 	movw	r3, #92	; 0x5c
 8000784:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8000788:	4618      	mov	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <get_stderr_node>:

inode_t* get_stderr_node(){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
    return &devfs_stderr_node;
 8000794:	f240 0394 	movw	r3, #148	; 0x94
 8000798:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <fs_init>:
        }
    }
}
*/

__attribute__((constructor)) void fs_init() {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    memset(fss, 0, sizeof(fss));
 80007a8:	f240 6014 	movw	r0, #1556	; 0x614
 80007ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 80007b8:	f003 f984 	bl	8003ac4 <memset>
    memset(inode_pool, 0, sizeof(inode_pool));
 80007bc:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80007c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80007cc:	f003 f97a 	bl	8003ac4 <memset>
}
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop

080007d4 <register_fs>:

int register_fs(fs_type_t* type) {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
    type->next = reg_fss;
 80007dc:	f640 03d4 	movw	r3, #2260	; 0x8d4
 80007e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	60da      	str	r2, [r3, #12]
    reg_fss = type; 
 80007ea:	f640 03d4 	movw	r3, #2260	; 0x8d4
 80007ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	601a      	str	r2, [r3, #0]
    return 0;
 80007f6:	f04f 0300 	mov.w	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	f107 070c 	add.w	r7, r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop

08000808 <fs_mount>:

int fs_mount(inode_t* mountpoint, uint32_t type, void* opaque){
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
    uint32_t i;

    fs_type_t* it = reg_fss;
 8000814:	f640 03d4 	movw	r3, #2260	; 0x8d4
 8000818:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	617b      	str	r3, [r7, #20]
    fs_t* ptr = NULL;
 8000820:	f04f 0300 	mov.w	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < MAX_FS; i++) 
 8000826:	f04f 0300 	mov.w	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
 800082c:	e01c      	b.n	8000868 <fs_mount+0x60>
        if (!fss[i].used){ 
 800082e:	f240 6314 	movw	r3, #1556	; 0x614
 8000832:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000836:	69fa      	ldr	r2, [r7, #28]
 8000838:	f04f 012c 	mov.w	r1, #44	; 0x2c
 800083c:	fb01 f202 	mul.w	r2, r1, r2
 8000840:	189b      	adds	r3, r3, r2
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d10b      	bne.n	8000860 <fs_mount+0x58>
            ptr = fss + i;
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	f04f 022c 	mov.w	r2, #44	; 0x2c
 800084e:	fb02 f203 	mul.w	r2, r2, r3
 8000852:	f240 6314 	movw	r3, #1556	; 0x614
 8000856:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800085a:	18d3      	adds	r3, r2, r3
 800085c:	61bb      	str	r3, [r7, #24]
            break;
 800085e:	e006      	b.n	800086e <fs_mount+0x66>
    uint32_t i;

    fs_type_t* it = reg_fss;
    fs_t* ptr = NULL;

    for (i = 0; i < MAX_FS; i++) 
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	f103 0301 	add.w	r3, r3, #1
 8000866:	61fb      	str	r3, [r7, #28]
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	2b0f      	cmp	r3, #15
 800086c:	d9df      	bls.n	800082e <fs_mount+0x26>
        if (!fss[i].used){ 
            ptr = fss + i;
            break;
        }
    
    for (i = 0; i < MAX_FS; i++) 
 800086e:	f04f 0300 	mov.w	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
 8000874:	e01a      	b.n	80008ac <fs_mount+0xa4>
        if ((fss[i].sb.covered == mountpoint) && (mountpoint != NULL)){ 
 8000876:	f240 6314 	movw	r3, #1556	; 0x614
 800087a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800087e:	69fa      	ldr	r2, [r7, #28]
 8000880:	f04f 012c 	mov.w	r1, #44	; 0x2c
 8000884:	fb01 f202 	mul.w	r2, r1, r2
 8000888:	189b      	adds	r3, r3, r2
 800088a:	f103 030c 	add.w	r3, r3, #12
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	429a      	cmp	r2, r3
 8000894:	d106      	bne.n	80008a4 <fs_mount+0x9c>
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d003      	beq.n	80008a4 <fs_mount+0x9c>
            ptr = NULL;
 800089c:	f04f 0300 	mov.w	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
            break;
 80008a2:	e006      	b.n	80008b2 <fs_mount+0xaa>
        if (!fss[i].used){ 
            ptr = fss + i;
            break;
        }
    
    for (i = 0; i < MAX_FS; i++) 
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	f103 0301 	add.w	r3, r3, #1
 80008aa:	61fb      	str	r3, [r7, #28]
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	2b0f      	cmp	r3, #15
 80008b0:	d9e1      	bls.n	8000876 <fs_mount+0x6e>
        if ((fss[i].sb.covered == mountpoint) && (mountpoint != NULL)){ 
            ptr = NULL;
            break;
        }

    if(!ptr)
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d131      	bne.n	800091c <fs_mount+0x114>
        return -2;
 80008b8:	f06f 0301 	mvn.w	r3, #1
 80008bc:	e033      	b.n	8000926 <fs_mount+0x11e>
    
    while(it != NULL){
        if(it->type_name_hash == type){
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d129      	bne.n	800091c <fs_mount+0x114>
            if((it->require_dev) && (opaque == NULL))
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d005      	beq.n	80008dc <fs_mount+0xd4>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d102      	bne.n	80008dc <fs_mount+0xd4>
                return -3;
 80008d6:	f06f 0302 	mvn.w	r3, #2
 80008da:	e024      	b.n	8000926 <fs_mount+0x11e>
            ptr->used = 1;
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	f04f 0201 	mov.w	r2, #1
 80008e2:	601a      	str	r2, [r3, #0]
            ptr->sb.covered = mountpoint;
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	68fa      	ldr	r2, [r7, #12]
 80008e8:	60da      	str	r2, [r3, #12]
            if(mountpoint){
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00b      	beq.n	8000908 <fs_mount+0x100>
                mountpoint->mode |= 2; //set mountpoint as covered
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	f043 0202 	orr.w	r2, r3, #2
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	609a      	str	r2, [r3, #8]
                mountpoint->count++;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	69db      	ldr	r3, [r3, #28]
 8000900:	f103 0201 	add.w	r2, r3, #1
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	61da      	str	r2, [r3, #28]
            }
            return it->rsbcb(opaque, &ptr->sb);
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	f102 0204 	add.w	r2, r2, #4
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	4611      	mov	r1, r2
 8000916:	4798      	blx	r3
 8000918:	4603      	mov	r3, r0
 800091a:	e004      	b.n	8000926 <fs_mount+0x11e>
        }

    if(!ptr)
        return -2;
    
    while(it != NULL){
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1cd      	bne.n	80008be <fs_mount+0xb6>
                mountpoint->count++;
            }
            return it->rsbcb(opaque, &ptr->sb);
        }
    } 
    return -1;
 8000922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000926:	4618      	mov	r0, r3
 8000928:	f107 0720 	add.w	r7, r7, #32
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <fs_get_inode>:

inode_t* fs_get_inode(uint32_t device, uint32_t number){
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
    for(uint32_t i = 0; i < MAX_INODE_CACHE_SIZE; i++){
 800093a:	f04f 0300 	mov.w	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	e053      	b.n	80009ea <fs_get_inode+0xba>
        if((inode_pool[i].device == device) && (inode_pool[i].number == number)){
 8000942:	f640 02d8 	movw	r2, #2264	; 0x8d8
 8000946:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800094a:	6979      	ldr	r1, [r7, #20]
 800094c:	460b      	mov	r3, r1
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	1a5b      	subs	r3, r3, r1
 8000954:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000958:	18d3      	adds	r3, r2, r3
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	429a      	cmp	r2, r3
 8000960:	d13f      	bne.n	80009e2 <fs_get_inode+0xb2>
 8000962:	f640 02d8 	movw	r2, #2264	; 0x8d8
 8000966:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800096a:	6979      	ldr	r1, [r7, #20]
 800096c:	460b      	mov	r3, r1
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000978:	18d3      	adds	r3, r2, r3
 800097a:	f103 0304 	add.w	r3, r3, #4
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	429a      	cmp	r2, r3
 8000984:	d12d      	bne.n	80009e2 <fs_get_inode+0xb2>
            inode_pool[i].count++;
 8000986:	f640 02d8 	movw	r2, #2264	; 0x8d8
 800098a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800098e:	6979      	ldr	r1, [r7, #20]
 8000990:	460b      	mov	r3, r1
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	1a5b      	subs	r3, r3, r1
 8000998:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099c:	18d3      	adds	r3, r2, r3
 800099e:	f103 031c 	add.w	r3, r3, #28
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f103 0001 	add.w	r0, r3, #1
 80009a8:	f640 02d8 	movw	r2, #2264	; 0x8d8
 80009ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80009b0:	6979      	ldr	r1, [r7, #20]
 80009b2:	460b      	mov	r3, r1
 80009b4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009b8:	1a5b      	subs	r3, r3, r1
 80009ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009be:	18d3      	adds	r3, r2, r3
 80009c0:	f103 031c 	add.w	r3, r3, #28
 80009c4:	6018      	str	r0, [r3, #0]
            return inode_pool + i;
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	4613      	mov	r3, r2
 80009ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ce:	1a9b      	subs	r3, r3, r2
 80009d0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009d4:	461a      	mov	r2, r3
 80009d6:	f640 03d8 	movw	r3, #2264	; 0x8d8
 80009da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80009de:	18d3      	adds	r3, r2, r3
 80009e0:	e102      	b.n	8000be8 <fs_get_inode+0x2b8>
    } 
    return -1;
}

inode_t* fs_get_inode(uint32_t device, uint32_t number){
    for(uint32_t i = 0; i < MAX_INODE_CACHE_SIZE; i++){
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	f103 0301 	add.w	r3, r3, #1
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	2b07      	cmp	r3, #7
 80009ee:	d9a8      	bls.n	8000942 <fs_get_inode+0x12>
            inode_pool[i].count++;
            return inode_pool + i;
        }
    }

    for(uint32_t i = 0; i < MAX_FS; i++){
 80009f0:	f04f 0300 	mov.w	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	e0f1      	b.n	8000bdc <fs_get_inode+0x2ac>
        if((fss[i].used) && (fss[i].sb.device == device)){
 80009f8:	f240 6314 	movw	r3, #1556	; 0x614
 80009fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	f04f 012c 	mov.w	r1, #44	; 0x2c
 8000a06:	fb01 f202 	mul.w	r2, r1, r2
 8000a0a:	189b      	adds	r3, r3, r2
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f000 80e0 	beq.w	8000bd4 <fs_get_inode+0x2a4>
 8000a14:	f240 6314 	movw	r3, #1556	; 0x614
 8000a18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	f04f 012c 	mov.w	r1, #44	; 0x2c
 8000a22:	fb01 f202 	mul.w	r2, r1, r2
 8000a26:	189b      	adds	r3, r3, r2
 8000a28:	f103 0304 	add.w	r3, r3, #4
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	f040 80cf 	bne.w	8000bd4 <fs_get_inode+0x2a4>
            for(uint32_t j = 0; j < MAX_INODE_CACHE_SIZE; j++){
 8000a36:	f04f 0300 	mov.w	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	e0c6      	b.n	8000bcc <fs_get_inode+0x29c>
                if(inode_pool[j].count == 0){
 8000a3e:	f640 02d8 	movw	r2, #2264	; 0x8d8
 8000a42:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000a46:	68f9      	ldr	r1, [r7, #12]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a4e:	1a5b      	subs	r3, r3, r1
 8000a50:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a54:	18d3      	adds	r3, r2, r3
 8000a56:	f103 031c 	add.w	r3, r3, #28
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f040 80b1 	bne.w	8000bc4 <fs_get_inode+0x294>
                    inode_pool[j].device = device;
 8000a62:	f640 02d8 	movw	r2, #2264	; 0x8d8
 8000a66:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000a6a:	68f9      	ldr	r1, [r7, #12]
 8000a6c:	460b      	mov	r3, r1
 8000a6e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a72:	1a5b      	subs	r3, r3, r1
 8000a74:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a78:	18d3      	adds	r3, r2, r3
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	601a      	str	r2, [r3, #0]
                    inode_pool[j].number = number;
 8000a7e:	f640 02d8 	movw	r2, #2264	; 0x8d8
 8000a82:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000a86:	68f9      	ldr	r1, [r7, #12]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a8e:	1a5b      	subs	r3, r3, r1
 8000a90:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a94:	18d3      	adds	r3, r2, r3
 8000a96:	f103 0304 	add.w	r3, r3, #4
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	601a      	str	r2, [r3, #0]
                    if(fss[i].sb.superblock_ops.s_read_inode(&inode_pool[j])){
 8000a9e:	f240 6314 	movw	r3, #1556	; 0x614
 8000aa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	f04f 012c 	mov.w	r1, #44	; 0x2c
 8000aac:	fb01 f202 	mul.w	r2, r1, r2
 8000ab0:	189b      	adds	r3, r3, r2
 8000ab2:	f103 0318 	add.w	r3, r3, #24
 8000ab6:	6819      	ldr	r1, [r3, #0]
 8000ab8:	68fa      	ldr	r2, [r7, #12]
 8000aba:	4613      	mov	r3, r2
 8000abc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ac0:	1a9b      	subs	r3, r3, r2
 8000ac2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ac6:	f640 02d8 	movw	r2, #2264	; 0x8d8
 8000aca:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000ace:	189b      	adds	r3, r3, r2
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	4788      	blx	r1
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d022      	beq.n	8000b20 <fs_get_inode+0x1f0>
                        inode_pool[j].device = 0;
 8000ada:	f640 02d8 	movw	r2, #2264	; 0x8d8
 8000ade:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000ae2:	68f9      	ldr	r1, [r7, #12]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000aea:	1a5b      	subs	r3, r3, r1
 8000aec:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000af0:	18d3      	adds	r3, r2, r3
 8000af2:	f04f 0200 	mov.w	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
                        inode_pool[j].number = 0;
 8000af8:	f640 02d8 	movw	r2, #2264	; 0x8d8
 8000afc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000b00:	68f9      	ldr	r1, [r7, #12]
 8000b02:	460b      	mov	r3, r1
 8000b04:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b0e:	18d3      	adds	r3, r2, r3
 8000b10:	f103 0304 	add.w	r3, r3, #4
 8000b14:	f04f 0200 	mov.w	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
                        return NULL;
 8000b1a:	f04f 0300 	mov.w	r3, #0
 8000b1e:	e063      	b.n	8000be8 <fs_get_inode+0x2b8>
                    }
                    inode_pool[j].count++;
 8000b20:	f640 02d8 	movw	r2, #2264	; 0x8d8
 8000b24:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000b28:	68f9      	ldr	r1, [r7, #12]
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b36:	18d3      	adds	r3, r2, r3
 8000b38:	f103 031c 	add.w	r3, r3, #28
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f103 0001 	add.w	r0, r3, #1
 8000b42:	f640 02d8 	movw	r2, #2264	; 0x8d8
 8000b46:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000b4a:	68f9      	ldr	r1, [r7, #12]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b52:	1a5b      	subs	r3, r3, r1
 8000b54:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b58:	18d3      	adds	r3, r2, r3
 8000b5a:	f103 031c 	add.w	r3, r3, #28
 8000b5e:	6018      	str	r0, [r3, #0]
                    if(inode_pool[j].lock == NULL)
 8000b60:	f640 02d8 	movw	r2, #2264	; 0x8d8
 8000b64:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000b68:	68f9      	ldr	r1, [r7, #12]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b76:	18d3      	adds	r3, r2, r3
 8000b78:	f103 0320 	add.w	r3, r3, #32
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d112      	bne.n	8000ba8 <fs_get_inode+0x278>
                        inode_pool[j].lock = xSemaphoreCreateMutex();
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	f003 fa4b 	bl	8004020 <xQueueCreateMutex>
 8000b8a:	f640 02d8 	movw	r2, #2264	; 0x8d8
 8000b8e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000b92:	68f9      	ldr	r1, [r7, #12]
 8000b94:	460b      	mov	r3, r1
 8000b96:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b9a:	1a5b      	subs	r3, r3, r1
 8000b9c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ba0:	18d3      	adds	r3, r2, r3
 8000ba2:	f103 0320 	add.w	r3, r3, #32
 8000ba6:	6018      	str	r0, [r3, #0]
                    return inode_pool + j;
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	4613      	mov	r3, r2
 8000bac:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000bb0:	1a9b      	subs	r3, r3, r2
 8000bb2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	f640 03d8 	movw	r3, #2264	; 0x8d8
 8000bbc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bc0:	18d3      	adds	r3, r2, r3
 8000bc2:	e011      	b.n	8000be8 <fs_get_inode+0x2b8>
        }
    }

    for(uint32_t i = 0; i < MAX_FS; i++){
        if((fss[i].used) && (fss[i].sb.device == device)){
            for(uint32_t j = 0; j < MAX_INODE_CACHE_SIZE; j++){
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f103 0301 	add.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2b07      	cmp	r3, #7
 8000bd0:	f67f af35 	bls.w	8000a3e <fs_get_inode+0x10e>
            inode_pool[i].count++;
            return inode_pool + i;
        }
    }

    for(uint32_t i = 0; i < MAX_FS; i++){
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	f103 0301 	add.w	r3, r3, #1
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	2b0f      	cmp	r3, #15
 8000be0:	f67f af0a 	bls.w	80009f8 <fs_get_inode+0xc8>
                }
            }
        }
    }

    return NULL;
 8000be4:	f04f 0300 	mov.w	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	f107 0718 	add.w	r7, r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop

08000bf4 <fs_free_inode>:

void fs_free_inode(inode_t* inode){
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
    inode->count--;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	69db      	ldr	r3, [r3, #28]
 8000c00:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	61da      	str	r2, [r3, #28]
    return;
 8000c08:	bf00      	nop
}
 8000c0a:	f107 070c 	add.w	r7, r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <get_inode_by_path>:

int get_inode_by_path(const char* path, inode_t** inode){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
    inode_t *ptr, *ptr2;
    int32_t ret;

    const char * slash = path;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	61bb      	str	r3, [r7, #24]

    for(uint32_t i = 0; i < MAX_FS; i++){
 8000c22:	f04f 0300 	mov.w	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	e03f      	b.n	8000caa <get_inode_by_path+0x96>
        if((fss[i].used) && (fss[i].sb.covered == NULL)){
 8000c2a:	f240 6314 	movw	r3, #1556	; 0x614
 8000c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	f04f 012c 	mov.w	r1, #44	; 0x2c
 8000c38:	fb01 f202 	mul.w	r2, r1, r2
 8000c3c:	189b      	adds	r3, r3, r2
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d02e      	beq.n	8000ca2 <get_inode_by_path+0x8e>
 8000c44:	f240 6314 	movw	r3, #1556	; 0x614
 8000c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	f04f 012c 	mov.w	r1, #44	; 0x2c
 8000c52:	fb01 f202 	mul.w	r2, r1, r2
 8000c56:	189b      	adds	r3, r3, r2
 8000c58:	f103 030c 	add.w	r3, r3, #12
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d11f      	bne.n	8000ca2 <get_inode_by_path+0x8e>
            ptr = fs_get_inode(fss[i].sb.device, fss[i].sb.mounted);
 8000c62:	f240 6314 	movw	r3, #1556	; 0x614
 8000c66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	f04f 012c 	mov.w	r1, #44	; 0x2c
 8000c70:	fb01 f202 	mul.w	r2, r1, r2
 8000c74:	189b      	adds	r3, r3, r2
 8000c76:	f103 0304 	add.w	r3, r3, #4
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	f240 6314 	movw	r3, #1556	; 0x614
 8000c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c84:	6979      	ldr	r1, [r7, #20]
 8000c86:	f04f 002c 	mov.w	r0, #44	; 0x2c
 8000c8a:	fb00 f101 	mul.w	r1, r0, r1
 8000c8e:	185b      	adds	r3, r3, r1
 8000c90:	f103 0308 	add.w	r3, r3, #8
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4610      	mov	r0, r2
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f7ff fe49 	bl	8000930 <fs_get_inode>
 8000c9e:	61f8      	str	r0, [r7, #28]
            break;
 8000ca0:	e006      	b.n	8000cb0 <get_inode_by_path+0x9c>
    inode_t *ptr, *ptr2;
    int32_t ret;

    const char * slash = path;

    for(uint32_t i = 0; i < MAX_FS; i++){
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	f103 0301 	add.w	r3, r3, #1
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d9bc      	bls.n	8000c2a <get_inode_by_path+0x16>
            ptr = fs_get_inode(fss[i].sb.device, fss[i].sb.mounted);
            break;
        }
    }
    
    slash = path;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	61bb      	str	r3, [r7, #24]
    while(1){
        slash = strchr(slash, '/');
 8000cb4:	69b8      	ldr	r0, [r7, #24]
 8000cb6:	f04f 012f 	mov.w	r1, #47	; 0x2f
 8000cba:	f002 ffbb 	bl	8003c34 <strchr>
 8000cbe:	61b8      	str	r0, [r7, #24]
        if(!slash || slash[1] == '\0')
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d07e      	beq.n	8000dc4 <get_inode_by_path+0x1b0>
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	f103 0301 	add.w	r3, r3, #1
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d078      	beq.n	8000dc4 <get_inode_by_path+0x1b0>
            break;
        slash++;
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	f103 0301 	add.w	r3, r3, #1
 8000cd8:	61bb      	str	r3, [r7, #24]
        
        if(ptr->mode & 0x0002){
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d04c      	beq.n	8000d80 <get_inode_by_path+0x16c>
            for(uint32_t i = 0; i < MAX_FS; i++){
 8000ce6:	f04f 0300 	mov.w	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	e044      	b.n	8000d78 <get_inode_by_path+0x164>
                if((fss[i].used) && (fss[i].sb.covered == ptr)){
 8000cee:	f240 6314 	movw	r3, #1556	; 0x614
 8000cf2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	f04f 012c 	mov.w	r1, #44	; 0x2c
 8000cfc:	fb01 f202 	mul.w	r2, r1, r2
 8000d00:	189b      	adds	r3, r3, r2
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d033      	beq.n	8000d70 <get_inode_by_path+0x15c>
 8000d08:	f240 6314 	movw	r3, #1556	; 0x614
 8000d0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	f04f 012c 	mov.w	r1, #44	; 0x2c
 8000d16:	fb01 f202 	mul.w	r2, r1, r2
 8000d1a:	189b      	adds	r3, r3, r2
 8000d1c:	f103 030c 	add.w	r3, r3, #12
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d123      	bne.n	8000d70 <get_inode_by_path+0x15c>
                    ptr2 = ptr;
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	60fb      	str	r3, [r7, #12]
                    ptr = fs_get_inode(fss[i].sb.device, fss[i].sb.mounted);
 8000d2c:	f240 6314 	movw	r3, #1556	; 0x614
 8000d30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	f04f 012c 	mov.w	r1, #44	; 0x2c
 8000d3a:	fb01 f202 	mul.w	r2, r1, r2
 8000d3e:	189b      	adds	r3, r3, r2
 8000d40:	f103 0304 	add.w	r3, r3, #4
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	f240 6314 	movw	r3, #1556	; 0x614
 8000d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d4e:	6939      	ldr	r1, [r7, #16]
 8000d50:	f04f 002c 	mov.w	r0, #44	; 0x2c
 8000d54:	fb00 f101 	mul.w	r1, r0, r1
 8000d58:	185b      	adds	r3, r3, r1
 8000d5a:	f103 0308 	add.w	r3, r3, #8
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4610      	mov	r0, r2
 8000d62:	4619      	mov	r1, r3
 8000d64:	f7ff fde4 	bl	8000930 <fs_get_inode>
 8000d68:	61f8      	str	r0, [r7, #28]
                    fs_free_inode(ptr2);
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f7ff ff42 	bl	8000bf4 <fs_free_inode>
        if(!slash || slash[1] == '\0')
            break;
        slash++;
        
        if(ptr->mode & 0x0002){
            for(uint32_t i = 0; i < MAX_FS; i++){
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	f103 0301 	add.w	r3, r3, #1
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	2b0f      	cmp	r3, #15
 8000d7c:	d9b7      	bls.n	8000cee <get_inode_by_path+0xda>
 8000d7e:	e020      	b.n	8000dc2 <get_inode_by_path+0x1ae>
                    ptr = fs_get_inode(fss[i].sb.device, fss[i].sb.mounted);
                    fs_free_inode(ptr2);
                }
            }
        }else{
            ptr2 = ptr;
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	60fb      	str	r3, [r7, #12]
            ret = ptr->inode_ops.i_lookup(ptr, slash);
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	69f8      	ldr	r0, [r7, #28]
 8000d8a:	69b9      	ldr	r1, [r7, #24]
 8000d8c:	4798      	blx	r3
 8000d8e:	60b8      	str	r0, [r7, #8]
            if(ret < 0){
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	da09      	bge.n	8000daa <get_inode_by_path+0x196>
                *inode = NULL;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	f04f 0200 	mov.w	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
                fs_free_inode(ptr);
 8000d9e:	69f8      	ldr	r0, [r7, #28]
 8000da0:	f7ff ff28 	bl	8000bf4 <fs_free_inode>
                return -1;
 8000da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000da8:	e011      	b.n	8000dce <get_inode_by_path+0x1ba>
            }
            ptr = fs_get_inode(ptr->device, ret);
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	4610      	mov	r0, r2
 8000db2:	4619      	mov	r1, r3
 8000db4:	f7ff fdbc 	bl	8000930 <fs_get_inode>
 8000db8:	61f8      	str	r0, [r7, #28]
            fs_free_inode(ptr2);
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f7ff ff1a 	bl	8000bf4 <fs_free_inode>
        }
    }
 8000dc0:	e778      	b.n	8000cb4 <get_inode_by_path+0xa0>
 8000dc2:	e777      	b.n	8000cb4 <get_inode_by_path+0xa0>
    
    *inode = ptr;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	601a      	str	r2, [r3, #0]
    return 0; 
 8000dca:	f04f 0300 	mov.w	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f107 0720 	add.w	r7, r7, #32
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <fio_is_open_int>:
    if ((fd < 0) || (fd >= MAX_FDS))
        return NULL;
    return fio_fds + fd;
}

static int fio_is_open_int(int fd) {
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    if ((fd < 0) || (fd >= MAX_FDS))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db02      	blt.n	8000dec <fio_is_open_int+0x14>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b1f      	cmp	r3, #31
 8000dea:	dd02      	ble.n	8000df2 <fio_is_open_int+0x1a>
        return 0;
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e013      	b.n	8000e1a <fio_is_open_int+0x42>
    int r = !(fio_fds[fd].inode == NULL);
 8000df2:	f640 2298 	movw	r2, #2712	; 0xa98
 8000df6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000e02:	185b      	adds	r3, r3, r1
 8000e04:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000e08:	18d3      	adds	r3, r2, r3
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	bf0c      	ite	eq
 8000e10:	2300      	moveq	r3, #0
 8000e12:	2301      	movne	r3, #1
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	60fb      	str	r3, [r7, #12]
    return r;
 8000e18:	68fb      	ldr	r3, [r7, #12]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f107 0714 	add.w	r7, r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <fio_is_dir_open_int>:

static int fio_is_dir_open_int(int dd) {
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
    if ((dd < 0) || (dd >= MAX_DDS))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	db02      	blt.n	8000e3c <fio_is_dir_open_int+0x14>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	dd02      	ble.n	8000e42 <fio_is_dir_open_int+0x1a>
        return 0;
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e013      	b.n	8000e6a <fio_is_dir_open_int+0x42>
    int r = !((fio_dds[dd].inode == NULL));
 8000e42:	f640 5218 	movw	r2, #3352	; 0xd18
 8000e46:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000e52:	185b      	adds	r3, r3, r1
 8000e54:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000e58:	18d3      	adds	r3, r2, r3
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	bf0c      	ite	eq
 8000e60:	2300      	moveq	r3, #0
 8000e62:	2301      	movne	r3, #1
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	60fb      	str	r3, [r7, #12]
    return r;
 8000e68:	68fb      	ldr	r3, [r7, #12]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f107 0714 	add.w	r7, r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <fio_findfd>:

static int fio_findfd() {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
    int i;
    
    for (i = 0; i < MAX_FDS; i++) {
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	e00b      	b.n	8000e9e <fio_findfd+0x26>
        if (!fio_is_open_int(i))
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffa6 	bl	8000dd8 <fio_is_open_int>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <fio_findfd+0x1e>
            return i;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	e008      	b.n	8000ea8 <fio_findfd+0x30>
}

static int fio_findfd() {
    int i;
    
    for (i = 0; i < MAX_FDS; i++) {
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f103 0301 	add.w	r3, r3, #1
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b1f      	cmp	r3, #31
 8000ea2:	ddf0      	ble.n	8000e86 <fio_findfd+0xe>
        if (!fio_is_open_int(i))
            return i;
    }
    
    return -1;
 8000ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f107 0708 	add.w	r7, r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop

08000eb4 <fio_finddd>:

static int fio_finddd() {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
    int i;
    
    for (i = 0; i < MAX_DDS; i++) {
 8000eba:	f04f 0300 	mov.w	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	e00b      	b.n	8000eda <fio_finddd+0x26>
        if (!fio_is_dir_open_int(i))
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ffb0 	bl	8000e28 <fio_is_dir_open_int>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <fio_finddd+0x1e>
            return i;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	e008      	b.n	8000ee4 <fio_finddd+0x30>
}

static int fio_finddd() {
    int i;
    
    for (i = 0; i < MAX_DDS; i++) {
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f103 0301 	add.w	r3, r3, #1
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	ddf0      	ble.n	8000ec2 <fio_finddd+0xe>
        if (!fio_is_dir_open_int(i))
            return i;
    }
    
    return -1;
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f107 0708 	add.w	r7, r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop

08000ef0 <fio_open>:
    r = fio_is_open_int(fd);
    xSemaphoreGive(fio_sem);
    return r;
}

int fio_open(const char * path, int flags, int mode) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0ba      	sub	sp, #232	; 0xe8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
    int fd, ret, target_node;
    inode_t* p_inode,* f_inode;
    const char* fn = path + strlen(path) - 1;
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f7ff fa11 	bl	8000324 <strlen>
 8000f02:	4603      	mov	r3, r0
 8000f04:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	18d3      	adds	r3, r2, r3
 8000f0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    char buf[64], fn_buf[128];
    
    if(strcmp(path, "/") == 0)
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f246 4130 	movw	r1, #25648	; 0x6430
 8000f16:	f6c0 0100 	movt	r1, #2048	; 0x800
 8000f1a:	f002 ff09 	bl	8003d30 <strcmp>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <fio_open+0x3a>
        return -1;
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f28:	e16e      	b.n	8001208 <fio_open+0x318>

    ret = 0;
 8000f2a:	f04f 0300 	mov.w	r3, #0
 8000f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    while(*fn == '/')fn--, ret++;
 8000f32:	e00b      	b.n	8000f4c <fio_open+0x5c>
 8000f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f38:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000f3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000f44:	f103 0301 	add.w	r3, r3, #1
 8000f48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b2f      	cmp	r3, #47	; 0x2f
 8000f54:	d0ee      	beq.n	8000f34 <fio_open+0x44>
    while(*fn != '/')fn--;
 8000f56:	e005      	b.n	8000f64 <fio_open+0x74>
 8000f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f5c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000f60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8000f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b2f      	cmp	r3, #47	; 0x2f
 8000f6c:	d1f4      	bne.n	8000f58 <fio_open+0x68>
    fn++;
 8000f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f72:	f103 0301 	add.w	r3, r3, #1
 8000f76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    strncpy(fn_buf, fn, strlen(fn) - ret);
 8000f7a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8000f7e:	f7ff f9d1 	bl	8000324 <strlen>
 8000f82:	4602      	mov	r2, r0
 8000f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	f107 0210 	add.w	r2, r7, #16
 8000f8e:	4610      	mov	r0, r2
 8000f90:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8000f94:	461a      	mov	r2, r3
 8000f96:	f002 fe97 	bl	8003cc8 <strncpy>
    fn_buf[strlen(fn) - ret] = '\0';
 8000f9a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8000f9e:	f7ff f9c1 	bl	8000324 <strlen>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8000fae:	18d3      	adds	r3, r2, r3
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	f803 2cd8 	strb.w	r2, [r3, #-216]

    strncpy(buf, path, fn - path);
 8000fb8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	68f9      	ldr	r1, [r7, #12]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f002 fe7d 	bl	8003cc8 <strncpy>
    buf[fn - path] = '\0';
 8000fce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8000fda:	18d3      	adds	r3, r2, r3
 8000fdc:	f04f 0200 	mov.w	r2, #0
 8000fe0:	f803 2c58 	strb.w	r2, [r3, #-88]

//    DBGOUT("fio_open(%p, %p, %p, %p, %p)\r\n", fdread, fdwrite, fdseek, fdclose, opaque);
    ret = get_inode_by_path(buf, &p_inode);
 8000fe4:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8000fe8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff fe10 	bl	8000c14 <get_inode_by_path>
 8000ff4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
    if(!ret){
 8000ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f040 8101 	bne.w	8001204 <fio_open+0x314>
        target_node = p_inode->inode_ops.i_lookup(p_inode, fn_buf);
 8001002:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800100c:	f107 0210 	add.w	r2, r7, #16
 8001010:	4608      	mov	r0, r1
 8001012:	4611      	mov	r1, r2
 8001014:	4798      	blx	r3
 8001016:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0

        if(target_node){
 800101a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d052      	beq.n	80010c8 <fio_open+0x1d8>
            if(p_inode->inode_ops.i_create){
 8001022:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d045      	beq.n	80010b8 <fio_open+0x1c8>
                xSemaphoreTake(p_inode->lock, portMAX_DELAY);
 800102c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	4618      	mov	r0, r3
 8001034:	f04f 0100 	mov.w	r1, #0
 8001038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	f003 f91e 	bl	8004280 <xQueueGenericReceive>
                if(p_inode->inode_ops.i_create(p_inode, fn_buf)){
 8001044:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800104e:	f107 0210 	add.w	r2, r7, #16
 8001052:	4608      	mov	r0, r1
 8001054:	4611      	mov	r1, r2
 8001056:	4798      	blx	r3
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d013      	beq.n	8001086 <fio_open+0x196>
                    xSemaphoreGive(p_inode->lock);
 800105e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4618      	mov	r0, r3
 8001066:	f04f 0100 	mov.w	r1, #0
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	f003 f825 	bl	80040c0 <xQueueGenericSend>
                    fs_free_inode(p_inode);
 8001076:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fdba 	bl	8000bf4 <fs_free_inode>
                    return -3;       
 8001080:	f06f 0302 	mvn.w	r3, #2
 8001084:	e0c0      	b.n	8001208 <fio_open+0x318>
                }else{
                    xSemaphoreGive(p_inode->lock);
 8001086:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	4618      	mov	r0, r3
 800108e:	f04f 0100 	mov.w	r1, #0
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	f003 f811 	bl	80040c0 <xQueueGenericSend>
                    target_node = p_inode->inode_ops.i_lookup(p_inode, fn_buf);
 800109e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80010a2:	695b      	ldr	r3, [r3, #20]
 80010a4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80010a8:	f107 0210 	add.w	r2, r7, #16
 80010ac:	4608      	mov	r0, r1
 80010ae:	4611      	mov	r1, r2
 80010b0:	4798      	blx	r3
 80010b2:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 80010b6:	e007      	b.n	80010c8 <fio_open+0x1d8>
                }
            }else{
                fs_free_inode(p_inode);
 80010b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fd99 	bl	8000bf4 <fs_free_inode>
                return -2;
 80010c2:	f06f 0301 	mvn.w	r3, #1
 80010c6:	e09f      	b.n	8001208 <fio_open+0x318>
            }
        }

        f_inode = fs_get_inode(p_inode->device, target_node);
 80010c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	f7ff fc2b 	bl	8000930 <fs_get_inode>
 80010da:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
        
        if(f_inode->mode && 1){
 80010de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00b      	beq.n	8001100 <fio_open+0x210>
            fs_free_inode(f_inode);
 80010e8:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80010ec:	f7ff fd82 	bl	8000bf4 <fs_free_inode>
            fs_free_inode(p_inode);
 80010f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fd7d 	bl	8000bf4 <fs_free_inode>
            return -4;
 80010fa:	f06f 0303 	mvn.w	r3, #3
 80010fe:	e083      	b.n	8001208 <fio_open+0x318>
        }

        xSemaphoreTake(fio_sem, portMAX_DELAY);
 8001100:	f640 5348 	movw	r3, #3400	; 0xd48
 8001104:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f04f 0100 	mov.w	r1, #0
 8001110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	f003 f8b2 	bl	8004280 <xQueueGenericReceive>
        fd = fio_findfd();
 800111c:	f7ff feac 	bl	8000e78 <fio_findfd>
 8001120:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
            
        if (fd >= 0) {
 8001124:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001128:	2b00      	cmp	r3, #0
 800112a:	db55      	blt.n	80011d8 <fio_open+0x2e8>
            fio_fds[fd].inode = f_inode;
 800112c:	f640 2298 	movw	r2, #2712	; 0xa98
 8001130:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001134:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001138:	460b      	mov	r3, r1
 800113a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800113e:	185b      	adds	r3, r3, r1
 8001140:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001144:	18d3      	adds	r3, r2, r3
 8001146:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800114a:	601a      	str	r2, [r3, #0]
            fio_fds[fd].flags = flags;
 800114c:	68b8      	ldr	r0, [r7, #8]
 800114e:	f640 2298 	movw	r2, #2712	; 0xa98
 8001152:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001156:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800115a:	460b      	mov	r3, r1
 800115c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001160:	185b      	adds	r3, r3, r1
 8001162:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001166:	18d3      	adds	r3, r2, r3
 8001168:	f103 0304 	add.w	r3, r3, #4
 800116c:	6018      	str	r0, [r3, #0]
            fio_fds[fd].mode = mode;
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f640 2298 	movw	r2, #2712	; 0xa98
 8001174:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001178:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800117c:	460b      	mov	r3, r1
 800117e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001182:	185b      	adds	r3, r3, r1
 8001184:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001188:	18d3      	adds	r3, r2, r3
 800118a:	f103 0308 	add.w	r3, r3, #8
 800118e:	6018      	str	r0, [r3, #0]
            fio_fds[fd].cursor = 0;
 8001190:	f640 2298 	movw	r2, #2712	; 0xa98
 8001194:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001198:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800119c:	460b      	mov	r3, r1
 800119e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80011a2:	185b      	adds	r3, r3, r1
 80011a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80011a8:	18d3      	adds	r3, r2, r3
 80011aa:	f103 030c 	add.w	r3, r3, #12
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
            fio_fds[fd].opaque = NULL;
 80011b4:	f640 2298 	movw	r2, #2712	; 0xa98
 80011b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80011bc:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80011c0:	460b      	mov	r3, r1
 80011c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80011c6:	185b      	adds	r3, r3, r1
 80011c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80011cc:	18d3      	adds	r3, r2, r3
 80011ce:	f103 0310 	add.w	r3, r3, #16
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
        }
        xSemaphoreGive(fio_sem);
 80011d8:	f640 5348 	movw	r3, #3400	; 0xd48
 80011dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f04f 0100 	mov.w	r1, #0
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	f002 ff66 	bl	80040c0 <xQueueGenericSend>

        fs_free_inode(p_inode);
 80011f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fcfb 	bl	8000bf4 <fs_free_inode>

        return fd;
 80011fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001202:	e001      	b.n	8001208 <fio_open+0x318>
    }else{
        return -1;
 8001204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 8001208:	4618      	mov	r0, r3
 800120a:	f107 07e8 	add.w	r7, r7, #232	; 0xe8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop

08001214 <fio_mkdir>:

int fio_mkdir(const char * path) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b0b6      	sub	sp, #216	; 0xd8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
    int ret, target_node;
    inode_t* p_inode;
    const char* fn = path + strlen(path) - 1;
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff f881 	bl	8000324 <strlen>
 8001222:	4603      	mov	r3, r0
 8001224:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	18d3      	adds	r3, r2, r3
 800122c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    char buf[64], fn_buf[128];

    if(strcmp(path, "/") == 0)
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f246 4130 	movw	r1, #25648	; 0x6430
 8001236:	f6c0 0100 	movt	r1, #2048	; 0x800
 800123a:	f002 fd79 	bl	8003d30 <strcmp>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d102      	bne.n	800124a <fio_mkdir+0x36>
        return -1;
 8001244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001248:	e0cd      	b.n	80013e6 <fio_mkdir+0x1d2>

    ret = 0;
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    while(*fn == '/')fn--, ret++;
 8001252:	e00b      	b.n	800126c <fio_mkdir+0x58>
 8001254:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001258:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800125c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001260:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001264:	f103 0301 	add.w	r3, r3, #1
 8001268:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800126c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b2f      	cmp	r3, #47	; 0x2f
 8001274:	d0ee      	beq.n	8001254 <fio_mkdir+0x40>
    while(*fn != '/')fn--;
 8001276:	e005      	b.n	8001284 <fio_mkdir+0x70>
 8001278:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800127c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8001280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001284:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b2f      	cmp	r3, #47	; 0x2f
 800128c:	d1f4      	bne.n	8001278 <fio_mkdir+0x64>
    fn++;
 800128e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001292:	f103 0301 	add.w	r3, r3, #1
 8001296:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    strncpy(fn_buf, fn, strlen(fn) - ret);
 800129a:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800129e:	f7ff f841 	bl	8000324 <strlen>
 80012a2:	4602      	mov	r2, r0
 80012a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	f107 0208 	add.w	r2, r7, #8
 80012ae:	4610      	mov	r0, r2
 80012b0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80012b4:	461a      	mov	r2, r3
 80012b6:	f002 fd07 	bl	8003cc8 <strncpy>
    fn_buf[strlen(fn) - ret] = '\0';
 80012ba:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80012be:	f7ff f831 	bl	8000324 <strlen>
 80012c2:	4602      	mov	r2, r0
 80012c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80012ce:	18d3      	adds	r3, r2, r3
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f803 2cd0 	strb.w	r2, [r3, #-208]

    strncpy(buf, path, fn - path);
 80012d8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80012e4:	4610      	mov	r0, r2
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	461a      	mov	r2, r3
 80012ea:	f002 fced 	bl	8003cc8 <strncpy>
    buf[fn - path] = '\0';
 80012ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80012fa:	18d3      	adds	r3, r2, r3
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	f803 2c50 	strb.w	r2, [r3, #-80]

//    DBGOUT("fio_open(%p, %p, %p, %p, %p)\r\n", fdread, fdwrite, fdseek, fdclose, opaque);
    ret = get_inode_by_path(buf, &p_inode);
 8001304:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001308:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fc80 	bl	8000c14 <get_inode_by_path>
 8001314:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    if(!ret){
 8001318:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d160      	bne.n	80013e2 <fio_mkdir+0x1ce>
        target_node = p_inode->inode_ops.i_lookup(p_inode, fn_buf);
 8001320:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800132a:	f107 0208 	add.w	r2, r7, #8
 800132e:	4608      	mov	r0, r1
 8001330:	4611      	mov	r1, r2
 8001332:	4798      	blx	r3
 8001334:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        if(!target_node){
 8001338:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <fio_mkdir+0x132>
            return -1;
 8001340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001344:	e04f      	b.n	80013e6 <fio_mkdir+0x1d2>
        }else{
            if(p_inode->inode_ops.i_mkdir){
 8001346:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d040      	beq.n	80013d2 <fio_mkdir+0x1be>
                xSemaphoreTake(p_inode->lock, portMAX_DELAY);
 8001350:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	4618      	mov	r0, r3
 8001358:	f04f 0100 	mov.w	r1, #0
 800135c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	f002 ff8c 	bl	8004280 <xQueueGenericReceive>
                if(p_inode->inode_ops.i_mkdir(p_inode, fn_buf)){
 8001368:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001372:	f107 0208 	add.w	r2, r7, #8
 8001376:	4608      	mov	r0, r1
 8001378:	4611      	mov	r1, r2
 800137a:	4798      	blx	r3
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d013      	beq.n	80013aa <fio_mkdir+0x196>
                    xSemaphoreGive(p_inode->lock);
 8001382:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4618      	mov	r0, r3
 800138a:	f04f 0100 	mov.w	r1, #0
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	f04f 0300 	mov.w	r3, #0
 8001396:	f002 fe93 	bl	80040c0 <xQueueGenericSend>
                    fs_free_inode(p_inode);
 800139a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fc28 	bl	8000bf4 <fs_free_inode>
                    return -3;       
 80013a4:	f06f 0302 	mvn.w	r3, #2
 80013a8:	e01d      	b.n	80013e6 <fio_mkdir+0x1d2>
                }else{
                    xSemaphoreGive(p_inode->lock);
 80013aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f04f 0100 	mov.w	r1, #0
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	f002 fe7f 	bl	80040c0 <xQueueGenericSend>
                    fs_free_inode(p_inode);
 80013c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fc14 	bl	8000bf4 <fs_free_inode>
                    return 0;       
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e009      	b.n	80013e6 <fio_mkdir+0x1d2>
                }
            }else{
                fs_free_inode(p_inode);
 80013d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fc0c 	bl	8000bf4 <fs_free_inode>
                return -2;
 80013dc:	f06f 0301 	mvn.w	r3, #1
 80013e0:	e001      	b.n	80013e6 <fio_mkdir+0x1d2>
            }
        }
    }else{
        return -1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	f107 07d8 	add.w	r7, r7, #216	; 0xd8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <fio_opendir>:

int fio_opendir(const char* path) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b0b8      	sub	sp, #224	; 0xe0
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
    int dd, ret, target_node;
    inode_t* p_inode,* f_inode;
    const char* fn = path + strlen(path) - 1;
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7fe ff93 	bl	8000324 <strlen>
 80013fe:	4603      	mov	r3, r0
 8001400:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	18d3      	adds	r3, r2, r3
 8001408:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    char buf[64], fn_buf[128];

    if(strcmp(path, "/") == 0){
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f246 4130 	movw	r1, #25648	; 0x6430
 8001412:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001416:	f002 fc8b 	bl	8003d30 <strcmp>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d162      	bne.n	80014e6 <fio_opendir+0xf6>
        ret = get_inode_by_path(path, &p_inode);
 8001420:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fbf4 	bl	8000c14 <get_inode_by_path>
 800142c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        xSemaphoreTake(fio_sem, portMAX_DELAY);
 8001430:	f640 5348 	movw	r3, #3400	; 0xd48
 8001434:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f04f 0100 	mov.w	r1, #0
 8001440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	f002 ff1a 	bl	8004280 <xQueueGenericReceive>
        dd = fio_finddd();
 800144c:	f7ff fd32 	bl	8000eb4 <fio_finddd>
 8001450:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
            
        if (dd >= 0) {
 8001454:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001458:	2b00      	cmp	r3, #0
 800145a:	db33      	blt.n	80014c4 <fio_opendir+0xd4>
            fio_dds[dd].inode = p_inode;
 800145c:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001460:	f640 5218 	movw	r2, #3352	; 0xd18
 8001464:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001468:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800146c:	460b      	mov	r3, r1
 800146e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001472:	185b      	adds	r3, r3, r1
 8001474:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001478:	18d3      	adds	r3, r2, r3
 800147a:	6018      	str	r0, [r3, #0]
            fio_dds[dd].cursor = 0;
 800147c:	f640 5218 	movw	r2, #3352	; 0xd18
 8001480:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001484:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001488:	460b      	mov	r3, r1
 800148a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800148e:	185b      	adds	r3, r3, r1
 8001490:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001494:	18d3      	adds	r3, r2, r3
 8001496:	f103 0304 	add.w	r3, r3, #4
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
            fio_dds[dd].opaque = NULL;
 80014a0:	f640 5218 	movw	r2, #3352	; 0xd18
 80014a4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80014a8:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80014ac:	460b      	mov	r3, r1
 80014ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80014b2:	185b      	adds	r3, r3, r1
 80014b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80014b8:	18d3      	adds	r3, r2, r3
 80014ba:	f103 0308 	add.w	r3, r3, #8
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
        }
        xSemaphoreGive(fio_sem);
 80014c4:	f640 5348 	movw	r3, #3400	; 0xd48
 80014c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f04f 0100 	mov.w	r1, #0
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	f002 fdf0 	bl	80040c0 <xQueueGenericSend>
        return dd;
 80014e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80014e4:	e0fc      	b.n	80016e0 <fio_opendir+0x2f0>
    }else{
        ret = 0;
 80014e6:	f04f 0300 	mov.w	r3, #0
 80014ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        while(*fn == '/')fn--, ret++;
 80014ee:	e00b      	b.n	8001508 <fio_opendir+0x118>
 80014f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80014f4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80014f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80014fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001500:	f103 0301 	add.w	r3, r3, #1
 8001504:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001508:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b2f      	cmp	r3, #47	; 0x2f
 8001510:	d0ee      	beq.n	80014f0 <fio_opendir+0x100>
        while(*fn != '/')fn--;
 8001512:	e005      	b.n	8001520 <fio_opendir+0x130>
 8001514:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001518:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800151c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001520:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b2f      	cmp	r3, #47	; 0x2f
 8001528:	d1f4      	bne.n	8001514 <fio_opendir+0x124>
        fn++;
 800152a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800152e:	f103 0301 	add.w	r3, r3, #1
 8001532:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
        strncpy(fn_buf, fn, strlen(fn) - ret);
 8001536:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800153a:	f7fe fef3 	bl	8000324 <strlen>
 800153e:	4602      	mov	r2, r0
 8001540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f107 0208 	add.w	r2, r7, #8
 800154a:	4610      	mov	r0, r2
 800154c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001550:	461a      	mov	r2, r3
 8001552:	f002 fbb9 	bl	8003cc8 <strncpy>
        fn_buf[strlen(fn) - ret] = '\0';
 8001556:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800155a:	f7fe fee3 	bl	8000324 <strlen>
 800155e:	4602      	mov	r2, r0
 8001560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800156a:	18d3      	adds	r3, r2, r3
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f803 2cd8 	strb.w	r2, [r3, #-216]

        strncpy(buf, path, fn - path);
 8001574:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001580:	4610      	mov	r0, r2
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	461a      	mov	r2, r3
 8001586:	f002 fb9f 	bl	8003cc8 <strncpy>
        buf[fn - path] = '\0';
 800158a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001596:	18d3      	adds	r3, r2, r3
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	f803 2c58 	strb.w	r2, [r3, #-88]
        
        ret = get_inode_by_path(buf, &p_inode);
 80015a0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff fb32 	bl	8000c14 <get_inode_by_path>
 80015b0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if(!ret){
 80015b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f040 808f 	bne.w	80016dc <fio_opendir+0x2ec>
            target_node = p_inode->inode_ops.i_lookup(p_inode, fn_buf);
 80015be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80015c8:	f107 0208 	add.w	r2, r7, #8
 80015cc:	4608      	mov	r0, r1
 80015ce:	4611      	mov	r1, r2
 80015d0:	4798      	blx	r3
 80015d2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

            if(!target_node){
 80015d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <fio_opendir+0x1f4>
                return -1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015e2:	e07d      	b.n	80016e0 <fio_opendir+0x2f0>
            }

            f_inode = fs_get_inode(p_inode->device, target_node);
 80015e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff f99d 	bl	8000930 <fs_get_inode>
 80015f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
            
            if(!(f_inode->mode && 1)){
 80015fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10b      	bne.n	800161c <fio_opendir+0x22c>
                fs_free_inode(f_inode);
 8001604:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001608:	f7ff faf4 	bl	8000bf4 <fs_free_inode>
                fs_free_inode(p_inode);
 800160c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff faef 	bl	8000bf4 <fs_free_inode>
                return -4;
 8001616:	f06f 0303 	mvn.w	r3, #3
 800161a:	e061      	b.n	80016e0 <fio_opendir+0x2f0>
            }

            xSemaphoreTake(fio_sem, portMAX_DELAY);
 800161c:	f640 5348 	movw	r3, #3400	; 0xd48
 8001620:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f04f 0100 	mov.w	r1, #0
 800162c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	f002 fe24 	bl	8004280 <xQueueGenericReceive>
            dd = fio_finddd();
 8001638:	f7ff fc3c 	bl	8000eb4 <fio_finddd>
 800163c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
                
            if (dd >= 0) {
 8001640:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001644:	2b00      	cmp	r3, #0
 8001646:	db33      	blt.n	80016b0 <fio_opendir+0x2c0>
                fio_dds[dd].inode = f_inode;
 8001648:	f640 5218 	movw	r2, #3352	; 0xd18
 800164c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001650:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001654:	460b      	mov	r3, r1
 8001656:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800165a:	185b      	adds	r3, r3, r1
 800165c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001660:	18d3      	adds	r3, r2, r3
 8001662:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001666:	601a      	str	r2, [r3, #0]
                fio_dds[dd].cursor = 0;
 8001668:	f640 5218 	movw	r2, #3352	; 0xd18
 800166c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001670:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001674:	460b      	mov	r3, r1
 8001676:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800167a:	185b      	adds	r3, r3, r1
 800167c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001680:	18d3      	adds	r3, r2, r3
 8001682:	f103 0304 	add.w	r3, r3, #4
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
                fio_dds[dd].opaque = NULL;
 800168c:	f640 5218 	movw	r2, #3352	; 0xd18
 8001690:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001694:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001698:	460b      	mov	r3, r1
 800169a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800169e:	185b      	adds	r3, r3, r1
 80016a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80016a4:	18d3      	adds	r3, r2, r3
 80016a6:	f103 0308 	add.w	r3, r3, #8
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
            }
            xSemaphoreGive(fio_sem);
 80016b0:	f640 5348 	movw	r3, #3400	; 0xd48
 80016b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f04f 0100 	mov.w	r1, #0
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	f002 fcfa 	bl	80040c0 <xQueueGenericSend>

            fs_free_inode(p_inode);
 80016cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fa8f 	bl	8000bf4 <fs_free_inode>

            return dd;
 80016d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80016da:	e001      	b.n	80016e0 <fio_opendir+0x2f0>
        }else{
            return -1;
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        }
    }
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	f107 07e0 	add.w	r7, r7, #224	; 0xe0
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop

080016ec <fio_read>:


ssize_t fio_read(int fd, void * buf, size_t count) {
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
    ssize_t r = 0;
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
//    DBGOUT("fio_read(%i, %p, %i)\r\n", fd, buf, count);
    if (fio_is_open_int(fd)) {
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7ff fb6a 	bl	8000dd8 <fio_is_open_int>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 808d 	beq.w	8001826 <fio_read+0x13a>
        if (fio_fds[fd].inode->file_ops.read) {
 800170c:	f640 2298 	movw	r2, #2712	; 0xa98
 8001710:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001714:	68f9      	ldr	r1, [r7, #12]
 8001716:	460b      	mov	r3, r1
 8001718:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800171c:	185b      	adds	r3, r3, r1
 800171e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001722:	18d3      	adds	r3, r2, r3
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001728:	2b00      	cmp	r3, #0
 800172a:	d07f      	beq.n	800182c <fio_read+0x140>
            xSemaphoreTake(fio_fds[fd].inode->lock, portMAX_DELAY);
 800172c:	f640 2298 	movw	r2, #2712	; 0xa98
 8001730:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001734:	68f9      	ldr	r1, [r7, #12]
 8001736:	460b      	mov	r3, r1
 8001738:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800173c:	185b      	adds	r3, r3, r1
 800173e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001742:	18d3      	adds	r3, r2, r3
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4618      	mov	r0, r3
 800174a:	f04f 0100 	mov.w	r1, #0
 800174e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	f002 fd93 	bl	8004280 <xQueueGenericReceive>
            r = fio_fds[fd].inode->file_ops.read(fio_fds[fd].inode, buf, count, fio_fds[fd].cursor);
 800175a:	f640 2298 	movw	r2, #2712	; 0xa98
 800175e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001762:	68f9      	ldr	r1, [r7, #12]
 8001764:	460b      	mov	r3, r1
 8001766:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800176a:	185b      	adds	r3, r3, r1
 800176c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001770:	18d3      	adds	r3, r2, r3
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001776:	f640 2298 	movw	r2, #2712	; 0xa98
 800177a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800177e:	68f9      	ldr	r1, [r7, #12]
 8001780:	460b      	mov	r3, r1
 8001782:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001786:	185b      	adds	r3, r3, r1
 8001788:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800178c:	18d3      	adds	r3, r2, r3
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	f640 2298 	movw	r2, #2712	; 0xa98
 8001794:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001798:	68f9      	ldr	r1, [r7, #12]
 800179a:	460b      	mov	r3, r1
 800179c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80017a0:	185b      	adds	r3, r3, r1
 80017a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80017a6:	18d3      	adds	r3, r2, r3
 80017a8:	f103 030c 	add.w	r3, r3, #12
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68b9      	ldr	r1, [r7, #8]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	47a0      	blx	r4
 80017b4:	6178      	str	r0, [r7, #20]
            fio_fds[fd].cursor += r;
 80017b6:	f640 2298 	movw	r2, #2712	; 0xa98
 80017ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80017be:	68f9      	ldr	r1, [r7, #12]
 80017c0:	460b      	mov	r3, r1
 80017c2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80017c6:	185b      	adds	r3, r3, r1
 80017c8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80017cc:	18d3      	adds	r3, r2, r3
 80017ce:	f103 030c 	add.w	r3, r3, #12
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	18d0      	adds	r0, r2, r3
 80017d8:	f640 2298 	movw	r2, #2712	; 0xa98
 80017dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80017e0:	68f9      	ldr	r1, [r7, #12]
 80017e2:	460b      	mov	r3, r1
 80017e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80017e8:	185b      	adds	r3, r3, r1
 80017ea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80017ee:	18d3      	adds	r3, r2, r3
 80017f0:	f103 030c 	add.w	r3, r3, #12
 80017f4:	6018      	str	r0, [r3, #0]
            xSemaphoreGive(fio_fds[fd].inode->lock);
 80017f6:	f640 2298 	movw	r2, #2712	; 0xa98
 80017fa:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80017fe:	68f9      	ldr	r1, [r7, #12]
 8001800:	460b      	mov	r3, r1
 8001802:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001806:	185b      	adds	r3, r3, r1
 8001808:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800180c:	18d3      	adds	r3, r2, r3
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	4618      	mov	r0, r3
 8001814:	f04f 0100 	mov.w	r1, #0
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	f002 fc4e 	bl	80040c0 <xQueueGenericSend>
 8001824:	e002      	b.n	800182c <fio_read+0x140>
        }
    } else {
        r = -2;
 8001826:	f06f 0301 	mvn.w	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
    }
    return r;
 800182c:	697b      	ldr	r3, [r7, #20]
}
 800182e:	4618      	mov	r0, r3
 8001830:	f107 071c 	add.w	r7, r7, #28
 8001834:	46bd      	mov	sp, r7
 8001836:	bd90      	pop	{r4, r7, pc}

08001838 <fio_readdir>:


ssize_t fio_readdir(int dd, struct dir_entity* ent) {
 8001838:	b5b0      	push	{r4, r5, r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
    ssize_t r = 0;
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
//    DBGOUT("fio_read(%i, %p, %i)\r\n", fd, buf, count);
    if (fio_is_dir_open_int(dd)) {
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff faed 	bl	8000e28 <fio_is_dir_open_int>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d053      	beq.n	80018fc <fio_readdir+0xc4>
        if (fio_dds[dd].inode->file_ops.readdir) {
 8001854:	f640 5218 	movw	r2, #3352	; 0xd18
 8001858:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	460b      	mov	r3, r1
 8001860:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001864:	185b      	adds	r3, r3, r1
 8001866:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800186a:	18d3      	adds	r3, r2, r3
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	2b00      	cmp	r3, #0
 8001872:	d03f      	beq.n	80018f4 <fio_readdir+0xbc>
            r = fio_dds[dd].inode->file_ops.readdir(fio_dds[dd].inode, ent, fio_dds[dd].cursor++);
 8001874:	f640 5218 	movw	r2, #3352	; 0xd18
 8001878:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001884:	185b      	adds	r3, r3, r1
 8001886:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800188a:	18d3      	adds	r3, r2, r3
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001890:	f640 5218 	movw	r2, #3352	; 0xd18
 8001894:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001898:	6879      	ldr	r1, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80018a0:	185b      	adds	r3, r3, r1
 80018a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80018a6:	18d3      	adds	r3, r2, r3
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80018b2:	189b      	adds	r3, r3, r2
 80018b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80018b8:	f640 5218 	movw	r2, #3352	; 0xd18
 80018bc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80018c0:	189b      	adds	r3, r3, r2
 80018c2:	f103 0504 	add.w	r5, r3, #4
 80018c6:	f640 5218 	movw	r2, #3352	; 0xd18
 80018ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80018d6:	185b      	adds	r3, r3, r1
 80018d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80018dc:	18d3      	adds	r3, r2, r3
 80018de:	f103 0304 	add.w	r3, r3, #4
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	f103 0301 	add.w	r3, r3, #1
 80018ea:	602b      	str	r3, [r5, #0]
 80018ec:	6839      	ldr	r1, [r7, #0]
 80018ee:	47a0      	blx	r4
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	e006      	b.n	8001902 <fio_readdir+0xca>
        } else {
            r = -3;
 80018f4:	f06f 0302 	mvn.w	r3, #2
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	e002      	b.n	8001902 <fio_readdir+0xca>
        }
    } else {
        r = -2;
 80018fc:	f06f 0301 	mvn.w	r3, #1
 8001900:	60fb      	str	r3, [r7, #12]
    }
    return r;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	4618      	mov	r0, r3
 8001906:	f107 0710 	add.w	r7, r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bdb0      	pop	{r4, r5, r7, pc}
 800190e:	bf00      	nop

08001910 <fio_write>:


ssize_t fio_write(int fd, const void * buf, size_t count) {
 8001910:	b590      	push	{r4, r7, lr}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
    ssize_t r = 0;
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
//    DBGOUT("fio_write(%i, %p, %i)\r\n", fd, buf, count);
    if (fio_is_open_int(fd)) {
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f7ff fa58 	bl	8000dd8 <fio_is_open_int>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8091 	beq.w	8001a52 <fio_write+0x142>
        if (fio_fds[fd].inode->file_ops.write) {
 8001930:	f640 2298 	movw	r2, #2712	; 0xa98
 8001934:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001938:	68f9      	ldr	r1, [r7, #12]
 800193a:	460b      	mov	r3, r1
 800193c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001940:	185b      	adds	r3, r3, r1
 8001942:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001946:	18d3      	adds	r3, r2, r3
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	2b00      	cmp	r3, #0
 800194e:	d07c      	beq.n	8001a4a <fio_write+0x13a>
            xSemaphoreTake(fio_fds[fd].inode->lock, portMAX_DELAY);
 8001950:	f640 2298 	movw	r2, #2712	; 0xa98
 8001954:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001958:	68f9      	ldr	r1, [r7, #12]
 800195a:	460b      	mov	r3, r1
 800195c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001960:	185b      	adds	r3, r3, r1
 8001962:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001966:	18d3      	adds	r3, r2, r3
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4618      	mov	r0, r3
 800196e:	f04f 0100 	mov.w	r1, #0
 8001972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	f002 fc81 	bl	8004280 <xQueueGenericReceive>
            r = fio_fds[fd].inode->file_ops.write(fio_fds[fd].inode, buf, count, fio_fds[fd].cursor);
 800197e:	f640 2298 	movw	r2, #2712	; 0xa98
 8001982:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001986:	68f9      	ldr	r1, [r7, #12]
 8001988:	460b      	mov	r3, r1
 800198a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800198e:	185b      	adds	r3, r3, r1
 8001990:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001994:	18d3      	adds	r3, r2, r3
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800199a:	f640 2298 	movw	r2, #2712	; 0xa98
 800199e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80019a2:	68f9      	ldr	r1, [r7, #12]
 80019a4:	460b      	mov	r3, r1
 80019a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80019aa:	185b      	adds	r3, r3, r1
 80019ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80019b0:	18d3      	adds	r3, r2, r3
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	f640 2298 	movw	r2, #2712	; 0xa98
 80019b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80019bc:	68f9      	ldr	r1, [r7, #12]
 80019be:	460b      	mov	r3, r1
 80019c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80019c4:	185b      	adds	r3, r3, r1
 80019c6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80019ca:	18d3      	adds	r3, r2, r3
 80019cc:	f103 030c 	add.w	r3, r3, #12
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	68b9      	ldr	r1, [r7, #8]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	47a0      	blx	r4
 80019d8:	6178      	str	r0, [r7, #20]
            fio_fds[fd].cursor += r;
 80019da:	f640 2298 	movw	r2, #2712	; 0xa98
 80019de:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80019e2:	68f9      	ldr	r1, [r7, #12]
 80019e4:	460b      	mov	r3, r1
 80019e6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80019ea:	185b      	adds	r3, r3, r1
 80019ec:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80019f0:	18d3      	adds	r3, r2, r3
 80019f2:	f103 030c 	add.w	r3, r3, #12
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	18d0      	adds	r0, r2, r3
 80019fc:	f640 2298 	movw	r2, #2712	; 0xa98
 8001a00:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001a04:	68f9      	ldr	r1, [r7, #12]
 8001a06:	460b      	mov	r3, r1
 8001a08:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001a0c:	185b      	adds	r3, r3, r1
 8001a0e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001a12:	18d3      	adds	r3, r2, r3
 8001a14:	f103 030c 	add.w	r3, r3, #12
 8001a18:	6018      	str	r0, [r3, #0]
            xSemaphoreGive(fio_fds[fd].inode->lock);
 8001a1a:	f640 2298 	movw	r2, #2712	; 0xa98
 8001a1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001a22:	68f9      	ldr	r1, [r7, #12]
 8001a24:	460b      	mov	r3, r1
 8001a26:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001a2a:	185b      	adds	r3, r3, r1
 8001a2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001a30:	18d3      	adds	r3, r2, r3
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f04f 0100 	mov.w	r1, #0
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	f002 fb3c 	bl	80040c0 <xQueueGenericSend>
 8001a48:	e006      	b.n	8001a58 <fio_write+0x148>
        } else {
            r = -3;
 8001a4a:	f06f 0302 	mvn.w	r3, #2
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	e002      	b.n	8001a58 <fio_write+0x148>
        }
    } else {
        r = -2;
 8001a52:	f06f 0301 	mvn.w	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
    }
    return r;
 8001a58:	697b      	ldr	r3, [r7, #20]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f107 071c 	add.w	r7, r7, #28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd90      	pop	{r4, r7, pc}

08001a64 <fio_seek>:

off_t fio_seek(int fd, off_t offset, int whence) {
 8001a64:	b590      	push	{r4, r7, lr}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
//    DBGOUT("fio_seek(%i, %i, %i)\r\n", fd, offset, whence);
    if (fio_is_open_int(fd)) {
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f7ff f9b1 	bl	8000dd8 <fio_is_open_int>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 8087 	beq.w	8001b8c <fio_seek+0x128>
        
        uint32_t origin;
        
        switch (whence) {
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d007      	beq.n	8001a94 <fio_seek+0x30>
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d016      	beq.n	8001ab6 <fio_seek+0x52>
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d118      	bne.n	8001abe <fio_seek+0x5a>
        case SEEK_SET:
            origin = 0;
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
            break;
 8001a92:	e017      	b.n	8001ac4 <fio_seek+0x60>
        case SEEK_CUR:
            origin = fio_fds[fd].cursor;
 8001a94:	f640 2298 	movw	r2, #2712	; 0xa98
 8001a98:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001a9c:	68f9      	ldr	r1, [r7, #12]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001aa4:	185b      	adds	r3, r3, r1
 8001aa6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001aaa:	18d3      	adds	r3, r2, r3
 8001aac:	f103 030c 	add.w	r3, r3, #12
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	617b      	str	r3, [r7, #20]
            break;
 8001ab4:	e006      	b.n	8001ac4 <fio_seek+0x60>
        case SEEK_END:
            origin = 0xFFFFFFFF;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aba:	617b      	str	r3, [r7, #20]
            break;
 8001abc:	e002      	b.n	8001ac4 <fio_seek+0x60>
        default:
            return -1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ac2:	e065      	b.n	8001b90 <fio_seek+0x12c>
        }

        offset = origin + offset;
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	18d3      	adds	r3, r2, r3
 8001aca:	60bb      	str	r3, [r7, #8]
        
        if(!fio_fds[fd].inode->file_ops.lseek)
 8001acc:	f640 2298 	movw	r2, #2712	; 0xa98
 8001ad0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001ad4:	68f9      	ldr	r1, [r7, #12]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001adc:	185b      	adds	r3, r3, r1
 8001ade:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001ae2:	18d3      	adds	r3, r2, r3
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <fio_seek+0x8e>
            return -1;
 8001aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001af0:	e04e      	b.n	8001b90 <fio_seek+0x12c>

        offset = fio_fds[fd].inode->file_ops.lseek(fio_fds[fd].inode, offset);
 8001af2:	f640 2298 	movw	r2, #2712	; 0xa98
 8001af6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001afa:	68f9      	ldr	r1, [r7, #12]
 8001afc:	460b      	mov	r3, r1
 8001afe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001b02:	185b      	adds	r3, r3, r1
 8001b04:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001b08:	18d3      	adds	r3, r2, r3
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001b0e:	f640 2298 	movw	r2, #2712	; 0xa98
 8001b12:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001b16:	68f9      	ldr	r1, [r7, #12]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001b1e:	185b      	adds	r3, r3, r1
 8001b20:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001b24:	18d3      	adds	r3, r2, r3
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	68b9      	ldr	r1, [r7, #8]
 8001b2c:	47a0      	blx	r4
 8001b2e:	60b8      	str	r0, [r7, #8]

        xSemaphoreTake(fio_sem, portMAX_DELAY);
 8001b30:	f640 5348 	movw	r3, #3400	; 0xd48
 8001b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f04f 0100 	mov.w	r1, #0
 8001b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	f002 fb9a 	bl	8004280 <xQueueGenericReceive>
        fio_fds[fd].cursor = offset;
 8001b4c:	68b8      	ldr	r0, [r7, #8]
 8001b4e:	f640 2298 	movw	r2, #2712	; 0xa98
 8001b52:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001b56:	68f9      	ldr	r1, [r7, #12]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001b5e:	185b      	adds	r3, r3, r1
 8001b60:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001b64:	18d3      	adds	r3, r2, r3
 8001b66:	f103 030c 	add.w	r3, r3, #12
 8001b6a:	6018      	str	r0, [r3, #0]
        xSemaphoreGive(fio_sem);
 8001b6c:	f640 5348 	movw	r3, #3400	; 0xd48
 8001b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f04f 0100 	mov.w	r1, #0
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	f002 fa9c 	bl	80040c0 <xQueueGenericSend>
        return offset;
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	e001      	b.n	8001b90 <fio_seek+0x12c>
    } else {
        return -2;
 8001b8c:	f06f 0301 	mvn.w	r3, #1
    }
    return -3;
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	f107 071c 	add.w	r7, r7, #28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd90      	pop	{r4, r7, pc}
 8001b9a:	bf00      	nop

08001b9c <fio_seekdir>:


off_t fio_seekdir(int dd, off_t offset) {
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
    if (fio_is_dir_open_int(dd)) {
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff f93e 	bl	8000e28 <fio_is_dir_open_int>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d060      	beq.n	8001c74 <fio_seekdir+0xd8>
        if(!fio_dds[dd].inode->file_ops.lseek)
 8001bb2:	f640 5218 	movw	r2, #3352	; 0xd18
 8001bb6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001bc2:	185b      	adds	r3, r3, r1
 8001bc4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001bc8:	18d3      	adds	r3, r2, r3
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <fio_seekdir+0x3c>
            return -1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bd6:	e04f      	b.n	8001c78 <fio_seekdir+0xdc>

        offset = fio_dds[dd].inode->file_ops.lseek(fio_dds[dd].inode, offset);
 8001bd8:	f640 5218 	movw	r2, #3352	; 0xd18
 8001bdc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	460b      	mov	r3, r1
 8001be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001be8:	185b      	adds	r3, r3, r1
 8001bea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001bee:	18d3      	adds	r3, r2, r3
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001bf4:	f640 5218 	movw	r2, #3352	; 0xd18
 8001bf8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001c04:	185b      	adds	r3, r3, r1
 8001c06:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001c0a:	18d3      	adds	r3, r2, r3
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	6839      	ldr	r1, [r7, #0]
 8001c12:	47a0      	blx	r4
 8001c14:	6038      	str	r0, [r7, #0]

        xSemaphoreTake(fio_sem, portMAX_DELAY);
 8001c16:	f640 5348 	movw	r3, #3400	; 0xd48
 8001c1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f04f 0100 	mov.w	r1, #0
 8001c26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	f002 fb27 	bl	8004280 <xQueueGenericReceive>
        fio_dds[dd].cursor = offset;
 8001c32:	6838      	ldr	r0, [r7, #0]
 8001c34:	f640 5218 	movw	r2, #3352	; 0xd18
 8001c38:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001c44:	185b      	adds	r3, r3, r1
 8001c46:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001c4a:	18d3      	adds	r3, r2, r3
 8001c4c:	f103 0304 	add.w	r3, r3, #4
 8001c50:	6018      	str	r0, [r3, #0]
        xSemaphoreGive(fio_sem);
 8001c52:	f640 5348 	movw	r3, #3400	; 0xd48
 8001c56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f04f 0100 	mov.w	r1, #0
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	f002 fa29 	bl	80040c0 <xQueueGenericSend>

        return 0;
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	e001      	b.n	8001c78 <fio_seekdir+0xdc>
    } else {
        return -2;
 8001c74:	f06f 0301 	mvn.w	r3, #1
    }
    return -3;
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f107 070c 	add.w	r7, r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd90      	pop	{r4, r7, pc}
 8001c82:	bf00      	nop

08001c84 <fio_close>:


int fio_close(int fd) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
    int r = 0;
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
//    DBGOUT("fio_close(%i)\r\n", fd);
    if (fio_is_open_int(fd)) {
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff f8a0 	bl	8000dd8 <fio_is_open_int>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d040      	beq.n	8001d20 <fio_close+0x9c>
//        if (fio_fds[fd].fdclose)
  //          r = fio_fds[fd].fdclose(fio_fds[fd].opaque);
        xSemaphoreTake(fio_sem, portMAX_DELAY);
 8001c9e:	f640 5348 	movw	r3, #3400	; 0xd48
 8001ca2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f04f 0100 	mov.w	r1, #0
 8001cae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	f002 fae3 	bl	8004280 <xQueueGenericReceive>
        fs_free_inode(fio_fds[fd].inode);
 8001cba:	f640 2298 	movw	r2, #2712	; 0xa98
 8001cbe:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001cca:	185b      	adds	r3, r3, r1
 8001ccc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001cd0:	18d3      	adds	r3, r2, r3
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe ff8d 	bl	8000bf4 <fs_free_inode>
        memset(fio_fds + fd, 0, sizeof(struct fddef_t));
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001ce2:	189b      	adds	r3, r3, r2
 8001ce4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	f640 2398 	movw	r3, #2712	; 0xa98
 8001cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cf2:	18d3      	adds	r3, r2, r3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f04f 0100 	mov.w	r1, #0
 8001cfa:	f04f 0214 	mov.w	r2, #20
 8001cfe:	f001 fee1 	bl	8003ac4 <memset>
        xSemaphoreGive(fio_sem);
 8001d02:	f640 5348 	movw	r3, #3400	; 0xd48
 8001d06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f04f 0100 	mov.w	r1, #0
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	f002 f9d1 	bl	80040c0 <xQueueGenericSend>
 8001d1e:	e002      	b.n	8001d26 <fio_close+0xa2>
    } else {
        r = -2;
 8001d20:	f06f 0301 	mvn.w	r3, #1
 8001d24:	60fb      	str	r3, [r7, #12]
    }
    return r;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f107 0710 	add.w	r7, r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop

08001d34 <fio_closedir>:

int fio_closedir(int dd) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
//    DBGOUT("fio_close(%i)\r\n", fd);
    if (fio_is_dir_open_int(dd)) {
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff f873 	bl	8000e28 <fio_is_dir_open_int>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d042      	beq.n	8001dce <fio_closedir+0x9a>
        fs_free_inode(fio_dds[dd].inode);
 8001d48:	f640 5218 	movw	r2, #3352	; 0xd18
 8001d4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	460b      	mov	r3, r1
 8001d54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001d58:	185b      	adds	r3, r3, r1
 8001d5a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001d5e:	18d3      	adds	r3, r2, r3
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe ff46 	bl	8000bf4 <fs_free_inode>
        xSemaphoreTake(fio_sem, portMAX_DELAY);
 8001d68:	f640 5348 	movw	r3, #3400	; 0xd48
 8001d6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f04f 0100 	mov.w	r1, #0
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	f002 fa7e 	bl	8004280 <xQueueGenericReceive>
        memset(fio_dds + dd, 0, sizeof(struct dddef_t));
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001d8c:	189b      	adds	r3, r3, r2
 8001d8e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001d92:	461a      	mov	r2, r3
 8001d94:	f640 5318 	movw	r3, #3352	; 0xd18
 8001d98:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d9c:	18d3      	adds	r3, r2, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f04f 0100 	mov.w	r1, #0
 8001da4:	f04f 020c 	mov.w	r2, #12
 8001da8:	f001 fe8c 	bl	8003ac4 <memset>
        xSemaphoreGive(fio_sem);
 8001dac:	f640 5348 	movw	r3, #3400	; 0xd48
 8001db0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f04f 0100 	mov.w	r1, #0
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	f002 f97c 	bl	80040c0 <xQueueGenericSend>
        return 0;
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	e001      	b.n	8001dd2 <fio_closedir+0x9e>
    } else {
        return -1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f107 0708 	add.w	r7, r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <fio_init>:
    }
    return -1;
}
*/

__attribute__((constructor)) void fio_init() {
 8001ddc:	b598      	push	{r3, r4, r7, lr}
 8001dde:	af00      	add	r7, sp, #0
    memset(fio_fds, 0, sizeof(fio_fds));
 8001de0:	f640 2098 	movw	r0, #2712	; 0xa98
 8001de4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001de8:	f04f 0100 	mov.w	r1, #0
 8001dec:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001df0:	f001 fe68 	bl	8003ac4 <memset>
    fio_fds[0].inode = get_stdin_node();
 8001df4:	f7fe fcb8 	bl	8000768 <get_stdin_node>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	f640 2398 	movw	r3, #2712	; 0xa98
 8001dfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e02:	601a      	str	r2, [r3, #0]
    fio_fds[0].inode->lock = xSemaphoreCreateMutex();
 8001e04:	f640 2398 	movw	r3, #2712	; 0xa98
 8001e08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e0c:	681c      	ldr	r4, [r3, #0]
 8001e0e:	f04f 0001 	mov.w	r0, #1
 8001e12:	f002 f905 	bl	8004020 <xQueueCreateMutex>
 8001e16:	4603      	mov	r3, r0
 8001e18:	6223      	str	r3, [r4, #32]
    fio_fds[1].inode = get_stdout_node();
 8001e1a:	f7fe fcaf 	bl	800077c <get_stdout_node>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	f640 2398 	movw	r3, #2712	; 0xa98
 8001e24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e28:	615a      	str	r2, [r3, #20]
    fio_fds[1].inode->lock = xSemaphoreCreateMutex();
 8001e2a:	f640 2398 	movw	r3, #2712	; 0xa98
 8001e2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e32:	695c      	ldr	r4, [r3, #20]
 8001e34:	f04f 0001 	mov.w	r0, #1
 8001e38:	f002 f8f2 	bl	8004020 <xQueueCreateMutex>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	6223      	str	r3, [r4, #32]
    fio_fds[2].inode = get_stderr_node();
 8001e40:	f7fe fca6 	bl	8000790 <get_stderr_node>
 8001e44:	4602      	mov	r2, r0
 8001e46:	f640 2398 	movw	r3, #2712	; 0xa98
 8001e4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28
    fio_fds[2].inode->lock = xSemaphoreCreateMutex();
 8001e50:	f640 2398 	movw	r3, #2712	; 0xa98
 8001e54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e58:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001e5a:	f04f 0001 	mov.w	r0, #1
 8001e5e:	f002 f8df 	bl	8004020 <xQueueCreateMutex>
 8001e62:	4603      	mov	r3, r0
 8001e64:	6223      	str	r3, [r4, #32]
    fio_sem = xSemaphoreCreateMutex();
 8001e66:	f04f 0001 	mov.w	r0, #1
 8001e6a:	f002 f8d9 	bl	8004020 <xQueueCreateMutex>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	f640 5348 	movw	r3, #3400	; 0xd48
 8001e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e78:	601a      	str	r2, [r3, #0]
}
 8001e7a:	bd98      	pop	{r3, r4, r7, pc}

08001e7c <hash_djb2>:
#include <stdint.h>
#include "hash-djb2.h"
#include "osdebug.h"

uint32_t hash_djb2(const uint8_t * str, ssize_t _max) {
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
    uint32_t hash = 5381;
 8001e86:	f241 5305 	movw	r3, #5381	; 0x1505
 8001e8a:	617b      	str	r3, [r7, #20]
    uint32_t max = (uint32_t) _max;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	613b      	str	r3, [r7, #16]
    int c;
    
    while (((c = *str++)) && max--) {
 8001e90:	e007      	b.n	8001ea2 <hash_djb2+0x26>
        hash = ((hash << 5) + hash) ^ c;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	ea4f 1243 	mov.w	r2, r3, lsl #5
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	18d2      	adds	r2, r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4053      	eors	r3, r2
 8001ea0:	617b      	str	r3, [r7, #20]
uint32_t hash_djb2(const uint8_t * str, ssize_t _max) {
    uint32_t hash = 5381;
    uint32_t max = (uint32_t) _max;
    int c;
    
    while (((c = *str++)) && max--) {
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf0c      	ite	eq
 8001eae:	2300      	moveq	r3, #0
 8001eb0:	2301      	movne	r3, #1
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	f102 0201 	add.w	r2, r2, #1
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00b      	beq.n	8001ed8 <hash_djb2+0x5c>
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	bf0c      	ite	eq
 8001ec6:	2300      	moveq	r3, #0
 8001ec8:	2301      	movne	r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8001ed2:	613a      	str	r2, [r7, #16]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1dc      	bne.n	8001e92 <hash_djb2+0x16>
        hash = ((hash << 5) + hash) ^ c;
    }
    
    return hash;
 8001ed8:	697b      	ldr	r3, [r7, #20]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	f107 071c 	add.w	r7, r7, #28
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop

08001ee8 <host_call>:
    /* For Thumb-2 code use the BKPT instruction instead of SWI.
* Refer to:
* http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0471c/Bgbjhiea.html
* http://en.wikipedia.org/wiki/ARM_Cortex-M#Cortex-M4 */
    int result;
    __asm__( \
 8001ee8:	beab      	bkpt	0x00ab
 8001eea:	bf00      	nop
 8001eec:	4770      	bx	lr
      "bkpt 0xAB\n"\
      "nop\n" \
      "bx lr\n"\
        :"=r" (result) ::\
    );
    return result;
 8001eee:	4623      	mov	r3, r4
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bf00      	nop

08001ef4 <host_system>:

int host_system(va_list v1){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
    char *tmpChrPtr;

    tmpChrPtr = va_arg(v1, char *);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f103 0204 	add.w	r2, r3, #4
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	617b      	str	r3, [r7, #20]
    return host_call(SYS_SYSTEM, (param []){{.pdChrPtr=tmpChrPtr}, {.pdInt=strlen(tmpChrPtr)}});
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	6978      	ldr	r0, [r7, #20]
 8001f0e:	f7fe fa09 	bl	8000324 <strlen>
 8001f12:	4603      	mov	r3, r0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	f107 030c 	add.w	r3, r7, #12
 8001f1a:	f04f 0012 	mov.w	r0, #18
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f7ff ffe2 	bl	8001ee8 <host_call>
 8001f24:	4603      	mov	r3, r0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	f107 0718 	add.w	r7, r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <host_open>:

int host_open(va_list v1) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
    char *tmpChrPtr;

    tmpChrPtr = va_arg(v1, char *);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f103 0204 	add.w	r2, r3, #4
 8001f3e:	607a      	str	r2, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	617b      	str	r3, [r7, #20]
    return host_call(SYS_OPEN, (param []){{.pdChrPtr=tmpChrPtr}, {.pdInt=va_arg(v1, int)}, {.pdInt=strlen(tmpChrPtr)}});
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f103 0204 	add.w	r2, r3, #4
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	6978      	ldr	r0, [r7, #20]
 8001f56:	f7fe f9e5 	bl	8000324 <strlen>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	f107 0308 	add.w	r3, r7, #8
 8001f62:	f04f 0001 	mov.w	r0, #1
 8001f66:	4619      	mov	r1, r3
 8001f68:	f7ff ffbe 	bl	8001ee8 <host_call>
 8001f6c:	4603      	mov	r3, r0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f107 0718 	add.w	r7, r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <host_close>:

int host_close(va_list v1) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
    return host_call(SYS_CLOSE, (param []){{.pdInt=va_arg(v1, int)}});
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f103 0204 	add.w	r2, r3, #4
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	f04f 0002 	mov.w	r0, #2
 8001f94:	4619      	mov	r1, r3
 8001f96:	f7ff ffa7 	bl	8001ee8 <host_call>
 8001f9a:	4603      	mov	r3, r0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f107 0710 	add.w	r7, r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop

08001fa8 <host_write>:

int host_write(va_list v1) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
    return host_call(SYS_WRITE, (param []){{.pdInt=va_arg(v1, int)}, {.pdPtr=va_arg(v1, void *)}, {.pdInt=va_arg(v1, int)}});
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f103 0204 	add.w	r2, r3, #4
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f103 0204 	add.w	r2, r3, #4
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f103 0204 	add.w	r2, r3, #4
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	f04f 0005 	mov.w	r0, #5
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f7ff ff83 	bl	8001ee8 <host_call>
 8001fe2:	4603      	mov	r3, r0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f107 0718 	add.w	r7, r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop

08001ff0 <host_action>:

int host_action(enum HOST_SYSCALL action, ...)
{
 8001ff0:	b40f      	push	{r0, r1, r2, r3}
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
    int result;

    va_list v1;
    va_start(v1, action);
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	603b      	str	r3, [r7, #0]

    result = hcl[action].fptr(v1);
 8001ffe:	7c3b      	ldrb	r3, [r7, #16]
 8002000:	f646 02d8 	movw	r2, #26840	; 0x68d8
 8002004:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002008:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800200c:	18d3      	adds	r3, r2, r3
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	6838      	ldr	r0, [r7, #0]
 8002012:	4798      	blx	r3
 8002014:	6078      	str	r0, [r7, #4]

    va_end(v1);

    return result;
 8002016:	687b      	ldr	r3, [r7, #4]
}
 8002018:	4618      	mov	r0, r3
 800201a:	f107 0708 	add.w	r7, r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002024:	b004      	add	sp, #16
 8002026:	4770      	bx	lr

08002028 <USART1_IRQHandler>:
volatile xQueueHandle serial_rx_queue = NULL;

/* IRQ handler to handle USART2 interruptss (both transmit and receive
 * interrupts). */
void USART1_IRQHandler()
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
	static signed portBASE_TYPE xHigherPriorityTaskWoken;

	/* If this interrupt is for a transmit... */
	if (USART_GetITStatus(USART1, USART_IT_TXE) != RESET) {
 800202e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002032:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002036:	f240 7127 	movw	r1, #1831	; 0x727
 800203a:	f003 fde7 	bl	8005c0c <USART_GetITStatus>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d01a      	beq.n	800207a <USART1_IRQHandler+0x52>
		/* "give" the serial_tx_wait_sem semaphore to notfiy processes
		 * that the buffer has a spot free for the next byte.
		 */
		xSemaphoreGiveFromISR(serial_tx_wait_sem, &xHigherPriorityTaskWoken);
 8002044:	f640 534c 	movw	r3, #3404	; 0xd4c
 8002048:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f04f 0100 	mov.w	r1, #0
 8002054:	f640 5254 	movw	r2, #3412	; 0xd54
 8002058:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	f002 f8c4 	bl	80041ec <xQueueGenericSendFromISR>

		/* Diables the transmit interrupt. */
		USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 8002064:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002068:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800206c:	f240 7127 	movw	r1, #1831	; 0x727
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	f003 fd78 	bl	8005b68 <USART_ITConfig>
 8002078:	e029      	b.n	80020ce <USART1_IRQHandler+0xa6>
		/* If this interrupt is for a receive... */
	}else if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET){
 800207a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800207e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002082:	f240 5125 	movw	r1, #1317	; 0x525
 8002086:	f003 fdc1 	bl	8005c0c <USART_GetITStatus>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01d      	beq.n	80020cc <USART1_IRQHandler+0xa4>
		char msg = USART_ReceiveData(USART1);
 8002090:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002094:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002098:	f003 fd54 	bl	8005b44 <USART_ReceiveData>
 800209c:	4603      	mov	r3, r0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	71fb      	strb	r3, [r7, #7]

		/* If there is an error when queueing the received byte, freeze! */
		if(!xQueueSendToBackFromISR(serial_rx_queue, &msg, &xHigherPriorityTaskWoken))
 80020a2:	f640 5350 	movw	r3, #3408	; 0xd50
 80020a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	f107 0307 	add.w	r3, r7, #7
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	f640 5254 	movw	r2, #3412	; 0xd54
 80020b8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	f002 f894 	bl	80041ec <xQueueGenericSendFromISR>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <USART1_IRQHandler+0xa6>
			while(1);
 80020ca:	e7fe      	b.n	80020ca <USART1_IRQHandler+0xa2>
	}
	else {
		/* Only transmit and receive interrupts should be enabled.
		 * If this is another type of interrupt, freeze.
		 */
		while(1);
 80020cc:	e7fe      	b.n	80020cc <USART1_IRQHandler+0xa4>
	}

	if (xHigherPriorityTaskWoken) {
 80020ce:	f640 5354 	movw	r3, #3412	; 0xd54
 80020d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <USART1_IRQHandler+0xb8>
		taskYIELD();
 80020dc:	f003 fefa 	bl	8005ed4 <vPortYield>
	}
}
 80020e0:	f107 0708 	add.w	r7, r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <send_byte>:

void send_byte(char ch)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	71fb      	strb	r3, [r7, #7]
	/* Wait until the RS232 port can receive another byte (this semaphore
	 * is "given" by the RS232 port interrupt when the buffer has room for
	 * another byte.
	 */
	while (!xSemaphoreTake(serial_tx_wait_sem, portMAX_DELAY));
 80020f2:	bf00      	nop
 80020f4:	f640 534c 	movw	r3, #3404	; 0xd4c
 80020f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f04f 0100 	mov.w	r1, #0
 8002104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	f002 f8b8 	bl	8004280 <xQueueGenericReceive>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0ee      	beq.n	80020f4 <send_byte+0xc>

	/* Send the byte and enable the transmit interrupt (it is disabled by
	 * the interrupt).
	 */
	USART_SendData(USART1, ch);
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	b29b      	uxth	r3, r3
 800211a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800211e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002122:	4619      	mov	r1, r3
 8002124:	f003 fcfa 	bl	8005b1c <USART_SendData>
	USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
 8002128:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800212c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002130:	f240 7127 	movw	r1, #1831	; 0x727
 8002134:	f04f 0201 	mov.w	r2, #1
 8002138:	f003 fd16 	bl	8005b68 <USART_ITConfig>
}
 800213c:	f107 0708 	add.w	r7, r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <recv_byte>:

char recv_byte()
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 800214a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800214e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8002152:	f240 5125 	movw	r1, #1317	; 0x525
 8002156:	f04f 0201 	mov.w	r2, #1
 800215a:	f003 fd05 	bl	8005b68 <USART_ITConfig>
	char msg;
	while(!xQueueReceive(serial_rx_queue, &msg, portMAX_DELAY));
 800215e:	bf00      	nop
 8002160:	f640 5350 	movw	r3, #3408	; 0xd50
 8002164:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	f107 0307 	add.w	r3, r7, #7
 800216e:	4610      	mov	r0, r2
 8002170:	4619      	mov	r1, r3
 8002172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	f002 f881 	bl	8004280 <xQueueGenericReceive>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0ed      	beq.n	8002160 <recv_byte+0x1c>
	return msg;
 8002184:	79fb      	ldrb	r3, [r7, #7]
}
 8002186:	4618      	mov	r0, r3
 8002188:	f107 0708 	add.w	r7, r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <command_prompt>:
void command_prompt(void *pvParameters)
{
 8002190:	b5b0      	push	{r4, r5, r7, lr}
 8002192:	b0c0      	sub	sp, #256	; 0x100
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	char buf[128];
	char *argv[20];
    char hint[] = USER_NAME "@" USER_NAME "-STM32:~$ ";
 8002198:	f246 4374 	movw	r3, #25716	; 0x6474
 800219c:	f6c0 0300 	movt	r3, #2048	; 0x800
 80021a0:	f107 0408 	add.w	r4, r7, #8
 80021a4:	461d      	mov	r5, r3
 80021a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80021ae:	c407      	stmia	r4!, {r0, r1, r2}
 80021b0:	8023      	strh	r3, [r4, #0]

	fio_printf(1, "\rWelcome to FreeRTOS Shell\r\n");
 80021b2:	f04f 0001 	mov.w	r0, #1
 80021b6:	f246 4134 	movw	r1, #25652	; 0x6434
 80021ba:	f6c0 0100 	movt	r1, #2048	; 0x800
 80021be:	f7fe f81f 	bl	8000200 <fio_printf>
	while(1){
                fio_printf(1, "%s", hint);
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	f04f 0001 	mov.w	r0, #1
 80021ca:	f246 4154 	movw	r1, #25684	; 0x6454
 80021ce:	f6c0 0100 	movt	r1, #2048	; 0x800
 80021d2:	461a      	mov	r2, r3
 80021d4:	f7fe f814 	bl	8000200 <fio_printf>
		fio_read(0, buf, 127);
 80021d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80021dc:	f04f 0000 	mov.w	r0, #0
 80021e0:	4619      	mov	r1, r3
 80021e2:	f04f 027f 	mov.w	r2, #127	; 0x7f
 80021e6:	f7ff fa81 	bl	80016ec <fio_read>
	
		int n=parse_command(buf, argv);
 80021ea:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80021ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	f000 ff99 	bl	800312c <parse_command>
 80021fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

		/* will return pointer to the command function */
		cmdfunc *fptr=do_command(argv[0]);
 80021fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002200:	4618      	mov	r0, r3
 8002202:	f001 fb79 	bl	80038f8 <do_command>
 8002206:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
		if(fptr!=NULL)
 800220a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d008      	beq.n	8002224 <command_prompt+0x94>
			fptr(n, argv);
 8002212:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800221a:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800221e:	4611      	mov	r1, r2
 8002220:	4798      	blx	r3
		else
			fio_printf(2, "\r\n\"%s\" command not found.\r\n", argv[0]);
	}
 8002222:	e7ce      	b.n	80021c2 <command_prompt+0x32>
		/* will return pointer to the command function */
		cmdfunc *fptr=do_command(argv[0]);
		if(fptr!=NULL)
			fptr(n, argv);
		else
			fio_printf(2, "\r\n\"%s\" command not found.\r\n", argv[0]);
 8002224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002226:	f04f 0002 	mov.w	r0, #2
 800222a:	f246 4158 	movw	r1, #25688	; 0x6458
 800222e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002232:	461a      	mov	r2, r3
 8002234:	f7fd ffe4 	bl	8000200 <fio_printf>
	}
 8002238:	e7c3      	b.n	80021c2 <command_prompt+0x32>
 800223a:	bf00      	nop

0800223c <main>:
    host_action(SYS_CLOSE, handle);
}
*/

int main()
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af04      	add	r7, sp, #16
	init_rs232();
 8002242:	f001 fbff 	bl	8003a44 <init_rs232>
	enable_rs232_interrupts();
 8002246:	f001 fc07 	bl	8003a58 <enable_rs232_interrupts>
	enable_rs232();
 800224a:	f001 fc2f 	bl	8003aac <enable_rs232>
	
	fs_init();
 800224e:	f7fe faa9 	bl	80007a4 <fs_init>
	fio_init();
 8002252:	f7ff fdc3 	bl	8001ddc <fio_init>
    
    //register_fs(&ramfs_r);
    register_devfs();
 8002256:	f7fe fa77 	bl	8000748 <register_devfs>
    register_ramfs();
 800225a:	f000 ff59 	bl	8003110 <register_ramfs>
    fs_mount(NULL, RAMFS_TYPE, NULL);
 800225e:	f04f 0000 	mov.w	r0, #0
 8002262:	f247 21ae 	movw	r1, #29358	; 0x72ae
 8002266:	f6c0 319a 	movt	r1, #2970	; 0xb9a
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f7fe facb 	bl	8000808 <fs_mount>
//	register_romfs("romfs", &_sromfs);
//	register_ramfs("ramfs");
	
	/* Create the queue used by the serial task.  Messages for write to
	 * the RS232. */
	vSemaphoreCreateBinary(serial_tx_wait_sem);
 8002272:	f04f 0001 	mov.w	r0, #1
 8002276:	f04f 0100 	mov.w	r1, #0
 800227a:	f04f 0203 	mov.w	r2, #3
 800227e:	f001 fe8d 	bl	8003f9c <xQueueGenericCreate>
 8002282:	4602      	mov	r2, r0
 8002284:	f640 534c 	movw	r3, #3404	; 0xd4c
 8002288:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	f640 534c 	movw	r3, #3404	; 0xd4c
 8002292:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00d      	beq.n	80022b8 <main+0x7c>
 800229c:	f640 534c 	movw	r3, #3404	; 0xd4c
 80022a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f04f 0100 	mov.w	r1, #0
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	f001 ff04 	bl	80040c0 <xQueueGenericSend>
	/* Add for serial input 
	 * Reference: www.freertos.org/a00116.html */
	serial_rx_queue = xQueueCreate(1, sizeof(char));
 80022b8:	f04f 0001 	mov.w	r0, #1
 80022bc:	f04f 0101 	mov.w	r1, #1
 80022c0:	f04f 0200 	mov.w	r2, #0
 80022c4:	f001 fe6a 	bl	8003f9c <xQueueGenericCreate>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f640 5350 	movw	r3, #3408	; 0xd50
 80022ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022d2:	601a      	str	r2, [r3, #0]

	/* Create a task to output text read from romfs. */
	xTaskCreate(command_prompt,
 80022d4:	f04f 0302 	mov.w	r3, #2
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	9302      	str	r3, [sp, #8]
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	9303      	str	r3, [sp, #12]
 80022ec:	f242 1091 	movw	r0, #8593	; 0x2191
 80022f0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80022f4:	f246 4194 	movw	r1, #25748	; 0x6494
 80022f8:	f6c0 0100 	movt	r1, #2048	; 0x800
 80022fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	f002 f99e 	bl	8004644 <xTaskGenericCreate>
	            (signed portCHAR *) "Logger",
	            1024 /* stack size */, NULL, tskIDLE_PRIORITY + 1, NULL);
#endif

	/* Start running the tasks. */
	vTaskStartScheduler();
 8002308:	f002 fa68 	bl	80047dc <vTaskStartScheduler>

	return 0;
 800230c:	f04f 0300 	mov.w	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop

08002318 <vApplicationTickHook>:

void vApplicationTickHook()
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
}
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop

08002324 <circbuf_size>:
static struct slot slots[CIRCBUFSIZE];
static unsigned int lfsr = 0xACE1;


static unsigned int circbuf_size(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
    return (write_pointer + CIRCBUFSIZE - read_pointer) % CIRCBUFSIZE;
 8002328:	f640 5358 	movw	r3, #3416	; 0xd58
 800232c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	f640 535c 	movw	r3, #3420	; 0xd5c
 8002336:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002342:	f103 0308 	add.w	r3, r3, #8
 8002346:	f241 7259 	movw	r2, #5977	; 0x1759
 800234a:	f2cd 12b7 	movt	r2, #53687	; 0xd1b7
 800234e:	fba2 1203 	umull	r1, r2, r2, r3
 8002352:	ea4f 3212 	mov.w	r2, r2, lsr #12
 8002356:	f241 3188 	movw	r1, #5000	; 0x1388
 800235a:	fb01 f202 	mul.w	r2, r1, r2
 800235e:	1a9a      	subs	r2, r3, r2
 8002360:	4613      	mov	r3, r2
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop

0800236c <write_cb>:

static void write_cb(struct slot foo)
{
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	f107 0304 	add.w	r3, r7, #4
 8002376:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (circbuf_size() == CIRCBUFSIZE - 1) {
 800237a:	f7ff ffd3 	bl	8002324 <circbuf_size>
 800237e:	4602      	mov	r2, r0
 8002380:	f241 3387 	movw	r3, #4999	; 0x1387
 8002384:	429a      	cmp	r2, r3
 8002386:	d107      	bne.n	8002398 <write_cb+0x2c>
        fio_printf(2, "\r\ncircular buffer overflow\r\n");
 8002388:	f04f 0002 	mov.w	r0, #2
 800238c:	f246 4198 	movw	r1, #25752	; 0x6498
 8002390:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002394:	f7fd ff34 	bl	8000200 <fio_printf>
        //exit(1);
    }
    slots[write_pointer++] = foo;
 8002398:	f640 5358 	movw	r3, #3416	; 0xd58
 800239c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023a0:	681c      	ldr	r4, [r3, #0]
 80023a2:	f640 5260 	movw	r2, #3424	; 0xd60
 80023a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80023aa:	4623      	mov	r3, r4
 80023ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80023b0:	191b      	adds	r3, r3, r4
 80023b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80023b6:	18d3      	adds	r3, r2, r3
 80023b8:	f107 0204 	add.w	r2, r7, #4
 80023bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80023be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80023c2:	f104 0201 	add.w	r2, r4, #1
 80023c6:	f640 5358 	movw	r3, #3416	; 0xd58
 80023ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023ce:	601a      	str	r2, [r3, #0]
    write_pointer %= CIRCBUFSIZE;
 80023d0:	f640 5358 	movw	r3, #3416	; 0xd58
 80023d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023d8:	6819      	ldr	r1, [r3, #0]
 80023da:	f241 7359 	movw	r3, #5977	; 0x1759
 80023de:	f2cd 13b7 	movt	r3, #53687	; 0xd1b7
 80023e2:	fba3 2301 	umull	r2, r3, r3, r1
 80023e6:	ea4f 3213 	mov.w	r2, r3, lsr #12
 80023ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80023ee:	fb03 f302 	mul.w	r3, r3, r2
 80023f2:	1aca      	subs	r2, r1, r3
 80023f4:	f640 5358 	movw	r3, #3416	; 0xd58
 80023f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023fc:	601a      	str	r2, [r3, #0]
}
 80023fe:	f107 0714 	add.w	r7, r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	bd90      	pop	{r4, r7, pc}
 8002406:	bf00      	nop

08002408 <read_cb>:

static struct slot read_cb(void)
{
 8002408:	b490      	push	{r4, r7}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
    struct slot foo;
    if (write_pointer == read_pointer) {
 8002410:	f640 5358 	movw	r3, #3416	; 0xd58
 8002414:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	f640 535c 	movw	r3, #3420	; 0xd5c
 800241e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d10c      	bne.n	8002442 <read_cb+0x3a>
        // circular buffer is empty
        return (struct slot){ .pointer=NULL, .size=0, .lfsr=0 };
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	605a      	str	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	e038      	b.n	80024b4 <read_cb+0xac>
    }
    foo = slots[read_pointer++];
 8002442:	f640 535c 	movw	r3, #3420	; 0xd5c
 8002446:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800244a:	681c      	ldr	r4, [r3, #0]
 800244c:	f640 5260 	movw	r2, #3424	; 0xd60
 8002450:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002454:	4623      	mov	r3, r4
 8002456:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800245a:	191b      	adds	r3, r3, r4
 800245c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002460:	18d2      	adds	r2, r2, r3
 8002462:	f107 030c 	add.w	r3, r7, #12
 8002466:	ca07      	ldmia	r2, {r0, r1, r2}
 8002468:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800246c:	f104 0201 	add.w	r2, r4, #1
 8002470:	f640 535c 	movw	r3, #3420	; 0xd5c
 8002474:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002478:	601a      	str	r2, [r3, #0]
    read_pointer %= CIRCBUFSIZE;
 800247a:	f640 535c 	movw	r3, #3420	; 0xd5c
 800247e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002482:	6819      	ldr	r1, [r3, #0]
 8002484:	f241 7359 	movw	r3, #5977	; 0x1759
 8002488:	f2cd 13b7 	movt	r3, #53687	; 0xd1b7
 800248c:	fba3 2301 	umull	r2, r3, r3, r1
 8002490:	ea4f 3213 	mov.w	r2, r3, lsr #12
 8002494:	f241 3388 	movw	r3, #5000	; 0x1388
 8002498:	fb03 f302 	mul.w	r3, r3, r2
 800249c:	1aca      	subs	r2, r1, r3
 800249e:	f640 535c 	movw	r3, #3420	; 0xd5c
 80024a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024a6:	601a      	str	r2, [r3, #0]
    return foo;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f107 020c 	add.w	r2, r7, #12
 80024ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80024b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f107 0718 	add.w	r7, r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc90      	pop	{r4, r7}
 80024be:	4770      	bx	lr

080024c0 <prng>:
	eors r2, r3
	...
    */


    __asm__ (
 80024c0:	f240 1314 	movw	r3, #276	; 0x114
 80024c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	ea83 0303 	eor.w	r3, r3, r3
 80024d0:	ea83 0300 	eor.w	r3, r3, r0
 80024d4:	ea4f 0290 	mov.w	r2, r0, lsr #2
 80024d8:	ea83 0302 	eor.w	r3, r3, r2
 80024dc:	ea4f 02d0 	mov.w	r2, r0, lsr #3
 80024e0:	ea83 0302 	eor.w	r3, r3, r2
 80024e4:	ea4f 1250 	mov.w	r2, r0, lsr #5
 80024e8:	ea83 0302 	eor.w	r3, r3, r2
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	ea4f 33c3 	mov.w	r3, r3, lsl #15
 80024f4:	ea4f 0250 	mov.w	r2, r0, lsr #1
 80024f8:	ea42 0203 	orr.w	r2, r2, r3
 80024fc:	4611      	mov	r1, r2
 80024fe:	ea4f 4002 	mov.w	r0, r2, lsl #16
 8002502:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8002506:	f240 1314 	movw	r3, #276	; 0x114
 800250a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800250e:	6019      	str	r1, [r3, #0]
	"mov r0, r0, lsr #16\t\n"
    : "=r" (lfsr)
    : "r" (lfsr)
    : "r2", "r0");

    __asm__("bx lr\t\n");
 8002510:	4770      	bx	lr

    return 0;
 8002512:	f04f 0300 	mov.w	r3, #0
}
 8002516:	4618      	mov	r0, r3

08002518 <mmtest_command>:


void mmtest_command(int n, char *argv[]){
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b08d      	sub	sp, #52	; 0x34
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
    int i, size;
    char *p;

    fio_printf(2, "\r\n");
 8002522:	f04f 0002 	mov.w	r0, #2
 8002526:	f246 41b8 	movw	r1, #25784	; 0x64b8
 800252a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800252e:	f7fd fe67 	bl	8000200 <fio_printf>
 8002532:	e000      	b.n	8002536 <mmtest_command+0x1e>
            write_cb((struct slot){.pointer=p, .size=size, .lfsr=lfsr});
            for (i = 0; i < size; i++) {
                p[i] = (unsigned char) prng();
            }
        }
    }
 8002534:	bf00      	nop
    int i, size;
    char *p;

    fio_printf(2, "\r\n");
    while (1) {
        size = prng() & 0x7FF;
 8002536:	f7ff ffc3 	bl	80024c0 <prng>
 800253a:	4603      	mov	r3, r0
 800253c:	ea4f 5343 	mov.w	r3, r3, lsl #21
 8002540:	ea4f 5353 	mov.w	r3, r3, lsr #21
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
        fio_printf(1, "try to allocate %d bytes\r\n", size);
 8002546:	f04f 0001 	mov.w	r0, #1
 800254a:	f246 41bc 	movw	r1, #25788	; 0x64bc
 800254e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002554:	f7fd fe54 	bl	8000200 <fio_printf>
        p = (char *) pvPortMalloc(size);
 8002558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255a:	4618      	mov	r0, r3
 800255c:	f003 fbb8 	bl	8005cd0 <pvPortMalloc>
 8002560:	6278      	str	r0, [r7, #36]	; 0x24
        fio_printf(1, "malloc returned 0x%x\r\n", p);
 8002562:	f04f 0001 	mov.w	r0, #1
 8002566:	f246 41d8 	movw	r1, #25816	; 0x64d8
 800256a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800256e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002570:	f7fd fe46 	bl	8000200 <fio_printf>
        if (p == NULL) {
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	2b00      	cmp	r3, #0
 8002578:	d152      	bne.n	8002620 <mmtest_command+0x108>
            // can't do new allocations until we free some older ones
            while (circbuf_size() > 0) {
 800257a:	e04b      	b.n	8002614 <mmtest_command+0xfc>
                // confirm that data didn't get trampled before freeing
                struct slot foo = read_cb();
 800257c:	f107 0308 	add.w	r3, r7, #8
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff41 	bl	8002408 <read_cb>
                p = foo.pointer;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
                lfsr = foo.lfsr;  // reset the PRNG to its earlier state
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	f240 1314 	movw	r3, #276	; 0x114
 8002590:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002594:	601a      	str	r2, [r3, #0]
                size = foo.size;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
                fio_printf(1, "free a block, size %d\r\n", size);
 800259a:	f04f 0001 	mov.w	r0, #1
 800259e:	f246 41f0 	movw	r1, #25840	; 0x64f0
 80025a2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80025a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025a8:	f7fd fe2a 	bl	8000200 <fio_printf>
                for (i = 0; i < size; i++) {
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025b2:	e021      	b.n	80025f8 <mmtest_command+0xe0>
                    unsigned char u = p[i];
 80025b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b8:	18d3      	adds	r3, r2, r3
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                    unsigned char v = (unsigned char) prng();
 80025c0:	f7ff ff7e 	bl	80024c0 <prng>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                    if (u != v) {
 80025ca:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80025ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d00c      	beq.n	80025f0 <mmtest_command+0xd8>
                        fio_printf(1, "OUCH: u=%x, v=%x\r\n", u, v);
 80025d6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80025da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80025de:	f04f 0001 	mov.w	r0, #1
 80025e2:	f246 5108 	movw	r1, #25864	; 0x6508
 80025e6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80025ea:	f7fd fe09 	bl	8000200 <fio_printf>
 80025ee:	e046      	b.n	800267e <mmtest_command+0x166>
                struct slot foo = read_cb();
                p = foo.pointer;
                lfsr = foo.lfsr;  // reset the PRNG to its earlier state
                size = foo.size;
                fio_printf(1, "free a block, size %d\r\n", size);
                for (i = 0; i < size; i++) {
 80025f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f2:	f103 0301 	add.w	r3, r3, #1
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	429a      	cmp	r2, r3
 80025fe:	dbd9      	blt.n	80025b4 <mmtest_command+0x9c>
                    if (u != v) {
                        fio_printf(1, "OUCH: u=%x, v=%x\r\n", u, v);
                        return ;
                    }
                }
                vPortFree(p);
 8002600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002602:	f003 fbc5 	bl	8005d90 <vPortFree>
                if ((prng() & 1) == 0) break;
 8002606:	f7ff ff5b 	bl	80024c0 <prng>
 800260a:	4603      	mov	r3, r0
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d08f      	beq.n	8002534 <mmtest_command+0x1c>
        fio_printf(1, "try to allocate %d bytes\r\n", size);
        p = (char *) pvPortMalloc(size);
        fio_printf(1, "malloc returned 0x%x\r\n", p);
        if (p == NULL) {
            // can't do new allocations until we free some older ones
            while (circbuf_size() > 0) {
 8002614:	f7ff fe86 	bl	8002324 <circbuf_size>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1ae      	bne.n	800257c <mmtest_command+0x64>
 800261e:	e02d      	b.n	800267c <mmtest_command+0x164>
                }
                vPortFree(p);
                if ((prng() & 1) == 0) break;
            }
        } else {
            fio_printf(1, "allocate a block, size %d\r\n", size);
 8002620:	f04f 0001 	mov.w	r0, #1
 8002624:	f246 511c 	movw	r1, #25884	; 0x651c
 8002628:	f6c0 0100 	movt	r1, #2048	; 0x800
 800262c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800262e:	f7fd fde7 	bl	8000200 <fio_printf>
            write_cb((struct slot){.pointer=p, .size=size, .lfsr=lfsr});
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002638:	61bb      	str	r3, [r7, #24]
 800263a:	f240 1314 	movw	r3, #276	; 0x114
 800263e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	f107 0314 	add.w	r3, r7, #20
 800264a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800264e:	f7ff fe8d 	bl	800236c <write_cb>
            for (i = 0; i < size; i++) {
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002658:	e00b      	b.n	8002672 <mmtest_command+0x15a>
                p[i] = (unsigned char) prng();
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265e:	18d4      	adds	r4, r2, r3
 8002660:	f7ff ff2e 	bl	80024c0 <prng>
 8002664:	4603      	mov	r3, r0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	7023      	strb	r3, [r4, #0]
                if ((prng() & 1) == 0) break;
            }
        } else {
            fio_printf(1, "allocate a block, size %d\r\n", size);
            write_cb((struct slot){.pointer=p, .size=size, .lfsr=lfsr});
            for (i = 0; i < size; i++) {
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	f103 0301 	add.w	r3, r3, #1
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	429a      	cmp	r2, r3
 8002678:	dbef      	blt.n	800265a <mmtest_command+0x142>
                p[i] = (unsigned char) prng();
            }
        }
    }
 800267a:	e75b      	b.n	8002534 <mmtest_command+0x1c>
 800267c:	e75a      	b.n	8002534 <mmtest_command+0x1c>

}
 800267e:	f107 0734 	add.w	r7, r7, #52	; 0x34
 8002682:	46bd      	mov	sp, r7
 8002684:	bd90      	pop	{r4, r7, pc}
 8002686:	bf00      	nop

08002688 <osDbgPrintf>:
void osDbgPrintf(const char * fmt, ...) { }
 8002688:	b40f      	push	{r0, r1, r2, r3}
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	b004      	add	sp, #16
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop

08002698 <init_superblock>:
//static struct ramfs_fds_t ramfs_fds[MAX_FDS];
//static struct ramfs_fds_t ramfs_dds[MAX_FDS];

ramfs_superblock_t* ramfs_sb_list = NULL;

static ramfs_superblock_t* init_superblock(void){
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
    ramfs_superblock_t* ret = (ramfs_superblock_t*)calloc(sizeof(ramfs_superblock_t), 1);
 800269e:	f04f 0018 	mov.w	r0, #24
 80026a2:	f04f 0101 	mov.w	r1, #1
 80026a6:	f7fd fef5 	bl	8000494 <calloc>
 80026aa:	4603      	mov	r3, r0
 80026ac:	607b      	str	r3, [r7, #4]
    ret->device = device_count++;
 80026ae:	f240 1318 	movw	r3, #280	; 0x118
 80026b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	f103 0201 	add.w	r2, r3, #1
 80026c0:	f240 1318 	movw	r3, #280	; 0x118
 80026c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026c8:	601a      	str	r2, [r3, #0]
    ret->inode_count = 0; 
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	605a      	str	r2, [r3, #4]
    ret->block_count = 0;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
    ret->inode_list = NULL;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	60da      	str	r2, [r3, #12]
    ret->next = ramfs_sb_list;
 80026e2:	f24f 73c0 	movw	r3, #63424	; 0xf7c0
 80026e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	615a      	str	r2, [r3, #20]
    ramfs_sb_list = ret;
 80026f0:	f24f 73c0 	movw	r3, #63424	; 0xf7c0
 80026f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	601a      	str	r2, [r3, #0]
    return ret;
 80026fc:	687b      	ldr	r3, [r7, #4]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	f107 0708 	add.w	r7, r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <add_inode>:
        free(sb->inode_list);
    free(sb);
}
*/

static ramfs_inode_t* add_inode(const char* filename, ramfs_superblock_t* sb){
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
    ramfs_inode_t* ret = (ramfs_inode_t*)calloc(sizeof(ramfs_inode_t), 1);
 8002712:	f04f 00d8 	mov.w	r0, #216	; 0xd8
 8002716:	f04f 0101 	mov.w	r1, #1
 800271a:	f7fd febb 	bl	8000494 <calloc>
 800271e:	4603      	mov	r3, r0
 8002720:	60fb      	str	r3, [r7, #12]
    if(!ret)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <add_inode+0x26>
        return NULL;
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	e04e      	b.n	80027cc <add_inode+0xc4>
    ret->hash = hash_djb2((uint8_t*)filename, -1);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002734:	f7ff fba2 	bl	8001e7c <hash_djb2>
 8002738:	4602      	mov	r2, r0
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	601a      	str	r2, [r3, #0]
    ret->device = sb->device;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	605a      	str	r2, [r3, #4]
    strcpy(ret->filename, filename);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f103 0310 	add.w	r3, r3, #16
 800274c:	4618      	mov	r0, r3
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	f001 fa94 	bl	8003c7c <strcpy>
    ret->attribute = 0;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f04f 0200 	mov.w	r2, #0
 800275a:	60da      	str	r2, [r3, #12]
    ret->data_length = 0;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	651a      	str	r2, [r3, #80]	; 0x50
    ret->block_count = 0;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	655a      	str	r2, [r3, #84]	; 0x54
    ret->number = sb->inode_count;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	609a      	str	r2, [r3, #8]

    ramfs_inode_t** src = sb->inode_list;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	60bb      	str	r3, [r7, #8]
    sb->inode_list = (ramfs_inode_t**)calloc(sizeof(ramfs_inode_t*), sb->inode_count + 1);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f103 0301 	add.w	r3, r3, #1
 8002782:	f04f 0004 	mov.w	r0, #4
 8002786:	4619      	mov	r1, r3
 8002788:	f7fd fe84 	bl	8000494 <calloc>
 800278c:	4603      	mov	r3, r0
 800278e:	461a      	mov	r2, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	60da      	str	r2, [r3, #12]
    memcpy(sb->inode_list, src, sizeof(ramfs_inode_t*) * sb->inode_count);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80027a0:	4610      	mov	r0, r2
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	461a      	mov	r2, r3
 80027a6:	f001 f9e3 	bl	8003b70 <memcpy>
    free(src);
 80027aa:	68b8      	ldr	r0, [r7, #8]
 80027ac:	f7fd fe84 	bl	80004b8 <free>

    sb->inode_list[sb->inode_count++] = ret;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68d9      	ldr	r1, [r3, #12]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80027bc:	188a      	adds	r2, r1, r2
 80027be:	68f9      	ldr	r1, [r7, #12]
 80027c0:	6011      	str	r1, [r2, #0]
 80027c2:	f103 0201 	add.w	r2, r3, #1
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	605a      	str	r2, [r3, #4]
    return ret;
 80027ca:	68fb      	ldr	r3, [r7, #12]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	f107 0710 	add.w	r7, r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop

080027d8 <add_block>:

static uint32_t add_block(ramfs_superblock_t* sb){
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
    ramfs_block_t* ret = (ramfs_block_t*)calloc(sizeof(ramfs_block_t), 1);
 80027e0:	f04f 0040 	mov.w	r0, #64	; 0x40
 80027e4:	f04f 0101 	mov.w	r1, #1
 80027e8:	f7fd fe54 	bl	8000494 <calloc>
 80027ec:	4603      	mov	r3, r0
 80027ee:	60fb      	str	r3, [r7, #12]

    ramfs_block_t** src = sb->block_pool;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	60bb      	str	r3, [r7, #8]
    sb->block_pool = (ramfs_block_t**)calloc(sizeof(ramfs_block_t*), sb->block_count + 1);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f103 0301 	add.w	r3, r3, #1
 80027fe:	f04f 0004 	mov.w	r0, #4
 8002802:	4619      	mov	r1, r3
 8002804:	f7fd fe46 	bl	8000494 <calloc>
 8002808:	4603      	mov	r3, r0
 800280a:	461a      	mov	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	611a      	str	r2, [r3, #16]
    memcpy(sb->block_pool, src, sizeof(ramfs_block_t*) * sb->block_count);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800281c:	4610      	mov	r0, r2
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	461a      	mov	r2, r3
 8002822:	f001 f9a5 	bl	8003b70 <memcpy>
    free(src);
 8002826:	68b8      	ldr	r0, [r7, #8]
 8002828:	f7fd fe46 	bl	80004b8 <free>

    sb->block_pool[sb->block_count++] = ret;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6919      	ldr	r1, [r3, #16]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002838:	188a      	adds	r2, r1, r2
 800283a:	68f9      	ldr	r1, [r7, #12]
 800283c:	6011      	str	r1, [r2, #0]
 800283e:	f103 0201 	add.w	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	609a      	str	r2, [r3, #8]
    return sb->block_count - 1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
}
 800284e:	4618      	mov	r0, r3
 8002850:	f107 0710 	add.w	r7, r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <ramfs_write>:

static ssize_t ramfs_write(struct inode_t* inode, const void* buf, size_t count, off_t offset) {
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b08b      	sub	sp, #44	; 0x2c
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	603b      	str	r3, [r7, #0]
    ramfs_superblock_t* ptr = ramfs_sb_list;
 8002866:	f24f 73c0 	movw	r3, #63424	; 0xf7c0
 800286a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
    ramfs_inode_t * ramfs_node = NULL;
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	623b      	str	r3, [r7, #32]

    while(ptr){
 8002878:	e01b      	b.n	80028b2 <ramfs_write+0x5a>
        if(ptr->device == inode->device){
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d112      	bne.n	80028ac <ramfs_write+0x54>
            if(inode->number >= ptr->inode_count)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	429a      	cmp	r2, r3
 8002890:	d302      	bcc.n	8002898 <ramfs_write+0x40>
               return -1;
 8002892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002896:	e0d2      	b.n	8002a3e <ramfs_write+0x1e6>

            ramfs_node = ptr->inode_list[inode->number];
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80028a4:	18d3      	adds	r3, r2, r3
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	623b      	str	r3, [r7, #32]
            break;
 80028aa:	e005      	b.n	80028b8 <ramfs_write+0x60>
        }
        ptr = ptr->next;
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24

static ssize_t ramfs_write(struct inode_t* inode, const void* buf, size_t count, off_t offset) {
    ramfs_superblock_t* ptr = ramfs_sb_list;
    ramfs_inode_t * ramfs_node = NULL;

    while(ptr){
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1e0      	bne.n	800287a <ramfs_write+0x22>
            break;
        }
        ptr = ptr->next;
    }

    if(!ramfs_node)
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <ramfs_write+0x6c>
        return -1;
 80028be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028c2:	e0bc      	b.n	8002a3e <ramfs_write+0x1e6>
    if(ramfs_node->attribute && 1)
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <ramfs_write+0x7a>
        return -2;
 80028cc:	f06f 0301 	mvn.w	r3, #1
 80028d0:	e0b5      	b.n	8002a3e <ramfs_write+0x1e6>

    uint8_t* src = (uint8_t*)buf;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	61fb      	str	r3, [r7, #28]
    uint32_t start_block_number;
    uint32_t pCount = count;     
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	617b      	str	r3, [r7, #20]

    if(!count)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <ramfs_write+0x8e>
        return 0;
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	e0ab      	b.n	8002a3e <ramfs_write+0x1e6>

    start_block_number = offset >> 6;   //Every Block is 4096 Bytes
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	ea4f 13a3 	mov.w	r3, r3, asr #6
 80028ec:	61bb      	str	r3, [r7, #24]
    
    if(start_block_number >= ramfs_node->block_count){
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d810      	bhi.n	800291a <ramfs_write+0xc2>
        ramfs_node->blocks[ramfs_node->block_count] = add_block(ptr);
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 80028fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028fe:	f7ff ff6b 	bl	80027d8 <add_block>
 8002902:	4601      	mov	r1, r0
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	f104 0216 	add.w	r2, r4, #22
 800290a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        ramfs_node->block_count++;
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	f103 0201 	add.w	r2, r3, #1
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
    }
    memcpy(ptr->block_pool[ramfs_node->blocks[start_block_number++]]->data + (offset & (0x3F)), src, \
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	691a      	ldr	r2, [r3, #16]
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	69b9      	ldr	r1, [r7, #24]
 8002922:	f101 0116 	add.w	r1, r1, #22
 8002926:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800292a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800292e:	18d3      	adds	r3, r2, r3
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002938:	18d2      	adds	r2, r2, r3
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f103 0301 	add.w	r3, r3, #1
 8002940:	61bb      	str	r3, [r7, #24]
            count < (BLOCK_SIZE - (offset & (0x3F))) ? count : BLOCK_SIZE - (offset & (0x3F)));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002948:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800294c:	4619      	mov	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4299      	cmp	r1, r3
 8002952:	bf38      	it	cc
 8002954:	460b      	movcc	r3, r1
    
    if(start_block_number >= ramfs_node->block_count){
        ramfs_node->blocks[ramfs_node->block_count] = add_block(ptr);
        ramfs_node->block_count++;
    }
    memcpy(ptr->block_pool[ramfs_node->blocks[start_block_number++]]->data + (offset & (0x3F)), src, \
 8002956:	4610      	mov	r0, r2
 8002958:	69f9      	ldr	r1, [r7, #28]
 800295a:	461a      	mov	r2, r3
 800295c:	f001 f908 	bl	8003b70 <memcpy>
            count < (BLOCK_SIZE - (offset & (0x3F))) ? count : BLOCK_SIZE - (offset & (0x3F)));
    src += count < (BLOCK_SIZE - (offset & (0x3F))) ? count : BLOCK_SIZE - (offset & (0x3F));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002966:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800296a:	461a      	mov	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	429a      	cmp	r2, r3
 8002970:	bf38      	it	cc
 8002972:	4613      	movcc	r3, r2
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	18d3      	adds	r3, r2, r3
 8002978:	61fb      	str	r3, [r7, #28]
    count -= count < (BLOCK_SIZE - (offset & (0x3F))) ? count : BLOCK_SIZE - (offset & (0x3F));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002980:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002984:	461a      	mov	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	429a      	cmp	r2, r3
 800298a:	bf38      	it	cc
 800298c:	4613      	movcc	r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	607b      	str	r3, [r7, #4]

    while(count){
 8002994:	e03d      	b.n	8002a12 <ramfs_write+0x1ba>
        if(start_block_number >= ramfs_node->block_count){
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	429a      	cmp	r2, r3
 800299e:	d810      	bhi.n	80029c2 <ramfs_write+0x16a>
            ramfs_node->blocks[ramfs_node->block_count] = add_block(ptr);
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 80029a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029a6:	f7ff ff17 	bl	80027d8 <add_block>
 80029aa:	4601      	mov	r1, r0
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	f104 0216 	add.w	r2, r4, #22
 80029b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            ramfs_node->block_count++;
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ba:	f103 0201 	add.w	r2, r3, #1
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	655a      	str	r2, [r3, #84]	; 0x54
        }
        memcpy(ptr->block_pool[ramfs_node->blocks[start_block_number++]]->data, src, (count > BLOCK_SIZE ? BLOCK_SIZE: count));
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	69b9      	ldr	r1, [r7, #24]
 80029ca:	f101 0116 	add.w	r1, r1, #22
 80029ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80029d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80029d6:	18d3      	adds	r3, r2, r3
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	f103 0301 	add.w	r3, r3, #1
 80029e2:	61bb      	str	r3, [r7, #24]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	bf28      	it	cs
 80029ea:	2340      	movcs	r3, #64	; 0x40
 80029ec:	4610      	mov	r0, r2
 80029ee:	69f9      	ldr	r1, [r7, #28]
 80029f0:	461a      	mov	r2, r3
 80029f2:	f001 f8bd 	bl	8003b70 <memcpy>
        src += (count > BLOCK_SIZE ? BLOCK_SIZE: count);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b40      	cmp	r3, #64	; 0x40
 80029fa:	bf28      	it	cs
 80029fc:	2340      	movcs	r3, #64	; 0x40
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	18d3      	adds	r3, r2, r3
 8002a02:	61fb      	str	r3, [r7, #28]
        count -= (count > BLOCK_SIZE ? BLOCK_SIZE: count);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b40      	cmp	r3, #64	; 0x40
 8002a08:	bf28      	it	cs
 8002a0a:	2340      	movcs	r3, #64	; 0x40
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	607b      	str	r3, [r7, #4]
    memcpy(ptr->block_pool[ramfs_node->blocks[start_block_number++]]->data + (offset & (0x3F)), src, \
            count < (BLOCK_SIZE - (offset & (0x3F))) ? count : BLOCK_SIZE - (offset & (0x3F)));
    src += count < (BLOCK_SIZE - (offset & (0x3F))) ? count : BLOCK_SIZE - (offset & (0x3F));
    count -= count < (BLOCK_SIZE - (offset & (0x3F))) ? count : BLOCK_SIZE - (offset & (0x3F));

    while(count){
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1be      	bne.n	8002996 <ramfs_write+0x13e>
        memcpy(ptr->block_pool[ramfs_node->blocks[start_block_number++]]->data, src, (count > BLOCK_SIZE ? BLOCK_SIZE: count));
        src += (count > BLOCK_SIZE ? BLOCK_SIZE: count);
        count -= (count > BLOCK_SIZE ? BLOCK_SIZE: count);
    }

    offset += pCount;
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	18d3      	adds	r3, r2, r3
 8002a1e:	603b      	str	r3, [r7, #0]
    if(offset > ramfs_node->data_length)
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d908      	bls.n	8002a3c <ramfs_write+0x1e4>
        ramfs_node->data_length += offset - ramfs_node->data_length;
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a2e:	6839      	ldr	r1, [r7, #0]
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a34:	1acb      	subs	r3, r1, r3
 8002a36:	18d2      	adds	r2, r2, r3
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	651a      	str	r2, [r3, #80]	; 0x50

    return pCount;
 8002a3c:	697b      	ldr	r3, [r7, #20]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd90      	pop	{r4, r7, pc}

08002a48 <ramfs_read>:

static ssize_t ramfs_read(struct inode_t* inode, void* buf, size_t count, off_t offset) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	603b      	str	r3, [r7, #0]
    ramfs_superblock_t* ptr = ramfs_sb_list; 
 8002a56:	f24f 73c0 	movw	r3, #63424	; 0xf7c0
 8002a5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
    ramfs_inode_t * ramfs_node = NULL;
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	623b      	str	r3, [r7, #32]

    while(ptr){
 8002a68:	e01b      	b.n	8002aa2 <ramfs_read+0x5a>
        if(ptr->device == inode->device){
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d112      	bne.n	8002a9c <ramfs_read+0x54>
            if(inode->number >= ptr->inode_count)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d302      	bcc.n	8002a88 <ramfs_read+0x40>
               return -1;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a86:	e0a1      	b.n	8002bcc <ramfs_read+0x184>

            ramfs_node = ptr->inode_list[inode->number];
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002a94:	18d3      	adds	r3, r2, r3
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	623b      	str	r3, [r7, #32]
            break;
 8002a9a:	e005      	b.n	8002aa8 <ramfs_read+0x60>
        }
        ptr = ptr->next;
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24

static ssize_t ramfs_read(struct inode_t* inode, void* buf, size_t count, off_t offset) {
    ramfs_superblock_t* ptr = ramfs_sb_list; 
    ramfs_inode_t * ramfs_node = NULL;

    while(ptr){
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1e0      	bne.n	8002a6a <ramfs_read+0x22>
            break;
        }
        ptr = ptr->next;
    }

    if(!ramfs_node)
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d102      	bne.n	8002ab4 <ramfs_read+0x6c>
        return -1;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ab2:	e08b      	b.n	8002bcc <ramfs_read+0x184>
    if(ramfs_node->attribute && 1)
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <ramfs_read+0x7a>
        return -2;
 8002abc:	f06f 0301 	mvn.w	r3, #1
 8002ac0:	e084      	b.n	8002bcc <ramfs_read+0x184>

    uint8_t* des = (uint8_t*)buf;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	61fb      	str	r3, [r7, #28]
    uint32_t size = ramfs_node->data_length;
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aca:	617b      	str	r3, [r7, #20]
    uint32_t start_block_number;
    
    if(!count)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d102      	bne.n	8002ad8 <ramfs_read+0x90>
        return 0;
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	e079      	b.n	8002bcc <ramfs_read+0x184>

    if ((offset + count) > size)
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	18d2      	adds	r2, r2, r3
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d903      	bls.n	8002aec <ramfs_read+0xa4>
        count = size - offset;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	607b      	str	r3, [r7, #4]

    uint32_t pCount = count;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	613b      	str	r3, [r7, #16]

    start_block_number = offset >> 6;   //Every Block is 4096 Bytes
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	ea4f 13a3 	mov.w	r3, r3, asr #6
 8002af6:	61bb      	str	r3, [r7, #24]
    
    memcpy(des, ptr->block_pool[ramfs_node->blocks[start_block_number++]]->data + (offset & (0x3F)), \
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	69b9      	ldr	r1, [r7, #24]
 8002b00:	f101 0116 	add.w	r1, r1, #22
 8002b04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b08:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002b0c:	18d3      	adds	r3, r2, r3
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b16:	18d2      	adds	r2, r2, r3
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	f103 0301 	add.w	r3, r3, #1
 8002b1e:	61bb      	str	r3, [r7, #24]
            count < (BLOCK_SIZE - (offset & (0x3F))) ? count : BLOCK_SIZE - (offset & (0x3F)));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b26:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4299      	cmp	r1, r3
 8002b30:	bf38      	it	cc
 8002b32:	460b      	movcc	r3, r1

    uint32_t pCount = count;

    start_block_number = offset >> 6;   //Every Block is 4096 Bytes
    
    memcpy(des, ptr->block_pool[ramfs_node->blocks[start_block_number++]]->data + (offset & (0x3F)), \
 8002b34:	69f8      	ldr	r0, [r7, #28]
 8002b36:	4611      	mov	r1, r2
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f001 f819 	bl	8003b70 <memcpy>
            count < (BLOCK_SIZE - (offset & (0x3F))) ? count : BLOCK_SIZE - (offset & (0x3F)));
    des += count < (BLOCK_SIZE - (offset & (0x3F))) ? count : BLOCK_SIZE - (offset & (0x3F));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b44:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002b48:	461a      	mov	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	bf38      	it	cc
 8002b50:	4613      	movcc	r3, r2
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	18d3      	adds	r3, r2, r3
 8002b56:	61fb      	str	r3, [r7, #28]
    count -= count < (BLOCK_SIZE - (offset & (0x3F))) ? count : BLOCK_SIZE - (offset & (0x3F));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b5e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002b62:	461a      	mov	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	bf38      	it	cc
 8002b6a:	4613      	movcc	r3, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	607b      	str	r3, [r7, #4]

    while(count){
 8002b72:	e027      	b.n	8002bc4 <ramfs_read+0x17c>
        memcpy(des, ptr->block_pool[ramfs_node->blocks[start_block_number++]]->data, (count > BLOCK_SIZE ? BLOCK_SIZE: count));
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	69b9      	ldr	r1, [r7, #24]
 8002b7c:	f101 0116 	add.w	r1, r1, #22
 8002b80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b84:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002b88:	18d3      	adds	r3, r2, r3
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f103 0301 	add.w	r3, r3, #1
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b40      	cmp	r3, #64	; 0x40
 8002b9a:	bf28      	it	cs
 8002b9c:	2340      	movcs	r3, #64	; 0x40
 8002b9e:	69f8      	ldr	r0, [r7, #28]
 8002ba0:	4611      	mov	r1, r2
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f000 ffe4 	bl	8003b70 <memcpy>
        des += (count > BLOCK_SIZE ? BLOCK_SIZE: count);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b40      	cmp	r3, #64	; 0x40
 8002bac:	bf28      	it	cs
 8002bae:	2340      	movcs	r3, #64	; 0x40
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	18d3      	adds	r3, r2, r3
 8002bb4:	61fb      	str	r3, [r7, #28]
        count -= (count > BLOCK_SIZE ? BLOCK_SIZE: count);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	bf28      	it	cs
 8002bbc:	2340      	movcs	r3, #64	; 0x40
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	607b      	str	r3, [r7, #4]
    memcpy(des, ptr->block_pool[ramfs_node->blocks[start_block_number++]]->data + (offset & (0x3F)), \
            count < (BLOCK_SIZE - (offset & (0x3F))) ? count : BLOCK_SIZE - (offset & (0x3F)));
    des += count < (BLOCK_SIZE - (offset & (0x3F))) ? count : BLOCK_SIZE - (offset & (0x3F));
    count -= count < (BLOCK_SIZE - (offset & (0x3F))) ? count : BLOCK_SIZE - (offset & (0x3F));

    while(count){
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1d4      	bne.n	8002b74 <ramfs_read+0x12c>
        memcpy(des, ptr->block_pool[ramfs_node->blocks[start_block_number++]]->data, (count > BLOCK_SIZE ? BLOCK_SIZE: count));
        des += (count > BLOCK_SIZE ? BLOCK_SIZE: count);
        count -= (count > BLOCK_SIZE ? BLOCK_SIZE: count);
    }

    return pCount;
 8002bca:	693b      	ldr	r3, [r7, #16]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop

08002bd8 <ramfs_readdir>:

static ssize_t ramfs_readdir(struct inode_t* inode, dir_entity_t* ent, off_t offset) {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
    ramfs_superblock_t* ptr = ramfs_sb_list; 
 8002be4:	f24f 73c0 	movw	r3, #63424	; 0xf7c0
 8002be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	61fb      	str	r3, [r7, #28]
    ramfs_inode_t * ramfs_node = NULL;
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]

    while(ptr){
 8002bf6:	e01b      	b.n	8002c30 <ramfs_readdir+0x58>
        if(ptr->device == inode->device){
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d112      	bne.n	8002c2a <ramfs_readdir+0x52>
            if(inode->number >= ptr->inode_count)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d302      	bcc.n	8002c16 <ramfs_readdir+0x3e>
               return -1;
 8002c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c14:	e057      	b.n	8002cc6 <ramfs_readdir+0xee>

            ramfs_node = ptr->inode_list[inode->number];
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002c22:	18d3      	adds	r3, r2, r3
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	61bb      	str	r3, [r7, #24]
            break;
 8002c28:	e005      	b.n	8002c36 <ramfs_readdir+0x5e>
        }
        ptr = ptr->next;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	61fb      	str	r3, [r7, #28]

static ssize_t ramfs_readdir(struct inode_t* inode, dir_entity_t* ent, off_t offset) {
    ramfs_superblock_t* ptr = ramfs_sb_list; 
    ramfs_inode_t * ramfs_node = NULL;

    while(ptr){
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1e0      	bne.n	8002bf8 <ramfs_readdir+0x20>
            break;
        }
        ptr = ptr->next;
    }

    if(!ramfs_node)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d102      	bne.n	8002c42 <ramfs_readdir+0x6a>
        return -1;
 8002c3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c40:	e041      	b.n	8002cc6 <ramfs_readdir+0xee>

    if(offset >= ramfs_node->block_count)
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d302      	bcc.n	8002c52 <ramfs_readdir+0x7a>
        return -2;
 8002c4c:	f06f 0301 	mvn.w	r3, #1
 8002c50:	e039      	b.n	8002cc6 <ramfs_readdir+0xee>

    ramfs_inode_t * subfile_node = NULL;
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
    
    for(uint32_t i = 0; i < ptr->inode_count; i++){
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	e01c      	b.n	8002c9a <ramfs_readdir+0xc2>
        if(ptr->inode_list[i]->hash == ramfs_node->blocks[offset]){
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002c6a:	18d3      	adds	r3, r2, r3
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	f101 0116 	add.w	r1, r1, #22
 8002c78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d108      	bne.n	8002c92 <ramfs_readdir+0xba>
            subfile_node = ptr->inode_list[i];
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002c8a:	18d3      	adds	r3, r2, r3
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	617b      	str	r3, [r7, #20]
            break;
 8002c90:	e008      	b.n	8002ca4 <ramfs_readdir+0xcc>
    if(offset >= ramfs_node->block_count)
        return -2;

    ramfs_inode_t * subfile_node = NULL;
    
    for(uint32_t i = 0; i < ptr->inode_count; i++){
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f103 0301 	add.w	r3, r3, #1
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d8dd      	bhi.n	8002c60 <ramfs_readdir+0x88>
            subfile_node = ptr->inode_list[i];
            break;
        }
    }

    strcpy(ent->d_name, subfile_node->filename);
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f103 0201 	add.w	r2, r3, #1
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f103 0310 	add.w	r3, r3, #16
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	f000 ffe2 	bl	8003c7c <strcpy>
    ent->d_attr = subfile_node->attribute;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	701a      	strb	r2, [r3, #0]

    return 0;
 8002cc2:	f04f 0300 	mov.w	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f107 0720 	add.w	r7, r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <ramfs_seek>:


off_t ramfs_seek(struct inode_t* node, off_t offset) {
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
    ramfs_superblock_t* ptr = ramfs_sb_list; 
 8002cda:	f24f 73c0 	movw	r3, #63424	; 0xf7c0
 8002cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	617b      	str	r3, [r7, #20]
    ramfs_inode_t * ramfs_node = NULL;
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]

    while(ptr){
 8002cec:	e01b      	b.n	8002d26 <ramfs_seek+0x56>
        if(ptr->device == node->device){
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d112      	bne.n	8002d20 <ramfs_seek+0x50>
            if(node->number >= ptr->inode_count)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d302      	bcc.n	8002d0c <ramfs_seek+0x3c>
               return -1;
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d0a:	e02d      	b.n	8002d68 <ramfs_seek+0x98>

            ramfs_node = ptr->inode_list[node->number];
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002d18:	18d3      	adds	r3, r2, r3
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	613b      	str	r3, [r7, #16]
            break;
 8002d1e:	e005      	b.n	8002d2c <ramfs_seek+0x5c>
        }
        ptr = ptr->next;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	617b      	str	r3, [r7, #20]

off_t ramfs_seek(struct inode_t* node, off_t offset) {
    ramfs_superblock_t* ptr = ramfs_sb_list; 
    ramfs_inode_t * ramfs_node = NULL;

    while(ptr){
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1e0      	bne.n	8002cee <ramfs_seek+0x1e>
            break;
        }
        ptr = ptr->next;
    }

    if(!ramfs_node)
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d102      	bne.n	8002d38 <ramfs_seek+0x68>
        return -1;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d36:	e017      	b.n	8002d68 <ramfs_seek+0x98>

    uint32_t size;
    if(ramfs_node->attribute && 1)
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <ramfs_seek+0x78>
        size = ramfs_node->block_count;
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	e002      	b.n	8002d4e <ramfs_seek+0x7e>
    else
        size = ramfs_node->data_length;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d4c:	60fb      	str	r3, [r7, #12]
    
    if(offset > size)
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d901      	bls.n	8002d5a <ramfs_seek+0x8a>
        offset = size;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	603b      	str	r3, [r7, #0]
    if(offset < 0)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	da02      	bge.n	8002d66 <ramfs_seek+0x96>
        offset = 0;
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	603b      	str	r3, [r7, #0]

    return offset;
 8002d66:	683b      	ldr	r3, [r7, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f107 071c 	add.w	r7, r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <ramfs_i_create>:
    }
    return r;
}
*/

int ramfs_i_create(struct inode_t* inode, const char* fn){
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
    ramfs_inode_t* p_inode,* c_inode; 
    ramfs_superblock_t* ptr = ramfs_sb_list;
 8002d7e:	f24f 73c0 	movw	r3, #63424	; 0xf7c0
 8002d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	617b      	str	r3, [r7, #20]
    while(ptr){
 8002d8a:	e038      	b.n	8002dfe <ramfs_i_create+0x8a>
        if(ptr->device == inode->device){
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d12f      	bne.n	8002df8 <ramfs_i_create+0x84>
            if(inode->number >= ptr->inode_count)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d302      	bcc.n	8002daa <ramfs_i_create+0x36>
               return -1;
 8002da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002da8:	e02e      	b.n	8002e08 <ramfs_i_create+0x94>

            p_inode = ptr->inode_list[inode->number];
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002db6:	18d3      	adds	r3, r2, r3
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	613b      	str	r3, [r7, #16]
            if(!(p_inode->attribute & 1))
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d102      	bne.n	8002dce <ramfs_i_create+0x5a>
                return -2;
 8002dc8:	f06f 0301 	mvn.w	r3, #1
 8002dcc:	e01c      	b.n	8002e08 <ramfs_i_create+0x94>

            c_inode = add_inode(fn, ptr);
 8002dce:	6838      	ldr	r0, [r7, #0]
 8002dd0:	6979      	ldr	r1, [r7, #20]
 8002dd2:	f7ff fc99 	bl	8002708 <add_inode>
 8002dd6:	60f8      	str	r0, [r7, #12]
            p_inode->blocks[p_inode->block_count++] = c_inode->hash;
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	6810      	ldr	r0, [r2, #0]
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	f103 0116 	add.w	r1, r3, #22
 8002de6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
 8002dea:	f103 0201 	add.w	r2, r3, #1
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54
            return 0;
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e007      	b.n	8002e08 <ramfs_i_create+0x94>
        }
        ptr = ptr->next;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	617b      	str	r3, [r7, #20]
*/

int ramfs_i_create(struct inode_t* inode, const char* fn){
    ramfs_inode_t* p_inode,* c_inode; 
    ramfs_superblock_t* ptr = ramfs_sb_list;
    while(ptr){
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1c3      	bne.n	8002d8c <ramfs_i_create+0x18>
            p_inode->blocks[p_inode->block_count++] = c_inode->hash;
            return 0;
        }
        ptr = ptr->next;
    }
    return -4;
 8002e04:	f06f 0303 	mvn.w	r3, #3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f107 0718 	add.w	r7, r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop

08002e14 <ramfs_i_mkdir>:

int ramfs_i_mkdir(struct inode_t* inode, const char* fn){
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
    ramfs_inode_t* p_inode,* c_inode; 
    ramfs_superblock_t* ptr = ramfs_sb_list;
 8002e1e:	f24f 73c0 	movw	r3, #63424	; 0xf7c0
 8002e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	617b      	str	r3, [r7, #20]
    while(ptr){
 8002e2a:	e03e      	b.n	8002eaa <ramfs_i_mkdir+0x96>
        if(ptr->device == inode->device){
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d135      	bne.n	8002ea4 <ramfs_i_mkdir+0x90>
            if(inode->number >= ptr->inode_count)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d302      	bcc.n	8002e4a <ramfs_i_mkdir+0x36>
               return -1;
 8002e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e48:	e034      	b.n	8002eb4 <ramfs_i_mkdir+0xa0>

            p_inode = ptr->inode_list[inode->number];
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002e56:	18d3      	adds	r3, r2, r3
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	613b      	str	r3, [r7, #16]
            if(!(p_inode->attribute & 1))
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <ramfs_i_mkdir+0x5a>
                return -2;
 8002e68:	f06f 0301 	mvn.w	r3, #1
 8002e6c:	e022      	b.n	8002eb4 <ramfs_i_mkdir+0xa0>

            c_inode = add_inode(fn, ptr);
 8002e6e:	6838      	ldr	r0, [r7, #0]
 8002e70:	6979      	ldr	r1, [r7, #20]
 8002e72:	f7ff fc49 	bl	8002708 <add_inode>
 8002e76:	60f8      	str	r0, [r7, #12]
            c_inode->attribute |= 1; //Set as Floder
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f043 0201 	orr.w	r2, r3, #1
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	60da      	str	r2, [r3, #12]
            p_inode->blocks[p_inode->block_count++] = c_inode->hash;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	6810      	ldr	r0, [r2, #0]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	f103 0116 	add.w	r1, r3, #22
 8002e92:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
 8002e96:	f103 0201 	add.w	r2, r3, #1
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
            return 0;
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	e007      	b.n	8002eb4 <ramfs_i_mkdir+0xa0>
        }
        ptr = ptr->next;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	617b      	str	r3, [r7, #20]
}

int ramfs_i_mkdir(struct inode_t* inode, const char* fn){
    ramfs_inode_t* p_inode,* c_inode; 
    ramfs_superblock_t* ptr = ramfs_sb_list;
    while(ptr){
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1bd      	bne.n	8002e2c <ramfs_i_mkdir+0x18>
            p_inode->blocks[p_inode->block_count++] = c_inode->hash;
            return 0;
        }
        ptr = ptr->next;
    }
    return -4;
 8002eb0:	f06f 0303 	mvn.w	r3, #3
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f107 0718 	add.w	r7, r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop

08002ec0 <ramfs_i_lookup>:
int ramfs_i_lookup(struct inode_t* inode, const char* path){
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
    const char* slash = strchr(path, '/');
 8002eca:	6838      	ldr	r0, [r7, #0]
 8002ecc:	f04f 012f 	mov.w	r1, #47	; 0x2f
 8002ed0:	f000 feb0 	bl	8003c34 <strchr>
 8002ed4:	6138      	str	r0, [r7, #16]
    uint32_t hash = hash_djb2((uint8_t*)path, (slash == NULL ? -1 : (slash - path)));
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <ramfs_i_lookup+0x24>
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	e001      	b.n	8002ee8 <ramfs_i_lookup+0x28>
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ee8:	6838      	ldr	r0, [r7, #0]
 8002eea:	4619      	mov	r1, r3
 8002eec:	f7fe ffc6 	bl	8001e7c <hash_djb2>
 8002ef0:	60f8      	str	r0, [r7, #12]

    ramfs_inode_t* ramfs_inode; 
    ramfs_superblock_t* ptr = ramfs_sb_list;
 8002ef2:	f24f 73c0 	movw	r3, #63424	; 0xf7c0
 8002ef6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	61fb      	str	r3, [r7, #28]
    while(ptr){
 8002efe:	e05d      	b.n	8002fbc <ramfs_i_lookup+0xfc>
        if(ptr->device == inode->device){
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d154      	bne.n	8002fb6 <ramfs_i_lookup+0xf6>
            if(inode->number >= ptr->inode_count)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d302      	bcc.n	8002f1e <ramfs_i_lookup+0x5e>
               return -1;
 8002f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f1c:	e053      	b.n	8002fc6 <ramfs_i_lookup+0x106>

            ramfs_inode = ptr->inode_list[inode->number];
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002f2a:	18d3      	adds	r3, r2, r3
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60bb      	str	r3, [r7, #8]
            if(!(ramfs_inode->attribute & 1))
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d102      	bne.n	8002f42 <ramfs_i_lookup+0x82>
                return -2;
 8002f3c:	f06f 0301 	mvn.w	r3, #1
 8002f40:	e041      	b.n	8002fc6 <ramfs_i_lookup+0x106>
            for(uint32_t i = 0; i < ramfs_inode->block_count; i++){
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	e02d      	b.n	8002fa6 <ramfs_i_lookup+0xe6>
                if(!(ramfs_inode->attribute && 1))
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d102      	bne.n	8002f58 <ramfs_i_lookup+0x98>
                    return -1;
 8002f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f56:	e036      	b.n	8002fc6 <ramfs_i_lookup+0x106>
                if(ramfs_inode->blocks[i] == hash){
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	f102 0216 	add.w	r2, r2, #22
 8002f60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d119      	bne.n	8002f9e <ramfs_i_lookup+0xde>
                    for(uint32_t j = 0; j < ptr->inode_count; j++){
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	e010      	b.n	8002f94 <ramfs_i_lookup+0xd4>
                        if(ptr->inode_list[j]->hash == hash){
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002f7c:	18d3      	adds	r3, r2, r3
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d101      	bne.n	8002f8c <ramfs_i_lookup+0xcc>
                            return j; 
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	e01c      	b.n	8002fc6 <ramfs_i_lookup+0x106>
                return -2;
            for(uint32_t i = 0; i < ramfs_inode->block_count; i++){
                if(!(ramfs_inode->attribute && 1))
                    return -1;
                if(ramfs_inode->blocks[i] == hash){
                    for(uint32_t j = 0; j < ptr->inode_count; j++){
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f103 0301 	add.w	r3, r3, #1
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d8e9      	bhi.n	8002f72 <ramfs_i_lookup+0xb2>
               return -1;

            ramfs_inode = ptr->inode_list[inode->number];
            if(!(ramfs_inode->attribute & 1))
                return -2;
            for(uint32_t i = 0; i < ramfs_inode->block_count; i++){
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	f103 0301 	add.w	r3, r3, #1
 8002fa4:	61bb      	str	r3, [r7, #24]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d8cc      	bhi.n	8002f4a <ramfs_i_lookup+0x8a>
                            return j; 
                        }
                    }
               }
            }
            return -3;
 8002fb0:	f06f 0302 	mvn.w	r3, #2
 8002fb4:	e007      	b.n	8002fc6 <ramfs_i_lookup+0x106>
        }
        ptr = ptr->next;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	61fb      	str	r3, [r7, #28]
    const char* slash = strchr(path, '/');
    uint32_t hash = hash_djb2((uint8_t*)path, (slash == NULL ? -1 : (slash - path)));

    ramfs_inode_t* ramfs_inode; 
    ramfs_superblock_t* ptr = ramfs_sb_list;
    while(ptr){
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d19e      	bne.n	8002f00 <ramfs_i_lookup+0x40>
            }
            return -3;
        }
        ptr = ptr->next;
    }
    return -4;
 8002fc2:	f06f 0303 	mvn.w	r3, #3
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f107 0720 	add.w	r7, r7, #32
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <ramfs_read_inode>:

int ramfs_read_inode(inode_t* inode){
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
    ramfs_superblock_t* ptr = ramfs_sb_list;
 8002fd8:	f24f 73c0 	movw	r3, #63424	; 0xf7c0
 8002fdc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	60fb      	str	r3, [r7, #12]
    while(ptr){
 8002fe4:	e04d      	b.n	8003082 <ramfs_read_inode+0xb2>
        if(ptr->device == inode->device){
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d144      	bne.n	800307c <ramfs_read_inode+0xac>
            if(inode->number >= ptr->inode_count)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d302      	bcc.n	8003004 <ramfs_read_inode+0x34>
               return -1;
 8002ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003002:	e043      	b.n	800308c <ramfs_read_inode+0xbc>
            //inode->size = ptr->inode_list[inode->number]->data_length;
            inode->mode = ptr->inode_list[inode->number]->attribute;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003010:	18d3      	adds	r3, r2, r3
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	609a      	str	r2, [r3, #8]
            inode->block_size = BLOCK_SIZE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8003020:	60da      	str	r2, [r3, #12]
            inode->inode_ops.i_lookup = ramfs_i_lookup;
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	f642 63c1 	movw	r3, #11969	; 0x2ec1
 8003028:	f6c0 0300 	movt	r3, #2048	; 0x800
 800302c:	6153      	str	r3, [r2, #20]
            inode->inode_ops.i_create = ramfs_i_create;
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	f642 5375 	movw	r3, #11637	; 0x2d75
 8003034:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003038:	6113      	str	r3, [r2, #16]
            inode->inode_ops.i_mkdir = ramfs_i_mkdir;
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	f642 6315 	movw	r3, #11797	; 0x2e15
 8003040:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003044:	6193      	str	r3, [r2, #24]
            inode->file_ops.lseek = ramfs_seek;
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	f642 43d1 	movw	r3, #11473	; 0x2cd1
 800304c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003050:	6253      	str	r3, [r2, #36]	; 0x24
            inode->file_ops.read = ramfs_read;
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	f642 2349 	movw	r3, #10825	; 0x2a49
 8003058:	f6c0 0300 	movt	r3, #2048	; 0x800
 800305c:	6293      	str	r3, [r2, #40]	; 0x28
            inode->file_ops.write = ramfs_write;
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	f642 0359 	movw	r3, #10329	; 0x2859
 8003064:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003068:	62d3      	str	r3, [r2, #44]	; 0x2c
            inode->file_ops.readdir = ramfs_readdir;
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	f642 33d9 	movw	r3, #11225	; 0x2bd9
 8003070:	f6c0 0300 	movt	r3, #2048	; 0x800
 8003074:	6313      	str	r3, [r2, #48]	; 0x30

            return 0;
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	e007      	b.n	800308c <ramfs_read_inode+0xbc>
        }
        ptr = ptr->next;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	60fb      	str	r3, [r7, #12]
    return -4;
}

int ramfs_read_inode(inode_t* inode){
    ramfs_superblock_t* ptr = ramfs_sb_list;
    while(ptr){
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ae      	bne.n	8002fe6 <ramfs_read_inode+0x16>
            return 0;
        }
        ptr = ptr->next;
    }

    return -2;
 8003088:	f06f 0301 	mvn.w	r3, #1
}
 800308c:	4618      	mov	r0, r3
 800308e:	f107 0714 	add.w	r7, r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	bc80      	pop	{r7}
 8003096:	4770      	bx	lr

08003098 <ramfs_read_superblock>:

int ramfs_read_superblock(void* opaque, struct superblock_t* sb){
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
    ramfs_superblock_t* ramfs_sb = init_superblock();
 80030a2:	f7ff faf9 	bl	8002698 <init_superblock>
 80030a6:	60f8      	str	r0, [r7, #12]
    ramfs_inode_t* ramfs_in;
    if(ramfs_sb){
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d029      	beq.n	8003102 <ramfs_read_superblock+0x6a>
        ramfs_in = add_inode("", ramfs_sb);
 80030ae:	f246 5038 	movw	r0, #25912	; 0x6538
 80030b2:	f6c0 0000 	movt	r0, #2048	; 0x800
 80030b6:	68f9      	ldr	r1, [r7, #12]
 80030b8:	f7ff fb26 	bl	8002708 <add_inode>
 80030bc:	60b8      	str	r0, [r7, #8]
        ramfs_in->attribute = 1;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f04f 0201 	mov.w	r2, #1
 80030c4:	60da      	str	r2, [r3, #12]
        if(ramfs_in){
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01a      	beq.n	8003102 <ramfs_read_superblock+0x6a>
            sb->device = ramfs_sb->device;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	601a      	str	r2, [r3, #0]
            sb->mounted = ramfs_in->number;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	605a      	str	r2, [r3, #4]
            sb->block_size = BLOCK_SIZE;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	f04f 0240 	mov.w	r2, #64	; 0x40
 80030e2:	60da      	str	r2, [r3, #12]
            sb->type_hash = RAMFS_TYPE;
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	f247 23ae 	movw	r3, #29358	; 0x72ae
 80030ea:	f6c0 339a 	movt	r3, #2970	; 0xb9a
 80030ee:	6113      	str	r3, [r2, #16]
            sb->superblock_ops.s_read_inode = ramfs_read_inode;
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	f642 73d1 	movw	r3, #12241	; 0x2fd1
 80030f6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80030fa:	6153      	str	r3, [r2, #20]
            return 0;
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e001      	b.n	8003106 <ramfs_read_superblock+0x6e>
        }
    }

    return -1;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003106:	4618      	mov	r0, r3
 8003108:	f107 0710 	add.w	r7, r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <register_ramfs>:
    .rsbcb = ramfs_read_superblock,
    .require_dev = 0,
    .next = NULL,
};

void register_ramfs(const char * mountpoint) {
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
//    DBGOUT("Registering ramfs `%s' @ %p\r\n", mountpoint, ramfs);
    register_fs(&ramfs_r);
 8003118:	f240 101c 	movw	r0, #284	; 0x11c
 800311c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003120:	f7fd fb58 	bl	80007d4 <register_fs>
}
 8003124:	f107 0708 	add.w	r7, r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <parse_command>:
	MKCL(help, "help"),
	MKCL(test, "test new function"),
    MKCL(test_ramfs, "test ramfs"),
};

int parse_command(char *str, char *argv[]){
 800312c:	b480      	push	{r7}
 800312e:	b089      	sub	sp, #36	; 0x24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
	int b_quote=0, b_dbquote=0;
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	61bb      	str	r3, [r7, #24]
	int i;
	int count=0, p=0;
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	613b      	str	r3, [r7, #16]
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
	for(i=0; str[i]; ++i){
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e03e      	b.n	80031d4 <parse_command+0xa8>
		if(str[i]=='\'')
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	18d3      	adds	r3, r2, r3
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b27      	cmp	r3, #39	; 0x27
 8003160:	d103      	bne.n	800316a <parse_command+0x3e>
			++b_quote;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f103 0301 	add.w	r3, r3, #1
 8003168:	61fb      	str	r3, [r7, #28]
		if(str[i]=='"')
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	18d3      	adds	r3, r2, r3
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b22      	cmp	r3, #34	; 0x22
 8003174:	d103      	bne.n	800317e <parse_command+0x52>
			++b_dbquote;
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f103 0301 	add.w	r3, r3, #1
 800317c:	61bb      	str	r3, [r7, #24]
		if(str[i]==' '&&b_quote%2==0&&b_dbquote%2==0){
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	18d3      	adds	r3, r2, r3
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b20      	cmp	r3, #32
 8003188:	d120      	bne.n	80031cc <parse_command+0xa0>
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d11b      	bne.n	80031cc <parse_command+0xa0>
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d116      	bne.n	80031cc <parse_command+0xa0>
			str[i]='\0';
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	18d3      	adds	r3, r2, r3
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
			argv[count++]=&str[p];
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	18d3      	adds	r3, r2, r3
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	188a      	adds	r2, r1, r2
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f103 0301 	add.w	r3, r3, #1
 80031c2:	613b      	str	r3, [r7, #16]
			p=i+1;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f103 0301 	add.w	r3, r3, #1
 80031ca:	60fb      	str	r3, [r7, #12]

int parse_command(char *str, char *argv[]){
	int b_quote=0, b_dbquote=0;
	int i;
	int count=0, p=0;
	for(i=0; str[i]; ++i){
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f103 0301 	add.w	r3, r3, #1
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	18d3      	adds	r3, r2, r3
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1ba      	bne.n	8003156 <parse_command+0x2a>
			argv[count++]=&str[p];
			p=i+1;
		}
	}
	/* last one */
	argv[count++]=&str[p];
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	18d3      	adds	r3, r2, r3
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	188a      	adds	r2, r1, r2
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f103 0301 	add.w	r3, r3, #1
 80031f8:	613b      	str	r3, [r7, #16]

	return count;
 80031fa:	693b      	ldr	r3, [r7, #16]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <ls_command>:

void ls_command(int n, char *argv[]){
 8003208:	b580      	push	{r7, lr}
 800320a:	b0cc      	sub	sp, #304	; 0x130
 800320c:	af00      	add	r7, sp, #0
 800320e:	f107 0304 	add.w	r3, r7, #4
 8003212:	6018      	str	r0, [r3, #0]
 8003214:	463b      	mov	r3, r7
 8003216:	6019      	str	r1, [r3, #0]
    uint8_t listFlag = 0;
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    struct dir_entity ent;
    int dir, c;

    if(n == 1){
 8003220:	f107 0304 	add.w	r3, r7, #4
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d108      	bne.n	800323c <ls_command+0x34>
		fio_printf(2, "\r\nUsage: ls [-l] [path...]\r\n");
 800322a:	f04f 0002 	mov.w	r0, #2
 800322e:	f246 6150 	movw	r1, #26192	; 0x6650
 8003232:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003236:	f7fc ffe3 	bl	8000200 <fio_printf>
 800323a:	e12d      	b.n	8003498 <ls_command+0x290>
        return;
    }
    
    for(int i = 0; i < n; i++){
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003244:	e039      	b.n	80032ba <ls_command+0xb2>
        if(argv[i][0] == '-'){
 8003246:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800324a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800324e:	463a      	mov	r2, r7
 8003250:	6812      	ldr	r2, [r2, #0]
 8003252:	18d3      	adds	r3, r2, r3
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b2d      	cmp	r3, #45	; 0x2d
 800325a:	d128      	bne.n	80032ae <ls_command+0xa6>
            if(strcmp(argv[i], "-l") == 0){
 800325c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003260:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003264:	463a      	mov	r2, r7
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	18d3      	adds	r3, r2, r3
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f246 6170 	movw	r1, #26224	; 0x6670
 8003272:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003276:	f000 fd5b 	bl	8003d30 <strcmp>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d104      	bne.n	800328a <ls_command+0x82>
                listFlag = 1;
 8003280:	f04f 0301 	mov.w	r3, #1
 8003284:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8003288:	e011      	b.n	80032ae <ls_command+0xa6>
            }else{
                fio_printf(1, "\r\nUnsupported option %s\r\n", argv[i]);
 800328a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800328e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003292:	463a      	mov	r2, r7
 8003294:	6812      	ldr	r2, [r2, #0]
 8003296:	18d3      	adds	r3, r2, r3
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f04f 0001 	mov.w	r0, #1
 800329e:	f246 6174 	movw	r1, #26228	; 0x6674
 80032a2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80032a6:	461a      	mov	r2, r3
 80032a8:	f7fc ffaa 	bl	8000200 <fio_printf>
 80032ac:	e0f4      	b.n	8003498 <ls_command+0x290>
    if(n == 1){
		fio_printf(2, "\r\nUsage: ls [-l] [path...]\r\n");
        return;
    }
    
    for(int i = 0; i < n; i++){
 80032ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80032b2:	f103 0301 	add.w	r3, r3, #1
 80032b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80032ba:	f107 0304 	add.w	r3, r7, #4
 80032be:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	dbbe      	blt.n	8003246 <ls_command+0x3e>
                return;
            }
        }
    }
     
    for(int i = 1; i < n; i++){
 80032c8:	f04f 0301 	mov.w	r3, #1
 80032cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80032d0:	e0da      	b.n	8003488 <ls_command+0x280>
        if(argv[i][0] != '-'){
 80032d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80032d6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80032da:	463a      	mov	r2, r7
 80032dc:	6812      	ldr	r2, [r2, #0]
 80032de:	18d3      	adds	r3, r2, r3
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b2d      	cmp	r3, #45	; 0x2d
 80032e6:	f000 80c9 	beq.w	800347c <ls_command+0x274>
            fio_printf(1, "\r\n");
 80032ea:	f04f 0001 	mov.w	r0, #1
 80032ee:	f246 6190 	movw	r1, #26256	; 0x6690
 80032f2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80032f6:	f7fc ff83 	bl	8000200 <fio_printf>
            dir = fio_opendir(argv[i]); //Treat last argv as path
 80032fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80032fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003302:	463a      	mov	r2, r7
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	18d3      	adds	r3, r2, r3
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe f870 	bl	80013f0 <fio_opendir>
 8003310:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
                        
            for(c = 0; fio_readdir(dir, &ent) >= 0; c++);
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800331c:	e005      	b.n	800332a <ls_command+0x122>
 800331e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003322:	f103 0301 	add.w	r3, r3, #1
 8003326:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800332a:	f107 0318 	add.w	r3, r7, #24
 800332e:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8003332:	4619      	mov	r1, r3
 8003334:	f7fe fa80 	bl	8001838 <fio_readdir>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	daef      	bge.n	800331e <ls_command+0x116>
            fio_seekdir(dir, 0);
 800333e:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8003342:	f04f 0100 	mov.w	r1, #0
 8003346:	f7fe fc29 	bl	8001b9c <fio_seekdir>

            fio_printf(1, "%s:\r\n", argv[i]); 
 800334a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800334e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003352:	463a      	mov	r2, r7
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	18d3      	adds	r3, r2, r3
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f04f 0001 	mov.w	r0, #1
 800335e:	f246 6194 	movw	r1, #26260	; 0x6694
 8003362:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003366:	461a      	mov	r2, r3
 8003368:	f7fc ff4a 	bl	8000200 <fio_printf>
            fio_printf(1, "Total : %d\r\n", c);
 800336c:	f04f 0001 	mov.w	r0, #1
 8003370:	f246 619c 	movw	r1, #26268	; 0x669c
 8003374:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003378:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800337c:	f7fc ff40 	bl	8000200 <fio_printf>
            for(c = 0; fio_readdir(dir, &ent) >= 0; c++){
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003388:	e05e      	b.n	8003448 <ls_command+0x240>
                if(!listFlag){
 800338a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800338e:	2b00      	cmp	r3, #0
 8003390:	d12c      	bne.n	80033ec <ls_command+0x1e4>
                    fio_printf(1, "%s", ent.d_name);
 8003392:	f107 0318 	add.w	r3, r7, #24
 8003396:	f103 0301 	add.w	r3, r3, #1
 800339a:	f04f 0001 	mov.w	r0, #1
 800339e:	f246 61ac 	movw	r1, #26284	; 0x66ac
 80033a2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80033a6:	461a      	mov	r2, r3
 80033a8:	f7fc ff2a 	bl	8000200 <fio_printf>
                    if(c > 5){
 80033ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80033b0:	2b05      	cmp	r3, #5
 80033b2:	dd0c      	ble.n	80033ce <ls_command+0x1c6>
                       fio_printf(1, "\r\n");
 80033b4:	f04f 0001 	mov.w	r0, #1
 80033b8:	f246 6190 	movw	r1, #26256	; 0x6690
 80033bc:	f6c0 0100 	movt	r1, #2048	; 0x800
 80033c0:	f7fc ff1e 	bl	8000200 <fio_printf>
                       c = -1;
 80033c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80033cc:	e036      	b.n	800343c <ls_command+0x234>
                    }
                    else{
                        fio_printf(1, "\t");
 80033ce:	f04f 0001 	mov.w	r0, #1
 80033d2:	f246 61b0 	movw	r1, #26288	; 0x66b0
 80033d6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80033da:	f7fc ff11 	bl	8000200 <fio_printf>
                        c++;
 80033de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80033e2:	f103 0301 	add.w	r3, r3, #1
 80033e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80033ea:	e027      	b.n	800343c <ls_command+0x234>
                    }
                }else{

                    char attrs[11] = "----------\0";
 80033ec:	f107 030c 	add.w	r3, r7, #12
 80033f0:	f246 62bc 	movw	r2, #26300	; 0x66bc
 80033f4:	f6c0 0200 	movt	r2, #2048	; 0x800
 80033f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80033fa:	c303      	stmia	r3!, {r0, r1}
 80033fc:	801a      	strh	r2, [r3, #0]
 80033fe:	f103 0302 	add.w	r3, r3, #2
 8003402:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8003406:	701a      	strb	r2, [r3, #0]
                    if(ent.d_attr & 0x01)
 8003408:	f107 0318 	add.w	r3, r7, #24
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d004      	beq.n	8003420 <ls_command+0x218>
                        attrs[0] = 'd';
 8003416:	f107 030c 	add.w	r3, r7, #12
 800341a:	f04f 0264 	mov.w	r2, #100	; 0x64
 800341e:	701a      	strb	r2, [r3, #0]
                    fio_printf(1, "%s\t%s\r\n", attrs, ent.d_name);
 8003420:	f107 020c 	add.w	r2, r7, #12
 8003424:	f107 0318 	add.w	r3, r7, #24
 8003428:	f103 0301 	add.w	r3, r3, #1
 800342c:	f04f 0001 	mov.w	r0, #1
 8003430:	f246 61b4 	movw	r1, #26292	; 0x66b4
 8003434:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003438:	f7fc fee2 	bl	8000200 <fio_printf>
            for(c = 0; fio_readdir(dir, &ent) >= 0; c++);
            fio_seekdir(dir, 0);

            fio_printf(1, "%s:\r\n", argv[i]); 
            fio_printf(1, "Total : %d\r\n", c);
            for(c = 0; fio_readdir(dir, &ent) >= 0; c++){
 800343c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003440:	f103 0301 	add.w	r3, r3, #1
 8003444:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003448:	f107 0318 	add.w	r3, r7, #24
 800344c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8003450:	4619      	mov	r1, r3
 8003452:	f7fe f9f1 	bl	8001838 <fio_readdir>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	da96      	bge.n	800338a <ls_command+0x182>
                        attrs[0] = 'd';
                    fio_printf(1, "%s\t%s\r\n", attrs, ent.d_name);
                }
            }

            if(c != 0)
 800345c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003460:	2b00      	cmp	r3, #0
 8003462:	d007      	beq.n	8003474 <ls_command+0x26c>
                fio_printf(1, "\r\n");
 8003464:	f04f 0001 	mov.w	r0, #1
 8003468:	f246 6190 	movw	r1, #26256	; 0x6690
 800346c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003470:	f7fc fec6 	bl	8000200 <fio_printf>
            
            fio_closedir(dir);
 8003474:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8003478:	f7fe fc5c 	bl	8001d34 <fio_closedir>
                return;
            }
        }
    }
     
    for(int i = 1; i < n; i++){
 800347c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003480:	f103 0301 	add.w	r3, r3, #1
 8003484:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003488:	f107 0304 	add.w	r3, r7, #4
 800348c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	f6ff af1d 	blt.w	80032d2 <ls_command+0xca>
            
            fio_closedir(dir);
        }
    }
    return;
}
 8003498:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <filedump>:

int filedump(const char* filename){
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b0a4      	sub	sp, #144	; 0x90
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	char buf[128];

	int fd=fio_open(filename, 0, O_RDONLY);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f04f 0100 	mov.w	r1, #0
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f7fd fd1d 	bl	8000ef0 <fio_open>
 80034b6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

	if(fd==OPENFAIL)
 80034ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034c2:	d102      	bne.n	80034ca <filedump+0x2a>
		return 0;
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	e027      	b.n	800351a <filedump+0x7a>

	fio_printf(1, "\r\n");
 80034ca:	f04f 0001 	mov.w	r0, #1
 80034ce:	f246 6190 	movw	r1, #26256	; 0x6690
 80034d2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80034d6:	f7fc fe93 	bl	8000200 <fio_printf>

	int count;
	while((count=fio_read(fd, buf, sizeof(buf)))>0){
 80034da:	e009      	b.n	80034f0 <filedump+0x50>
		fio_write(1, buf, count);
 80034dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034e0:	f107 0208 	add.w	r2, r7, #8
 80034e4:	f04f 0001 	mov.w	r0, #1
 80034e8:	4611      	mov	r1, r2
 80034ea:	461a      	mov	r2, r3
 80034ec:	f7fe fa10 	bl	8001910 <fio_write>
		return 0;

	fio_printf(1, "\r\n");

	int count;
	while((count=fio_read(fd, buf, sizeof(buf)))>0){
 80034f0:	f107 0308 	add.w	r3, r7, #8
 80034f4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80034f8:	4619      	mov	r1, r3
 80034fa:	f04f 0280 	mov.w	r2, #128	; 0x80
 80034fe:	f7fe f8f5 	bl	80016ec <fio_read>
 8003502:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
 8003506:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800350a:	2b00      	cmp	r3, #0
 800350c:	dce6      	bgt.n	80034dc <filedump+0x3c>
		fio_write(1, buf, count);
	}

	fio_close(fd);
 800350e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8003512:	f7fe fbb7 	bl	8001c84 <fio_close>
	return 1;
 8003516:	f04f 0301 	mov.w	r3, #1
}
 800351a:	4618      	mov	r0, r3
 800351c:	f107 0790 	add.w	r7, r7, #144	; 0x90
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <ps_command>:


void ps_command(int n, char *argv[]){
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
	vTaskList(buf);
    fio_printf(1, "\n\rName          State   Priority  Stack  Num\n\r");
    fio_printf(1, "*******************************************\n\r");
	fio_printf(1, "%s\r\n", buf + 2);	
    */
}
 800352e:	f107 070c 	add.w	r7, r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <cat_command>:


void cat_command(int n, char *argv[]){
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
	if(n==1){
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d108      	bne.n	800355a <cat_command+0x22>
		fio_printf(2, "\r\nUsage: cat <filename>\r\n");
 8003548:	f04f 0002 	mov.w	r0, #2
 800354c:	f246 61c8 	movw	r1, #26312	; 0x66c8
 8003550:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003554:	f7fc fe54 	bl	8000200 <fio_printf>
		return;
 8003558:	e01e      	b.n	8003598 <cat_command+0x60>
	}

	if(filedump(argv[1]) < 0)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	f103 0304 	add.w	r3, r3, #4
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff ff9c 	bl	80034a0 <filedump>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	da0c      	bge.n	8003588 <cat_command+0x50>
		fio_printf(2, "\r\n%s no such file or directory.\r\n", argv[1]);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	f103 0304 	add.w	r3, r3, #4
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f04f 0002 	mov.w	r0, #2
 800357a:	f246 61e4 	movw	r1, #26340	; 0x66e4
 800357e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003582:	461a      	mov	r2, r3
 8003584:	f7fc fe3c 	bl	8000200 <fio_printf>

    fio_printf(1, "\r\n");
 8003588:	f04f 0001 	mov.w	r0, #1
 800358c:	f246 6190 	movw	r1, #26256	; 0x6690
 8003590:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003594:	f7fc fe34 	bl	8000200 <fio_printf>
}
 8003598:	f107 0708 	add.w	r7, r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <man_command>:

void man_command(int n, char *argv[]){
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b0a3      	sub	sp, #140	; 0x8c
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
	if(n==1){
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d108      	bne.n	80035c2 <man_command+0x22>
		fio_printf(2, "\r\nUsage: man <command>\r\n");
 80035b0:	f04f 0002 	mov.w	r0, #2
 80035b4:	f246 7108 	movw	r1, #26376	; 0x6708
 80035b8:	f6c0 0100 	movt	r1, #2048	; 0x800
 80035bc:	f7fc fe20 	bl	8000200 <fio_printf>
 80035c0:	e031      	b.n	8003626 <man_command+0x86>
		return;
	}

	char buf[128]="/romfs/manual/";
 80035c2:	f246 7340 	movw	r3, #26432	; 0x6740
 80035c6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80035ca:	f107 0408 	add.w	r4, r7, #8
 80035ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035d0:	c407      	stmia	r4!, {r0, r1, r2}
 80035d2:	8023      	strh	r3, [r4, #0]
 80035d4:	f104 0402 	add.w	r4, r4, #2
 80035d8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80035dc:	7023      	strb	r3, [r4, #0]
 80035de:	f107 0217 	add.w	r2, r7, #23
 80035e2:	f04f 0371 	mov.w	r3, #113	; 0x71
 80035e6:	4610      	mov	r0, r2
 80035e8:	f04f 0100 	mov.w	r1, #0
 80035ec:	461a      	mov	r2, r3
 80035ee:	f000 fa69 	bl	8003ac4 <memset>
	strcat(buf, argv[1]);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	f103 0304 	add.w	r3, r3, #4
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f107 0208 	add.w	r2, r7, #8
 80035fe:	4610      	mov	r0, r2
 8003600:	4619      	mov	r1, r3
 8003602:	f7fc feab 	bl	800035c <strcat>

	if(!filedump(buf))
 8003606:	f107 0308 	add.w	r3, r7, #8
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff ff48 	bl	80034a0 <filedump>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d107      	bne.n	8003626 <man_command+0x86>
		fio_printf(2, "\r\nManual not available.\r\n");
 8003616:	f04f 0002 	mov.w	r0, #2
 800361a:	f246 7124 	movw	r1, #26404	; 0x6724
 800361e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003622:	f7fc fded 	bl	8000200 <fio_printf>
}
 8003626:	f107 078c 	add.w	r7, r7, #140	; 0x8c
 800362a:	46bd      	mov	sp, r7
 800362c:	bd90      	pop	{r4, r7, pc}
 800362e:	bf00      	nop

08003630 <host_command>:

void host_command(int n, char *argv[]){
 8003630:	b5b0      	push	{r4, r5, r7, lr}
 8003632:	b0a6      	sub	sp, #152	; 0x98
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
    int i, len = 0, rnt;
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    char command[128] = {0};
 8003642:	f107 020c 	add.w	r2, r7, #12
 8003646:	f04f 0380 	mov.w	r3, #128	; 0x80
 800364a:	4610      	mov	r0, r2
 800364c:	f04f 0100 	mov.w	r1, #0
 8003650:	461a      	mov	r2, r3
 8003652:	f000 fa37 	bl	8003ac4 <memset>

    if(n>1){
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b01      	cmp	r3, #1
 800365a:	dd67      	ble.n	800372c <host_command+0xfc>
        for(i = 1; i < n; i++) {
 800365c:	f04f 0301 	mov.w	r3, #1
 8003660:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003664:	e03e      	b.n	80036e4 <host_command+0xb4>
            memcpy(&command[len], argv[i], strlen(argv[i]));
 8003666:	f107 020c 	add.w	r2, r7, #12
 800366a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800366e:	18d5      	adds	r5, r2, r3
 8003670:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003674:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	18d3      	adds	r3, r2, r3
 800367c:	681c      	ldr	r4, [r3, #0]
 800367e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003682:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	18d3      	adds	r3, r2, r3
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7fc fe49 	bl	8000324 <strlen>
 8003692:	4603      	mov	r3, r0
 8003694:	4628      	mov	r0, r5
 8003696:	4621      	mov	r1, r4
 8003698:	461a      	mov	r2, r3
 800369a:	f000 fa69 	bl	8003b70 <memcpy>
            len += (strlen(argv[i]) + 1);
 800369e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80036a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	18d3      	adds	r3, r2, r3
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fc fe39 	bl	8000324 <strlen>
 80036b2:	4602      	mov	r2, r0
 80036b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036b8:	18d3      	adds	r3, r2, r3
 80036ba:	f103 0301 	add.w	r3, r3, #1
 80036be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            command[len - 1] = ' ';
 80036c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036c6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80036ca:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80036ce:	18d3      	adds	r3, r2, r3
 80036d0:	f04f 0220 	mov.w	r2, #32
 80036d4:	f803 2c8c 	strb.w	r2, [r3, #-140]
void host_command(int n, char *argv[]){
    int i, len = 0, rnt;
    char command[128] = {0};

    if(n>1){
        for(i = 1; i < n; i++) {
 80036d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80036dc:	f103 0301 	add.w	r3, r3, #1
 80036e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80036e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	dbbb      	blt.n	8003666 <host_command+0x36>
            memcpy(&command[len], argv[i], strlen(argv[i]));
            len += (strlen(argv[i]) + 1);
            command[len - 1] = ' ';
        }
        command[len - 1] = '\0';
 80036ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036f2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80036f6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80036fa:	18d3      	adds	r3, r2, r3
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f803 2c8c 	strb.w	r2, [r3, #-140]
        rnt=host_action(SYS_SYSTEM, command);
 8003704:	f107 030c 	add.w	r3, r7, #12
 8003708:	f04f 0012 	mov.w	r0, #18
 800370c:	4619      	mov	r1, r3
 800370e:	f7fe fc6f 	bl	8001ff0 <host_action>
 8003712:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        fio_printf(1, "\r\nfinish with exit code %d.\r\n", rnt);
 8003716:	f04f 0001 	mov.w	r0, #1
 800371a:	f246 71c0 	movw	r1, #26560	; 0x67c0
 800371e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003722:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003726:	f7fc fd6b 	bl	8000200 <fio_printf>
 800372a:	e007      	b.n	800373c <host_command+0x10c>
    } 
    else {
        fio_printf(2, "\r\nUsage: host 'command'\r\n");
 800372c:	f04f 0002 	mov.w	r0, #2
 8003730:	f246 71e0 	movw	r1, #26592	; 0x67e0
 8003734:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003738:	f7fc fd62 	bl	8000200 <fio_printf>
    }
}
 800373c:	f107 0798 	add.w	r7, r7, #152	; 0x98
 8003740:	46bd      	mov	sp, r7
 8003742:	bdb0      	pop	{r4, r5, r7, pc}

08003744 <help_command>:

void help_command(int n,char *argv[]){
 8003744:	b590      	push	{r4, r7, lr}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
	int i;
	fio_printf(1, "\r\n");
 800374e:	f04f 0001 	mov.w	r0, #1
 8003752:	f246 6190 	movw	r1, #26256	; 0x6690
 8003756:	f6c0 0100 	movt	r1, #2048	; 0x800
 800375a:	f7fc fd51 	bl	8000200 <fio_printf>
	for(i=0;i<sizeof(cl)/sizeof(cl[0]); ++i){
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	e028      	b.n	80037b8 <help_command+0x74>
		fio_printf(1, "%s - %s\r\n", cl[i].name, cl[i].desc);
 8003766:	f240 122c 	movw	r2, #300	; 0x12c
 800376a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800376e:	68f9      	ldr	r1, [r7, #12]
 8003770:	460b      	mov	r3, r1
 8003772:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003776:	185b      	adds	r3, r3, r1
 8003778:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800377c:	18d3      	adds	r3, r2, r3
 800377e:	681c      	ldr	r4, [r3, #0]
 8003780:	f240 122c 	movw	r2, #300	; 0x12c
 8003784:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003788:	68f9      	ldr	r1, [r7, #12]
 800378a:	460b      	mov	r3, r1
 800378c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003790:	185b      	adds	r3, r3, r1
 8003792:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003796:	18d3      	adds	r3, r2, r3
 8003798:	f103 0308 	add.w	r3, r3, #8
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f04f 0001 	mov.w	r0, #1
 80037a2:	f246 71fc 	movw	r1, #26620	; 0x67fc
 80037a6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80037aa:	4622      	mov	r2, r4
 80037ac:	f7fc fd28 	bl	8000200 <fio_printf>
}

void help_command(int n,char *argv[]){
	int i;
	fio_printf(1, "\r\n");
	for(i=0;i<sizeof(cl)/sizeof(cl[0]); ++i){
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f103 0301 	add.w	r3, r3, #1
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d9d3      	bls.n	8003766 <help_command+0x22>
		fio_printf(1, "%s - %s\r\n", cl[i].name, cl[i].desc);
	}
}
 80037be:	f107 0714 	add.w	r7, r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd90      	pop	{r4, r7, pc}
 80037c6:	bf00      	nop

080037c8 <test_command>:

void test_command(int n, char *argv[]) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
    int handle;
    int error;

    fio_printf(1, "\r\n");
 80037d2:	f04f 0001 	mov.w	r0, #1
 80037d6:	f246 6190 	movw	r1, #26256	; 0x6690
 80037da:	f6c0 0100 	movt	r1, #2048	; 0x800
 80037de:	f7fc fd0f 	bl	8000200 <fio_printf>

    handle = host_action(SYS_OPEN, "output/syslog", 8);
 80037e2:	f04f 0001 	mov.w	r0, #1
 80037e6:	f646 0108 	movw	r1, #26632	; 0x6808
 80037ea:	f6c0 0100 	movt	r1, #2048	; 0x800
 80037ee:	f04f 0208 	mov.w	r2, #8
 80037f2:	f7fe fbfd 	bl	8001ff0 <host_action>
 80037f6:	6178      	str	r0, [r7, #20]
    if(handle == -1) {
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037fe:	d108      	bne.n	8003812 <test_command+0x4a>
        fio_printf(1, "Open file error!\n\r");
 8003800:	f04f 0001 	mov.w	r0, #1
 8003804:	f646 0118 	movw	r1, #26648	; 0x6818
 8003808:	f6c0 0100 	movt	r1, #2048	; 0x800
 800380c:	f7fc fcf8 	bl	8000200 <fio_printf>
        return;
 8003810:	e026      	b.n	8003860 <test_command+0x98>
    }

    char *buffer = "Test host_write function which can write data to output/syslog\n";
 8003812:	f646 032c 	movw	r3, #26668	; 0x682c
 8003816:	f6c0 0300 	movt	r3, #2048	; 0x800
 800381a:	613b      	str	r3, [r7, #16]
    error = host_action(SYS_WRITE, handle, (void *)buffer, strlen(buffer));
 800381c:	6938      	ldr	r0, [r7, #16]
 800381e:	f7fc fd81 	bl	8000324 <strlen>
 8003822:	4603      	mov	r3, r0
 8003824:	f04f 0005 	mov.w	r0, #5
 8003828:	6979      	ldr	r1, [r7, #20]
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	f7fe fbe0 	bl	8001ff0 <host_action>
 8003830:	60f8      	str	r0, [r7, #12]
    if(error != 0) {
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00e      	beq.n	8003856 <test_command+0x8e>
        fio_printf(1, "Write file error! Remain %d bytes didn't write in the file.\n\r", error);
 8003838:	f04f 0001 	mov.w	r0, #1
 800383c:	f646 016c 	movw	r1, #26732	; 0x686c
 8003840:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	f7fc fcdb 	bl	8000200 <fio_printf>
        host_action(SYS_CLOSE, handle);
 800384a:	f04f 0002 	mov.w	r0, #2
 800384e:	6979      	ldr	r1, [r7, #20]
 8003850:	f7fe fbce 	bl	8001ff0 <host_action>
        return;
 8003854:	e004      	b.n	8003860 <test_command+0x98>
    }

    host_action(SYS_CLOSE, handle);
 8003856:	f04f 0002 	mov.w	r0, #2
 800385a:	6979      	ldr	r1, [r7, #20]
 800385c:	f7fe fbc8 	bl	8001ff0 <host_action>
}
 8003860:	f107 0718 	add.w	r7, r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <test_ramfs_command>:

void test_ramfs_command(int n, char *argv[]) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
    
    int file;
    char buf[16];

    fio_printf(1, "\r\n");
 8003872:	f04f 0001 	mov.w	r0, #1
 8003876:	f246 6190 	movw	r1, #26256	; 0x6690
 800387a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800387e:	f7fc fcbf 	bl	8000200 <fio_printf>

    fio_mkdir("/tmp/");
 8003882:	f646 00ac 	movw	r0, #26796	; 0x68ac
 8003886:	f6c0 0000 	movt	r0, #2048	; 0x800
 800388a:	f7fd fcc3 	bl	8001214 <fio_mkdir>
    
    file = fio_open("/tmp/test", 0, O_RDWR);
 800388e:	f646 00b4 	movw	r0, #26804	; 0x68b4
 8003892:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003896:	f04f 0100 	mov.w	r1, #0
 800389a:	f04f 0202 	mov.w	r2, #2
 800389e:	f7fd fb27 	bl	8000ef0 <fio_open>
 80038a2:	61f8      	str	r0, [r7, #28]

    fio_write(file, "TEST!\0", 6);
 80038a4:	69f8      	ldr	r0, [r7, #28]
 80038a6:	f646 01c0 	movw	r1, #26816	; 0x68c0
 80038aa:	f6c0 0100 	movt	r1, #2048	; 0x800
 80038ae:	f04f 0206 	mov.w	r2, #6
 80038b2:	f7fe f82d 	bl	8001910 <fio_write>
    
    fio_seek(file, 0, SEEK_SET);
 80038b6:	69f8      	ldr	r0, [r7, #28]
 80038b8:	f04f 0100 	mov.w	r1, #0
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f7fe f8d0 	bl	8001a64 <fio_seek>

    fio_read(file, buf, 6);
 80038c4:	f107 030c 	add.w	r3, r7, #12
 80038c8:	69f8      	ldr	r0, [r7, #28]
 80038ca:	4619      	mov	r1, r3
 80038cc:	f04f 0206 	mov.w	r2, #6
 80038d0:	f7fd ff0c 	bl	80016ec <fio_read>

    fio_printf(1, "%s\r\n", buf);
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	f04f 0001 	mov.w	r0, #1
 80038dc:	f646 01c8 	movw	r1, #26824	; 0x68c8
 80038e0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80038e4:	461a      	mov	r2, r3
 80038e6:	f7fc fc8b 	bl	8000200 <fio_printf>

    fio_close(file);
 80038ea:	69f8      	ldr	r0, [r7, #28]
 80038ec:	f7fe f9ca 	bl	8001c84 <fio_close>

    return;
}
 80038f0:	f107 0720 	add.w	r7, r7, #32
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <do_command>:

cmdfunc *do_command(const char *cmd){
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]

	int i;

	for(i=0; i<sizeof(cl)/sizeof(cl[0]); ++i){
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	e027      	b.n	8003958 <do_command+0x60>
		if(strcmp(cl[i].name, cmd)==0)
 8003908:	f240 122c 	movw	r2, #300	; 0x12c
 800390c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003910:	68f9      	ldr	r1, [r7, #12]
 8003912:	460b      	mov	r3, r1
 8003914:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003918:	185b      	adds	r3, r3, r1
 800391a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800391e:	18d3      	adds	r3, r2, r3
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	f000 fa03 	bl	8003d30 <strcmp>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10f      	bne.n	8003950 <do_command+0x58>
			return cl[i].fptr;
 8003930:	f240 122c 	movw	r2, #300	; 0x12c
 8003934:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003938:	68f9      	ldr	r1, [r7, #12]
 800393a:	460b      	mov	r3, r1
 800393c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003940:	185b      	adds	r3, r3, r1
 8003942:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003946:	18d3      	adds	r3, r2, r3
 8003948:	f103 0304 	add.w	r3, r3, #4
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	e008      	b.n	8003962 <do_command+0x6a>

cmdfunc *do_command(const char *cmd){

	int i;

	for(i=0; i<sizeof(cl)/sizeof(cl[0]); ++i){
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f103 0301 	add.w	r3, r3, #1
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b08      	cmp	r3, #8
 800395c:	d9d4      	bls.n	8003908 <do_command+0x10>
		if(strcmp(cl[i].name, cmd)==0)
			return cl[i].fptr;
	}
	return NULL;	
 800395e:	f04f 0300 	mov.w	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	f107 0710 	add.w	r7, r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <RCC_Configuration>:
#include "stm32f4xx_usart.h"
#include "stm32f4xx_exti.h"
#include "misc.h"

void RCC_Configuration(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
      /* --------------------------- System Clocks Configuration -----------------*/
      /* USART1 clock enable */
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8003970:	f04f 0010 	mov.w	r0, #16
 8003974:	f04f 0101 	mov.w	r1, #1
 8003978:	f001 ffb0 	bl	80058dc <RCC_APB2PeriphClockCmd>
      /* GPIOA clock enable */
      RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800397c:	f04f 0001 	mov.w	r0, #1
 8003980:	f04f 0101 	mov.w	r1, #1
 8003984:	f001 ff80 	bl	8005888 <RCC_AHB1PeriphClockCmd>
}
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop

0800398c <GPIO_Configuration>:


/**************************************************************************************/
 
void GPIO_Configuration(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /*-------------------------- GPIO Configuration ----------------------------*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
 8003992:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003996:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003998:	f04f 0302 	mov.w	r3, #2
 800399c:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80039aa:	f04f 0302 	mov.w	r3, #2
 80039ae:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 80039b0:	463b      	mov	r3, r7
 80039b2:	f04f 0000 	mov.w	r0, #0
 80039b6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80039ba:	4619      	mov	r1, r3
 80039bc:	f001 fd88 	bl	80054d0 <GPIO_Init>

    /* Connect USART pins to AF */
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);   // USART1_TX
 80039c0:	f04f 0000 	mov.w	r0, #0
 80039c4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80039c8:	f04f 0109 	mov.w	r1, #9
 80039cc:	f04f 0207 	mov.w	r2, #7
 80039d0:	f001 fe20 	bl	8005614 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);  // USART1_RX
 80039d4:	f04f 0000 	mov.w	r0, #0
 80039d8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80039dc:	f04f 010a 	mov.w	r1, #10
 80039e0:	f04f 0207 	mov.w	r2, #7
 80039e4:	f001 fe16 	bl	8005614 <GPIO_PinAFConfig>
}
 80039e8:	f107 0708 	add.w	r7, r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <USART1_Configuration>:
 
/**************************************************************************************/
 
void USART1_Configuration(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
     *  - One Stop Bit
     *  - No parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */
    USART_InitStructure.USART_BaudRate = 115200;
 80039f6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80039fa:	603b      	str	r3, [r7, #0]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	80bb      	strh	r3, [r7, #4]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	80fb      	strh	r3, [r7, #6]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	813b      	strh	r3, [r7, #8]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003a14:	f04f 030c 	mov.w	r3, #12
 8003a18:	817b      	strh	r3, [r7, #10]
    USART_Init(USART1, &USART_InitStructure);
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a20:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003a24:	4619      	mov	r1, r3
 8003a26:	f001 ff83 	bl	8005930 <USART_Init>
    USART_Cmd(USART1, ENABLE);
 8003a2a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a2e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003a32:	f04f 0101 	mov.w	r1, #1
 8003a36:	f002 f851 	bl	8005adc <USART_Cmd>
}
 8003a3a:	f107 0710 	add.w	r7, r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop

08003a44 <init_rs232>:

void init_rs232(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
    RCC_Configuration();
 8003a48:	f7ff ff90 	bl	800396c <RCC_Configuration>
    GPIO_Configuration();
 8003a4c:	f7ff ff9e 	bl	800398c <GPIO_Configuration>
    USART1_Configuration();
 8003a50:	f7ff ffce 	bl	80039f0 <USART1_Configuration>
}
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop

08003a58 <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART1. */
    USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 8003a5e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a62:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003a66:	f240 7127 	movw	r1, #1831	; 0x727
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f002 f87b 	bl	8005b68 <USART_ITConfig>
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8003a72:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a76:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003a7a:	f240 5125 	movw	r1, #1317	; 0x525
 8003a7e:	f04f 0201 	mov.w	r2, #1
 8003a82:	f002 f871 	bl	8005b68 <USART_ITConfig>

    /* Enable the USART1 IRQ in the NVIC module (so that the USART1 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8003a86:	f04f 0325 	mov.w	r3, #37	; 0x25
 8003a8a:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003a92:	f04f 0301 	mov.w	r3, #1
 8003a96:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
 8003a98:	f107 0304 	add.w	r3, r7, #4
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f001 fca5 	bl	80053ec <NVIC_Init>
}
 8003aa2:	f107 0708 	add.w	r7, r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop

08003aac <enable_rs232>:

void enable_rs232(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART1, ENABLE);
 8003ab0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003ab4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8003ab8:	f04f 0101 	mov.w	r1, #1
 8003abc:	f002 f80e 	bl	8005adc <USART_Cmd>
}
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop

08003ac4 <memset>:
#define HIGHS (ONES * (UCHAR_MAX/2+1))
#define HASZERO(x) ((x)-ONES & ~(x) & HIGHS)

#define SS (sizeof(size_t))
void *memset(void *dest, int c, size_t n)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	; 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
	unsigned char *s = dest;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	61fb      	str	r3, [r7, #28]
	c = (unsigned char)c;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	60bb      	str	r3, [r7, #8]
	for (; ((uintptr_t)s & ALIGN) && n; n--) *s++ = c;
 8003ada:	e00b      	b.n	8003af4 <memset+0x30>
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	701a      	strb	r2, [r3, #0]
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f103 0301 	add.w	r3, r3, #1
 8003aea:	61fb      	str	r3, [r7, #28]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003af2:	607b      	str	r3, [r7, #4]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <memset+0x40>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1eb      	bne.n	8003adc <memset+0x18>
	if (n) {
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d02b      	beq.n	8003b62 <memset+0x9e>
		size_t *w, k = ONES * c;
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8003b12:	189b      	adds	r3, r3, r2
 8003b14:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8003b18:	189b      	adds	r3, r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
		for (w = (void *)s; n>=SS; n-=SS, w++) *w = k;
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	61bb      	str	r3, [r7, #24]
 8003b20:	e00a      	b.n	8003b38 <memset+0x74>
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f1a3 0304 	sub.w	r3, r3, #4
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	f103 0304 	add.w	r3, r3, #4
 8003b36:	61bb      	str	r3, [r7, #24]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d8f1      	bhi.n	8003b22 <memset+0x5e>
		for (s = (void *)w; n; n--, s++) *s = c;
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	e00b      	b.n	8003b5c <memset+0x98>
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	701a      	strb	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003b52:	607b      	str	r3, [r7, #4]
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f103 0301 	add.w	r3, r3, #1
 8003b5a:	61fb      	str	r3, [r7, #28]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <memset+0x80>
	}
	return dest;
 8003b62:	68fb      	ldr	r3, [r7, #12]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <memcpy>:

void *memcpy(void *dest, const void *src, size_t n)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b08b      	sub	sp, #44	; 0x2c
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
	void *ret = dest;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	617b      	str	r3, [r7, #20]
	
	//Cut rear
	uint8_t *dst8 = dest;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
	const uint8_t *src8 = src;
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	623b      	str	r3, [r7, #32]
	switch (n % 4) {
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d010      	beq.n	8003bb4 <memcpy+0x44>
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d002      	beq.n	8003b9c <memcpy+0x2c>
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d018      	beq.n	8003bcc <memcpy+0x5c>
 8003b9a:	e023      	b.n	8003be4 <memcpy+0x74>
		case 3 : *dst8++ = *src8++;
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	781a      	ldrb	r2, [r3, #0]
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	f103 0301 	add.w	r3, r3, #1
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	f103 0301 	add.w	r3, r3, #1
 8003bb2:	623b      	str	r3, [r7, #32]
		case 2 : *dst8++ = *src8++;
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	781a      	ldrb	r2, [r3, #0]
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	701a      	strb	r2, [r3, #0]
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	f103 0301 	add.w	r3, r3, #1
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	f103 0301 	add.w	r3, r3, #1
 8003bca:	623b      	str	r3, [r7, #32]
		case 1 : *dst8++ = *src8++;
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	781a      	ldrb	r2, [r3, #0]
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	f103 0301 	add.w	r3, r3, #1
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	f103 0301 	add.w	r3, r3, #1
 8003be2:	623b      	str	r3, [r7, #32]
		case 0 : ;
	}
	
	//stm32 data bus width
	uint32_t *dst32 = (void *)dst8;
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	61fb      	str	r3, [r7, #28]
	const uint32_t *src32 = (void *)src8;
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	61bb      	str	r3, [r7, #24]
	n = n / 4;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	ea4f 0393 	mov.w	r3, r3, lsr #2
 8003bf2:	607b      	str	r3, [r7, #4]
	while (n--) {
 8003bf4:	e00b      	b.n	8003c0e <memcpy+0x9e>
		*dst32++ = *src32++;
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f103 0304 	add.w	r3, r3, #4
 8003c04:	61fb      	str	r3, [r7, #28]
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f103 0304 	add.w	r3, r3, #4
 8003c0c:	61bb      	str	r3, [r7, #24]
	
	//stm32 data bus width
	uint32_t *dst32 = (void *)dst8;
	const uint32_t *src32 = (void *)src8;
	n = n / 4;
	while (n--) {
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf0c      	ite	eq
 8003c14:	2300      	moveq	r3, #0
 8003c16:	2301      	movne	r3, #1
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003c20:	607a      	str	r2, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e7      	bne.n	8003bf6 <memcpy+0x86>
		*dst32++ = *src32++;
	}
	
	return ret;
 8003c26:	697b      	ldr	r3, [r7, #20]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <strchr>:

char *strchr(const char *s, int c)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
	for (; *s && *s != c; s++);
 8003c3e:	e003      	b.n	8003c48 <strchr+0x14>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f103 0301 	add.w	r3, r3, #1
 8003c46:	607b      	str	r3, [r7, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d005      	beq.n	8003c5c <strchr+0x28>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d1f1      	bne.n	8003c40 <strchr+0xc>
	return (*s == c) ? (char *)s : NULL;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d101      	bne.n	8003c6c <strchr+0x38>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	e001      	b.n	8003c70 <strchr+0x3c>
 8003c6c:	f04f 0300 	mov.w	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	f107 070c 	add.w	r7, r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bc80      	pop	{r7}
 8003c7a:	4770      	bx	lr

08003c7c <strcpy>:

char *strcpy(char *dest, const char *src)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
	const char *s = src;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	60fb      	str	r3, [r7, #12]
	char *d = dest;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	60bb      	str	r3, [r7, #8]
	while ((*d++ = *s++));
 8003c8e:	bf00      	nop
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	781a      	ldrb	r2, [r3, #0]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2300      	moveq	r3, #0
 8003ca2:	2301      	movne	r3, #1
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	f102 0201 	add.w	r2, r2, #1
 8003cac:	60ba      	str	r2, [r7, #8]
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	f102 0201 	add.w	r2, r2, #1
 8003cb4:	60fa      	str	r2, [r7, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1ea      	bne.n	8003c90 <strcpy+0x14>
	return dest;
 8003cba:	687b      	ldr	r3, [r7, #4]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f107 0714 	add.w	r7, r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <strncpy>:

char *strncpy(char *dest, const char *src, size_t n)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
	const char *s = src;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	617b      	str	r3, [r7, #20]
	char *d = dest;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	613b      	str	r3, [r7, #16]
	while (n-- && (*d++ = *s++));
 8003cdc:	bf00      	nop
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2300      	moveq	r3, #0
 8003ce6:	2301      	movne	r3, #1
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003cf0:	607a      	str	r2, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d014      	beq.n	8003d20 <strncpy+0x58>
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	781a      	ldrb	r2, [r3, #0]
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bf0c      	ite	eq
 8003d06:	2300      	moveq	r3, #0
 8003d08:	2301      	movne	r3, #1
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	f102 0201 	add.w	r2, r2, #1
 8003d12:	613a      	str	r2, [r7, #16]
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	f102 0201 	add.w	r2, r2, #1
 8003d1a:	617a      	str	r2, [r7, #20]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1de      	bne.n	8003cde <strncpy+0x16>
	return dest;
 8003d20:	68fb      	ldr	r3, [r7, #12]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	f107 071c 	add.w	r7, r7, #28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop

08003d30 <strcmp>:

int strcmp(const char *a, const char *b)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
        while(*a && (*a==*b))
 8003d3a:	e007      	b.n	8003d4c <strcmp+0x1c>
                ++a, ++b;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f103 0301 	add.w	r3, r3, #1
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	f103 0301 	add.w	r3, r3, #1
 8003d4a:	603b      	str	r3, [r7, #0]
	return dest;
}

int strcmp(const char *a, const char *b)
{
        while(*a && (*a==*b))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <strcmp+0x30>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	781a      	ldrb	r2, [r3, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d0ed      	beq.n	8003d3c <strcmp+0xc>
                ++a, ++b;
        return *a-*b;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	461a      	mov	r2, r3
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	1ad3      	subs	r3, r2, r3
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f107 070c 	add.w	r7, r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bc80      	pop	{r7}
 8003d76:	4770      	bx	lr

08003d78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f103 0208 	add.w	r2, r3, #8
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f103 0208 	add.w	r2, r3, #8
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f103 0208 	add.w	r2, r3, #8
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
}
 8003dae:	f107 070c 	add.w	r7, r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr

08003db8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	611a      	str	r2, [r3, #16]
}
 8003dc8:	f107 070c 	add.w	r7, r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop

08003dd4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f103 0201 	add.w	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	601a      	str	r2, [r3, #0]
}
 8003e12:	f107 0714 	add.w	r7, r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr

08003e1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e32:	d103      	bne.n	8003e3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	e00d      	b.n	8003e58 <vListInsert+0x3c>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f103 0308 	add.w	r3, r3, #8
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	e002      	b.n	8003e4c <vListInsert+0x30>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d9f6      	bls.n	8003e46 <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f103 0201 	add.w	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	601a      	str	r2, [r3, #0]
}
 8003e86:	f107 0714 	add.w	r7, r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6892      	ldr	r2, [r2, #8]
 8003ea6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6852      	ldr	r2, [r2, #4]
 8003eb0:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d103      	bne.n	8003ec4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	f107 0714 	add.w	r7, r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr

08003ee8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
 8003ef6:	f001 fffd 	bl	8005ef4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	68f9      	ldr	r1, [r7, #12]
 8003f04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	18d2      	adds	r2, r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f28:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003f2c:	68f9      	ldr	r1, [r7, #12]
 8003f2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	18d2      	adds	r2, r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f40:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f48:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10f      	bne.n	8003f70 <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d017      	beq.n	8003f88 <xQueueGenericReset+0xa0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f103 0310 	add.w	r3, r3, #16
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 feda 	bl	8004d18 <xTaskRemoveFromEventList>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d10e      	bne.n	8003f88 <xQueueGenericReset+0xa0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f6a:	f001 ffb3 	bl	8005ed4 <vPortYield>
 8003f6e:	e00b      	b.n	8003f88 <xQueueGenericReset+0xa0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f103 0310 	add.w	r3, r3, #16
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fefe 	bl	8003d78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff fef8 	bl	8003d78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f88:	f001 ffca 	bl	8005f20 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f8c:	f04f 0301 	mov.w	r3, #1
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	f107 0710 	add.w	r7, r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop

08003f9c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d02d      	beq.n	8004012 <xQueueGenericCreate+0x76>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 8003fb6:	f04f 0054 	mov.w	r0, #84	; 0x54
 8003fba:	f001 fe89 	bl	8005cd0 <pvPortMalloc>
 8003fbe:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d025      	beq.n	8004012 <xQueueGenericCreate+0x76>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	fb02 f303 	mul.w	r3, r2, r3
 8003fce:	f103 0301 	add.w	r3, r3, #1
 8003fd2:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
 8003fd4:	6978      	ldr	r0, [r7, #20]
 8003fd6:	f001 fe7b 	bl	8005cd0 <pvPortMalloc>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d011      	beq.n	800400c <xQueueGenericCreate+0x70>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ff4:	69b8      	ldr	r0, [r7, #24]
 8003ff6:	f04f 0101 	mov.w	r1, #1
 8003ffa:	f7ff ff75 	bl	8003ee8 <xQueueGenericReset>

				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	79fa      	ldrb	r2, [r7, #7]
 8004002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	61fb      	str	r3, [r7, #28]
 800400a:	e002      	b.n	8004012 <xQueueGenericCreate+0x76>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
 800400c:	69b8      	ldr	r0, [r7, #24]
 800400e:	f001 febf 	bl	8005d90 <vPortFree>
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );

	return xReturn;
 8004012:	69fb      	ldr	r3, [r7, #28]
}
 8004014:	4618      	mov	r0, r3
 8004016:	f107 0720 	add.w	r7, r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop

08004020 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
 800402a:	f04f 0054 	mov.w	r0, #84	; 0x54
 800402e:	f001 fe4f 	bl	8005cd0 <pvPortMalloc>
 8004032:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d03c      	beq.n	80040b4 <xQueueCreateMutex+0x94>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
			pxNewQueue->u.pcReadFrom = NULL;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f04f 0201 	mov.w	r2, #1
 8004068:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004078:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004080:	649a      	str	r2, [r3, #72]	; 0x48

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	79fa      	ldrb	r2, [r7, #7]
 8004086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f103 0310 	add.w	r3, r3, #16
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff fe71 	bl	8003d78 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fe6b 	bl	8003d78 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f04f 0100 	mov.w	r1, #0
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	f000 f806 	bl	80040c0 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
 80040b4:	68fb      	ldr	r3, [r7, #12]
	}
 80040b6:	4618      	mov	r0, r3
 80040b8:	f107 0710 	add.w	r7, r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	e000      	b.n	80040dc <xQueueGenericSend+0x1c>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80040da:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040dc:	f001 ff0a 	bl	8005ef4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d302      	bcc.n	80040f2 <xQueueGenericSend+0x32>
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d118      	bne.n	8004124 <xQueueGenericSend+0x64>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040f2:	69b8      	ldr	r0, [r7, #24]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	f000 f988 	bl	800440c <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <xQueueGenericSend+0x5a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fe04 	bl	8004d18 <xTaskRemoveFromEventList>
 8004110:	4603      	mov	r3, r0
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <xQueueGenericSend+0x5a>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004116:	f001 fedd 	bl	8005ed4 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800411a:	f001 ff01 	bl	8005f20 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 800411e:	f04f 0301 	mov.w	r3, #1
 8004122:	e05d      	b.n	80041e0 <xQueueGenericSend+0x120>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d104      	bne.n	8004134 <xQueueGenericSend+0x74>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800412a:	f001 fef9 	bl	8005f20 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	e055      	b.n	80041e0 <xQueueGenericSend+0x120>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d107      	bne.n	800414a <xQueueGenericSend+0x8a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800413a:	f107 0310 	add.w	r3, r7, #16
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fe52 	bl	8004de8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004144:	f04f 0301 	mov.w	r3, #1
 8004148:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800414a:	f001 fee9 	bl	8005f20 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800414e:	f000 fb7d 	bl	800484c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004152:	f001 fecf 	bl	8005ef4 <vPortEnterCritical>
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800415e:	d103      	bne.n	8004168 <xQueueGenericSend+0xa8>
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	645a      	str	r2, [r3, #68]	; 0x44
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800416c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004170:	d103      	bne.n	800417a <xQueueGenericSend+0xba>
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	649a      	str	r2, [r3, #72]	; 0x48
 800417a:	f001 fed1 	bl	8005f20 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800417e:	f107 0210 	add.w	r2, r7, #16
 8004182:	f107 0304 	add.w	r3, r7, #4
 8004186:	4610      	mov	r0, r2
 8004188:	4619      	mov	r1, r3
 800418a:	f000 fe45 	bl	8004e18 <xTaskCheckForTimeOut>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d11e      	bne.n	80041d2 <xQueueGenericSend+0x112>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004194:	69b8      	ldr	r0, [r7, #24]
 8004196:	f000 fa39 	bl	800460c <prvIsQueueFull>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d012      	beq.n	80041c6 <xQueueGenericSend+0x106>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f103 0210 	add.w	r2, r3, #16
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	f000 fd78 	bl	8004ca0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041b0:	69b8      	ldr	r0, [r7, #24]
 80041b2:	f000 f9c1 	bl	8004538 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041b6:	f000 fb5b 	bl	8004870 <xTaskResumeAll>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d18c      	bne.n	80040da <xQueueGenericSend+0x1a>
				{
					portYIELD_WITHIN_API();
 80041c0:	f001 fe88 	bl	8005ed4 <vPortYield>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80041c4:	e789      	b.n	80040da <xQueueGenericSend+0x1a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041c6:	69b8      	ldr	r0, [r7, #24]
 80041c8:	f000 f9b6 	bl	8004538 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041cc:	f000 fb50 	bl	8004870 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
 80041d0:	e783      	b.n	80040da <xQueueGenericSend+0x1a>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041d2:	69b8      	ldr	r0, [r7, #24]
 80041d4:	f000 f9b0 	bl	8004538 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041d8:	f000 fb4a 	bl	8004870 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80041dc:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	f107 0720 	add.w	r7, r7, #32
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop

080041ec <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	61bb      	str	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041fe:	f001 fea9 	bl	8005f54 <ulPortSetInterruptMask>
 8004202:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	429a      	cmp	r2, r3
 800420e:	d302      	bcc.n	8004216 <xQueueGenericSendFromISR+0x2a>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d128      	bne.n	8004268 <xQueueGenericSendFromISR+0x7c>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004216:	69b8      	ldr	r0, [r7, #24]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	f000 f8f6 	bl	800440c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004228:	d114      	bne.n	8004254 <xQueueGenericSendFromISR+0x68>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	2b00      	cmp	r3, #0
 8004230:	d016      	beq.n	8004260 <xQueueGenericSendFromISR+0x74>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8004238:	4618      	mov	r0, r3
 800423a:	f000 fd6d 	bl	8004d18 <xTaskRemoveFromEventList>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00d      	beq.n	8004260 <xQueueGenericSendFromISR+0x74>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <xQueueGenericSendFromISR+0x74>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f04f 0201 	mov.w	r2, #1
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	e005      	b.n	8004260 <xQueueGenericSendFromISR+0x74>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004258:	f103 0201 	add.w	r2, r3, #1
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
 8004260:	f04f 0301 	mov.w	r3, #1
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	e002      	b.n	800426e <xQueueGenericSendFromISR+0x82>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800426e:	6978      	ldr	r0, [r7, #20]
 8004270:	f001 fe7a 	bl	8005f68 <vPortClearInterruptMask>

	return xReturn;
 8004274:	69fb      	ldr	r3, [r7, #28]
}
 8004276:	4618      	mov	r0, r3
 8004278:	f107 0720 	add.w	r7, r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08a      	sub	sp, #40	; 0x28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	623b      	str	r3, [r7, #32]
 8004298:	e000      	b.n	800429c <xQueueGenericReceive+0x1c>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 800429a:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800429c:	f001 fe2a 	bl	8005ef4 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d03f      	beq.n	8004328 <xQueueGenericReceive+0xa8>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042ae:	6a38      	ldr	r0, [r7, #32]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	f000 f919 	bl	80044e8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d11e      	bne.n	80042fa <xQueueGenericReceive+0x7a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d104      	bne.n	80042da <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) xTaskGetCurrentTaskHandle(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80042d0:	f000 ffb8 	bl	8005244 <xTaskGetCurrentTaskHandle>
 80042d4:	4602      	mov	r2, r0
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01d      	beq.n	800431e <xQueueGenericReceive+0x9e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	f103 0310 	add.w	r3, r3, #16
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 fd15 	bl	8004d18 <xTaskRemoveFromEventList>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d114      	bne.n	800431e <xQueueGenericReceive+0x9e>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80042f4:	f001 fdee 	bl	8005ed4 <vPortYield>
 80042f8:	e011      	b.n	800431e <xQueueGenericReceive+0x9e>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <xQueueGenericReceive+0x9e>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fd02 	bl	8004d18 <xTaskRemoveFromEventList>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <xQueueGenericReceive+0x9e>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800431a:	f001 fddb 	bl	8005ed4 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800431e:	f001 fdff 	bl	8005f20 <vPortExitCritical>
				return pdPASS;
 8004322:	f04f 0301 	mov.w	r3, #1
 8004326:	e06b      	b.n	8004400 <xQueueGenericReceive+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d104      	bne.n	8004338 <xQueueGenericReceive+0xb8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800432e:	f001 fdf7 	bl	8005f20 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	e063      	b.n	8004400 <xQueueGenericReceive+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	2b00      	cmp	r3, #0
 800433c:	d107      	bne.n	800434e <xQueueGenericReceive+0xce>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800433e:	f107 0314 	add.w	r3, r7, #20
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fd50 	bl	8004de8 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004348:	f04f 0301 	mov.w	r3, #1
 800434c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800434e:	f001 fde7 	bl	8005f20 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004352:	f000 fa7b 	bl	800484c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004356:	f001 fdcd 	bl	8005ef4 <vPortEnterCritical>
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004362:	d103      	bne.n	800436c <xQueueGenericReceive+0xec>
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	645a      	str	r2, [r3, #68]	; 0x44
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004374:	d103      	bne.n	800437e <xQueueGenericReceive+0xfe>
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	649a      	str	r2, [r3, #72]	; 0x48
 800437e:	f001 fdcf 	bl	8005f20 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004382:	f107 0214 	add.w	r2, r7, #20
 8004386:	f107 0304 	add.w	r3, r7, #4
 800438a:	4610      	mov	r0, r2
 800438c:	4619      	mov	r1, r3
 800438e:	f000 fd43 	bl	8004e18 <xTaskCheckForTimeOut>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d12c      	bne.n	80043f2 <xQueueGenericReceive+0x172>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004398:	6a38      	ldr	r0, [r7, #32]
 800439a:	f000 f91d 	bl	80045d8 <prvIsQueueEmpty>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d020      	beq.n	80043e6 <xQueueGenericReceive+0x166>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d108      	bne.n	80043be <xQueueGenericReceive+0x13e>
					{
						taskENTER_CRITICAL();
 80043ac:	f001 fda2 	bl	8005ef4 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 ff55 	bl	8005264 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 80043ba:	f001 fdb1 	bl	8005f20 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4610      	mov	r0, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	f000 fc69 	bl	8004ca0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043ce:	6a38      	ldr	r0, [r7, #32]
 80043d0:	f000 f8b2 	bl	8004538 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043d4:	f000 fa4c 	bl	8004870 <xTaskResumeAll>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f47f af5d 	bne.w	800429a <xQueueGenericReceive+0x1a>
				{
					portYIELD_WITHIN_API();
 80043e0:	f001 fd78 	bl	8005ed4 <vPortYield>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 80043e4:	e759      	b.n	800429a <xQueueGenericReceive+0x1a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043e6:	6a38      	ldr	r0, [r7, #32]
 80043e8:	f000 f8a6 	bl	8004538 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043ec:	f000 fa40 	bl	8004870 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
 80043f0:	e753      	b.n	800429a <xQueueGenericReceive+0x1a>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80043f2:	6a38      	ldr	r0, [r7, #32]
 80043f4:	f000 f8a0 	bl	8004538 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043f8:	f000 fa3a 	bl	8004870 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 80043fc:	f04f 0300 	mov.w	r3, #0
		}
	}
}
 8004400:	4618      	mov	r0, r3
 8004402:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop

0800440c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10d      	bne.n	800443c <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d155      	bne.n	80044d4 <prvCopyDataToQueue+0xc8>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4618      	mov	r0, r3
 800442e:	f000 ff91 	bl	8005354 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	e04b      	b.n	80044d4 <prvCopyDataToQueue+0xc8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d11a      	bne.n	8004478 <prvCopyDataToQueue+0x6c>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	4610      	mov	r0, r2
 800444c:	68b9      	ldr	r1, [r7, #8]
 800444e:	461a      	mov	r2, r3
 8004450:	f7ff fb8e 	bl	8003b70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	18d2      	adds	r2, r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	429a      	cmp	r2, r3
 800446c:	d332      	bcc.n	80044d4 <prvCopyDataToQueue+0xc8>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	609a      	str	r2, [r3, #8]
 8004476:	e02d      	b.n	80044d4 <prvCopyDataToQueue+0xc8>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	4610      	mov	r0, r2
 8004482:	68b9      	ldr	r1, [r7, #8]
 8004484:	461a      	mov	r2, r3
 8004486:	f7ff fb73 	bl	8003b70 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f1c3 0300 	rsb	r3, r3, #0
 8004496:	18d2      	adds	r2, r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d208      	bcs.n	80044ba <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	f1c3 0300 	rsb	r3, r3, #0
 80044b4:	18d2      	adds	r2, r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d109      	bne.n	80044d4 <prvCopyDataToQueue+0xc8>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <prvCopyDataToQueue+0xc8>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	f103 0201 	add.w	r2, r3, #1
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	639a      	str	r2, [r3, #56]	; 0x38
}
 80044e0:	f107 0710 	add.w	r7, r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d019      	beq.n	800452e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	18d2      	adds	r2, r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	429a      	cmp	r2, r3
 8004512:	d303      	bcc.n	800451c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	6838      	ldr	r0, [r7, #0]
 8004526:	4611      	mov	r1, r2
 8004528:	461a      	mov	r2, r3
 800452a:	f7ff fb21 	bl	8003b70 <memcpy>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800452e:	f107 0708 	add.w	r7, r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop

08004538 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004540:	f001 fcd8 	bl	8005ef4 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8004544:	e014      	b.n	8004570 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	2b00      	cmp	r3, #0
 800454c:	d015      	beq.n	800457a <prvUnlockQueue+0x42>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8004554:	4618      	mov	r0, r3
 8004556:	f000 fbdf 	bl	8004d18 <xTaskRemoveFromEventList>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <prvUnlockQueue+0x2c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 8004560:	f000 fca6 	bl	8004eb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004568:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004574:	2b00      	cmp	r3, #0
 8004576:	dce6      	bgt.n	8004546 <prvUnlockQueue+0xe>
 8004578:	e000      	b.n	800457c <prvUnlockQueue+0x44>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
 800457a:	bf00      	nop
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004582:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8004584:	f001 fccc 	bl	8005f20 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004588:	f001 fcb4 	bl	8005ef4 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800458c:	e014      	b.n	80045b8 <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d015      	beq.n	80045c2 <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f103 0310 	add.w	r3, r3, #16
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fbbb 	bl	8004d18 <xTaskRemoveFromEventList>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
 80045a8:	f000 fc82 	bl	8004eb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	2b00      	cmp	r3, #0
 80045be:	dce6      	bgt.n	800458e <prvUnlockQueue+0x56>
 80045c0:	e000      	b.n	80045c4 <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
 80045c2:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045ca:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80045cc:	f001 fca8 	bl	8005f20 <vPortExitCritical>
}
 80045d0:	f107 0708 	add.w	r7, r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045e0:	f001 fc88 	bl	8005ef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d103      	bne.n	80045f4 <prvIsQueueEmpty+0x1c>
		{
			xReturn = pdTRUE;
 80045ec:	f04f 0301 	mov.w	r3, #1
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	e002      	b.n	80045fa <prvIsQueueEmpty+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045fa:	f001 fc91 	bl	8005f20 <vPortExitCritical>

	return xReturn;
 80045fe:	68fb      	ldr	r3, [r7, #12]
}
 8004600:	4618      	mov	r0, r3
 8004602:	f107 0710 	add.w	r7, r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop

0800460c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004614:	f001 fc6e 	bl	8005ef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004620:	429a      	cmp	r2, r3
 8004622:	d103      	bne.n	800462c <prvIsQueueFull+0x20>
		{
			xReturn = pdTRUE;
 8004624:	f04f 0301 	mov.w	r3, #1
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	e002      	b.n	8004632 <prvIsQueueFull+0x26>
		}
		else
		{
			xReturn = pdFALSE;
 800462c:	f04f 0300 	mov.w	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004632:	f001 fc75 	bl	8005f20 <vPortExitCritical>

	return xReturn;
 8004636:	68fb      	ldr	r3, [r7, #12]
}
 8004638:	4618      	mov	r0, r3
 800463a:	f107 0710 	add.w	r7, r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop

08004644 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08a      	sub	sp, #40	; 0x28
 8004648:	af02      	add	r7, sp, #8
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8004654:	88fb      	ldrh	r3, [r7, #6]
 8004656:	4618      	mov	r0, r3
 8004658:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800465a:	f000 fd7d 	bl	8005158 <prvAllocateTCBAndStack>
 800465e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 809b 	beq.w	800479e <xTaskGenericCreate+0x15a>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800466c:	88fb      	ldrh	r3, [r7, #6]
 800466e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004672:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004676:	18d3      	adds	r3, r2, r3
 8004678:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f023 0307 	bic.w	r3, r3, #7
 8004680:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8004682:	88fb      	ldrh	r3, [r7, #6]
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	69b8      	ldr	r0, [r7, #24]
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800468c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468e:	f000 fc2d 	bl	8004eec <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004692:	6978      	ldr	r0, [r7, #20]
 8004694:	68f9      	ldr	r1, [r7, #12]
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	f001 fb84 	bl	8005da4 <pxPortInitialiseStack>
 800469c:	4602      	mov	r2, r0
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 80046ae:	f001 fc21 	bl	8005ef4 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80046b2:	f64f 039c 	movw	r3, #63644	; 0xf89c
 80046b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f103 0201 	add.w	r2, r3, #1
 80046c0:	f64f 039c 	movw	r3, #63644	; 0xf89c
 80046c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046c8:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 80046ca:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 80046ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10f      	bne.n	80046f8 <xTaskGenericCreate+0xb4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80046d8:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 80046dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046e4:	f64f 039c 	movw	r3, #63644	; 0xf89c
 80046e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d118      	bne.n	8004724 <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 80046f2:	f000 fc4b 	bl	8004f8c <prvInitialiseTaskLists>
 80046f6:	e015      	b.n	8004724 <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80046f8:	f64f 03a8 	movw	r3, #63656	; 0xf8a8
 80046fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10e      	bne.n	8004724 <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8004706:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 800470a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	429a      	cmp	r2, r3
 8004716:	d805      	bhi.n	8004724 <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
 8004718:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 800471c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8004724:	f64f 03b8 	movw	r3, #63672	; 0xf8b8
 8004728:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f103 0201 	add.w	r2, r3, #1
 8004732:	f64f 03b8 	movw	r3, #63672	; 0xf8b8
 8004736:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800473a:	601a      	str	r2, [r3, #0]

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800473c:	f64f 03b8 	movw	r3, #63672	; 0xf8b8
 8004740:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	645a      	str	r2, [r3, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474e:	f64f 03a4 	movw	r3, #63652	; 0xf8a4
 8004752:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d906      	bls.n	800476a <xTaskGenericCreate+0x126>
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004760:	f64f 03a4 	movw	r3, #63652	; 0xf8a4
 8004764:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476e:	4613      	mov	r3, r2
 8004770:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004774:	189b      	adds	r3, r3, r2
 8004776:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800477a:	f24f 72c8 	movw	r2, #63432	; 0xf7c8
 800477e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004782:	189a      	adds	r2, r3, r2
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	f103 0304 	add.w	r3, r3, #4
 800478a:	4610      	mov	r0, r2
 800478c:	4619      	mov	r1, r3
 800478e:	f7ff fb21 	bl	8003dd4 <vListInsertEnd>

			xReturn = pdPASS;
 8004792:	f04f 0301 	mov.w	r3, #1
 8004796:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8004798:	f001 fbc2 	bl	8005f20 <vPortExitCritical>
 800479c:	e002      	b.n	80047a4 <xTaskGenericCreate+0x160>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800479e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047a2:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d111      	bne.n	80047ce <xTaskGenericCreate+0x18a>
	{
		if( xSchedulerRunning != pdFALSE )
 80047aa:	f64f 03a8 	movw	r3, #63656	; 0xf8a8
 80047ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <xTaskGenericCreate+0x18a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 80047b8:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 80047bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d201      	bcs.n	80047ce <xTaskGenericCreate+0x18a>
			{
				taskYIELD_IF_USING_PREEMPTION();
 80047ca:	f001 fb83 	bl	8005ed4 <vPortYield>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
 80047ce:	69fb      	ldr	r3, [r7, #28]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	f107 0720 	add.w	r7, r7, #32
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop

080047dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 80047e2:	f04f 0300 	mov.w	r3, #0
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	9302      	str	r3, [sp, #8]
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	9303      	str	r3, [sp, #12]
 80047fa:	f644 60c9 	movw	r0, #20169	; 0x4ec9
 80047fe:	f6c0 0000 	movt	r0, #2048	; 0x800
 8004802:	f646 01d0 	movw	r1, #26832	; 0x68d0
 8004806:	f6c0 0100 	movt	r1, #2048	; 0x800
 800480a:	f04f 0280 	mov.w	r2, #128	; 0x80
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	f7ff ff17 	bl	8004644 <xTaskGenericCreate>
 8004816:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d111      	bne.n	8004842 <vTaskStartScheduler+0x66>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800481e:	f001 fb99 	bl	8005f54 <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
 8004822:	f64f 03a8 	movw	r3, #63656	; 0xf8a8
 8004826:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800482a:	f04f 0201 	mov.w	r2, #1
 800482e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004830:	f64f 03a0 	movw	r3, #63648	; 0xf8a0
 8004834:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800483e:	f001 fb0f 	bl	8005e60 <xPortStartScheduler>
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8004842:	f107 0708 	add.w	r7, r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop

0800484c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004850:	f64f 03bc 	movw	r3, #63676	; 0xf8bc
 8004854:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f103 0201 	add.w	r2, r3, #1
 800485e:	f64f 03bc 	movw	r3, #63676	; 0xf8bc
 8004862:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004866:	601a      	str	r2, [r3, #0]
}
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop

08004870 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800487c:	f001 fb3a 	bl	8005ef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004880:	f64f 03bc 	movw	r3, #63676	; 0xf8bc
 8004884:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800488e:	f64f 03bc 	movw	r3, #63676	; 0xf8bc
 8004892:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004896:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004898:	f64f 03bc 	movw	r3, #63676	; 0xf8bc
 800489c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f040 808b 	bne.w	80049be <xTaskResumeAll+0x14e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048a8:	f64f 039c 	movw	r3, #63644	; 0xf89c
 80048ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 8083 	beq.w	80049be <xTaskResumeAll+0x14e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048b8:	e047      	b.n	800494a <xTaskResumeAll+0xda>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80048ba:	f64f 035c 	movw	r3, #63580	; 0xf85c
 80048be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	f103 0318 	add.w	r3, r3, #24
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7ff fade 	bl	8003e90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	f103 0304 	add.w	r3, r3, #4
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff fad8 	bl	8003e90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e4:	f64f 03a4 	movw	r3, #63652	; 0xf8a4
 80048e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d906      	bls.n	8004900 <xTaskResumeAll+0x90>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f6:	f64f 03a4 	movw	r3, #63652	; 0xf8a4
 80048fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004904:	4613      	mov	r3, r2
 8004906:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800490a:	189b      	adds	r3, r3, r2
 800490c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004910:	f24f 72c8 	movw	r2, #63432	; 0xf7c8
 8004914:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004918:	189a      	adds	r2, r3, r2
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	f103 0304 	add.w	r3, r3, #4
 8004920:	4610      	mov	r0, r2
 8004922:	4619      	mov	r1, r3
 8004924:	f7ff fa56 	bl	8003dd4 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492c:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 8004930:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	429a      	cmp	r2, r3
 800493a:	d306      	bcc.n	800494a <xTaskResumeAll+0xda>
					{
						xYieldPending = pdTRUE;
 800493c:	f64f 03b0 	movw	r3, #63664	; 0xf8b0
 8004940:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004944:	f04f 0201 	mov.w	r2, #1
 8004948:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800494a:	f64f 035c 	movw	r3, #63580	; 0xf85c
 800494e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1b0      	bne.n	80048ba <xTaskResumeAll+0x4a>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8004958:	f64f 03ac 	movw	r3, #63660	; 0xf8ac
 800495c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01f      	beq.n	80049a6 <xTaskResumeAll+0x136>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8004966:	e017      	b.n	8004998 <xTaskResumeAll+0x128>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8004968:	f000 f832 	bl	80049d0 <xTaskIncrementTick>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d006      	beq.n	8004980 <xTaskResumeAll+0x110>
						{
							xYieldPending = pdTRUE;
 8004972:	f64f 03b0 	movw	r3, #63664	; 0xf8b0
 8004976:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800497a:	f04f 0201 	mov.w	r2, #1
 800497e:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8004980:	f64f 03ac 	movw	r3, #63660	; 0xf8ac
 8004984:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800498e:	f64f 03ac 	movw	r3, #63660	; 0xf8ac
 8004992:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004996:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8004998:	f64f 03ac 	movw	r3, #63660	; 0xf8ac
 800499c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1e0      	bne.n	8004968 <xTaskResumeAll+0xf8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 80049a6:	f64f 03b0 	movw	r3, #63664	; 0xf8b0
 80049aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d104      	bne.n	80049be <xTaskResumeAll+0x14e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049b4:	f04f 0301 	mov.w	r3, #1
 80049b8:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049ba:	f001 fa8b 	bl	8005ed4 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049be:	f001 faaf 	bl	8005f20 <vPortExitCritical>

	return xAlreadyYielded;
 80049c2:	687b      	ldr	r3, [r7, #4]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	f107 0708 	add.w	r7, r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop

080049d0 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049dc:	f64f 03bc 	movw	r3, #63676	; 0xf8bc
 80049e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f040 80d3 	bne.w	8004b92 <xTaskIncrementTick+0x1c2>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 80049ec:	f64f 03a0 	movw	r3, #63648	; 0xf8a0
 80049f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f103 0201 	add.w	r2, r3, #1
 80049fa:	f64f 03a0 	movw	r3, #63648	; 0xf8a0
 80049fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a02:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004a04:	f64f 03a0 	movw	r3, #63648	; 0xf8a0
 8004a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d123      	bne.n	8004a5e <xTaskIncrementTick+0x8e>
			{
				taskSWITCH_DELAYED_LISTS();
 8004a16:	f64f 0354 	movw	r3, #63572	; 0xf854
 8004a1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	f64f 0358 	movw	r3, #63576	; 0xf858
 8004a26:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	f64f 0354 	movw	r3, #63572	; 0xf854
 8004a30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	f64f 0358 	movw	r3, #63576	; 0xf858
 8004a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	f64f 03b4 	movw	r3, #63668	; 0xf8b4
 8004a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f103 0201 	add.w	r2, r3, #1
 8004a50:	f64f 03b4 	movw	r3, #63668	; 0xf8b4
 8004a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	f000 fbc5 	bl	80051e8 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8004a5e:	f240 1398 	movw	r3, #408	; 0x198
 8004a62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d370      	bcc.n	8004b50 <xTaskIncrementTick+0x180>
 8004a6e:	e000      	b.n	8004a72 <xTaskIncrementTick+0xa2>
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 8004a70:	bf00      	nop
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a72:	f64f 0354 	movw	r3, #63572	; 0xf854
 8004a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d102      	bne.n	8004a88 <xTaskIncrementTick+0xb8>
 8004a82:	f04f 0301 	mov.w	r3, #1
 8004a86:	e001      	b.n	8004a8c <xTaskIncrementTick+0xbc>
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d007      	beq.n	8004aa0 <xTaskIncrementTick+0xd0>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8004a90:	f240 1398 	movw	r3, #408	; 0x198
 8004a94:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004a98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a9c:	601a      	str	r2, [r3, #0]
						break;
 8004a9e:	e057      	b.n	8004b50 <xTaskIncrementTick+0x180>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004aa0:	f64f 0354 	movw	r3, #63572	; 0xf854
 8004aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d206      	bcs.n	8004acc <xTaskIncrementTick+0xfc>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8004abe:	f240 1398 	movw	r3, #408	; 0x198
 8004ac2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	601a      	str	r2, [r3, #0]
							break;
 8004aca:	e041      	b.n	8004b50 <xTaskIncrementTick+0x180>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f103 0304 	add.w	r3, r3, #4
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff f9dc 	bl	8003e90 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <xTaskIncrementTick+0x11c>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f103 0318 	add.w	r3, r3, #24
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff f9d2 	bl	8003e90 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af0:	f64f 03a4 	movw	r3, #63652	; 0xf8a4
 8004af4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d906      	bls.n	8004b0c <xTaskIncrementTick+0x13c>
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b02:	f64f 03a4 	movw	r3, #63652	; 0xf8a4
 8004b06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b10:	4613      	mov	r3, r2
 8004b12:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004b16:	189b      	adds	r3, r3, r2
 8004b18:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004b1c:	f24f 72c8 	movw	r2, #63432	; 0xf7c8
 8004b20:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004b24:	189a      	adds	r2, r3, r2
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f103 0304 	add.w	r3, r3, #4
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	4619      	mov	r1, r3
 8004b30:	f7ff f950 	bl	8003dd4 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b38:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 8004b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d393      	bcc.n	8004a70 <xTaskIncrementTick+0xa0>
							{
								xSwitchRequired = pdTRUE;
 8004b48:	f04f 0301 	mov.w	r3, #1
 8004b4c:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
 8004b4e:	e78f      	b.n	8004a70 <xTaskIncrementTick+0xa0>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b50:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 8004b54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b5c:	f24f 72c8 	movw	r2, #63432	; 0xf7c8
 8004b60:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004b64:	460b      	mov	r3, r1
 8004b66:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004b6a:	185b      	adds	r3, r3, r1
 8004b6c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004b70:	18d3      	adds	r3, r2, r3
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d902      	bls.n	8004b7e <xTaskIncrementTick+0x1ae>
			{
				xSwitchRequired = pdTRUE;
 8004b78:	f04f 0301 	mov.w	r3, #1
 8004b7c:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8004b7e:	f64f 03ac 	movw	r3, #63660	; 0xf8ac
 8004b82:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d110      	bne.n	8004bae <xTaskIncrementTick+0x1de>
			{
				vApplicationTickHook();
 8004b8c:	f7fd fbc4 	bl	8002318 <vApplicationTickHook>
 8004b90:	e00d      	b.n	8004bae <xTaskIncrementTick+0x1de>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004b92:	f64f 03ac 	movw	r3, #63660	; 0xf8ac
 8004b96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f103 0201 	add.w	r2, r3, #1
 8004ba0:	f64f 03ac 	movw	r3, #63660	; 0xf8ac
 8004ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ba8:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8004baa:	f7fd fbb5 	bl	8002318 <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004bae:	f64f 03b0 	movw	r3, #63664	; 0xf8b0
 8004bb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <xTaskIncrementTick+0x1f2>
		{
			xSwitchRequired = pdTRUE;
 8004bbc:	f04f 0301 	mov.w	r3, #1
 8004bc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004bc2:	697b      	ldr	r3, [r7, #20]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f107 0718 	add.w	r7, r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop

08004bd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bd6:	f64f 03bc 	movw	r3, #63676	; 0xf8bc
 8004bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d007      	beq.n	8004bf4 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004be4:	f64f 03b0 	movw	r3, #63664	; 0xf8b0
 8004be8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004bec:	f04f 0201 	mov.w	r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	e050      	b.n	8004c96 <vTaskSwitchContext+0xc6>
	}
	else
	{
		xYieldPending = pdFALSE;
 8004bf4:	f64f 03b0 	movw	r3, #63664	; 0xf8b0
 8004bf8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]
		#endif /* configGENERATE_RUN_TIME_STATS */

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004c02:	e00b      	b.n	8004c1c <vTaskSwitchContext+0x4c>
 8004c04:	f64f 03a4 	movw	r3, #63652	; 0xf8a4
 8004c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004c12:	f64f 03a4 	movw	r3, #63652	; 0xf8a4
 8004c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	f64f 03a4 	movw	r3, #63652	; 0xf8a4
 8004c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c24:	6819      	ldr	r1, [r3, #0]
 8004c26:	f24f 72c8 	movw	r2, #63432	; 0xf7c8
 8004c2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004c2e:	460b      	mov	r3, r1
 8004c30:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004c34:	185b      	adds	r3, r3, r1
 8004c36:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004c3a:	18d3      	adds	r3, r2, r3
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0e0      	beq.n	8004c04 <vTaskSwitchContext+0x34>
 8004c42:	f64f 03a4 	movw	r3, #63652	; 0xf8a4
 8004c46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004c52:	189b      	adds	r3, r3, r2
 8004c54:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004c58:	f24f 72c8 	movw	r2, #63432	; 0xf7c8
 8004c5c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004c60:	189b      	adds	r3, r3, r2
 8004c62:	607b      	str	r3, [r7, #4]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	605a      	str	r2, [r3, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f103 0308 	add.w	r3, r3, #8
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d104      	bne.n	8004c86 <vTaskSwitchContext+0xb6>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 8004c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004c94:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c96:	f107 070c 	add.w	r7, r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004caa:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 8004cae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f103 0318 	add.w	r3, r3, #24
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	4619      	mov	r1, r3
 8004cbc:	f7ff f8ae 	bl	8003e1c <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8004cc0:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 8004cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f103 0304 	add.w	r3, r3, #4
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff f8de 	bl	8003e90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cda:	d10e      	bne.n	8004cfa <vTaskPlaceOnEventList+0x5a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8004cdc:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 8004ce0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f103 0304 	add.w	r3, r3, #4
 8004cea:	f64f 0088 	movw	r0, #63624	; 0xf888
 8004cee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	f7ff f86e 	bl	8003dd4 <vListInsertEnd>
 8004cf8:	e00a      	b.n	8004d10 <vTaskPlaceOnEventList+0x70>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 8004cfa:	f64f 03a0 	movw	r3, #63648	; 0xf8a0
 8004cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	18d3      	adds	r3, r2, r3
 8004d08:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f9de 	bl	80050cc <prvAddCurrentTaskToDelayedList>
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d10:	f107 0710 	add.w	r7, r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f103 0318 	add.w	r3, r3, #24
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff f8ae 	bl	8003e90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d34:	f64f 03bc 	movw	r3, #63676	; 0xf8bc
 8004d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d12a      	bne.n	8004d98 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f103 0304 	add.w	r3, r3, #4
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff f8a1 	bl	8003e90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d52:	f64f 03a4 	movw	r3, #63652	; 0xf8a4
 8004d56:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d906      	bls.n	8004d6e <xTaskRemoveFromEventList+0x56>
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d64:	f64f 03a4 	movw	r3, #63652	; 0xf8a4
 8004d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d72:	4613      	mov	r3, r2
 8004d74:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004d78:	189b      	adds	r3, r3, r2
 8004d7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004d7e:	f24f 72c8 	movw	r2, #63432	; 0xf7c8
 8004d82:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004d86:	189a      	adds	r2, r3, r2
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f103 0304 	add.w	r3, r3, #4
 8004d8e:	4610      	mov	r0, r2
 8004d90:	4619      	mov	r1, r3
 8004d92:	f7ff f81f 	bl	8003dd4 <vListInsertEnd>
 8004d96:	e009      	b.n	8004dac <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f103 0318 	add.w	r3, r3, #24
 8004d9e:	f64f 005c 	movw	r0, #63580	; 0xf85c
 8004da2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004da6:	4619      	mov	r1, r3
 8004da8:	f7ff f814 	bl	8003dd4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db0:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 8004db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d90a      	bls.n	8004dd6 <xTaskRemoveFromEventList+0xbe>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004dc0:	f04f 0301 	mov.w	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004dc6:	f64f 03b0 	movw	r3, #63664	; 0xf8b0
 8004dca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004dce:	f04f 0201 	mov.w	r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e002      	b.n	8004ddc <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		xReturn = pdFALSE;
 8004dd6:	f04f 0300 	mov.w	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	f107 0710 	add.w	r7, r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004df0:	f64f 03b4 	movw	r3, #63668	; 0xf8b4
 8004df4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004dfe:	f64f 03a0 	movw	r3, #63648	; 0xf8a0
 8004e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	605a      	str	r2, [r3, #4]
}
 8004e0c:	f107 070c 	add.w	r7, r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop

08004e18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8004e22:	f001 f867 	bl	8005ef4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e26:	f64f 03a0 	movw	r3, #63648	; 0xf8a0
 8004e2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e3a:	d103      	bne.n	8004e44 <xTaskCheckForTimeOut+0x2c>
			{
				xReturn = pdFALSE;
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	e02c      	b.n	8004e9e <xTaskCheckForTimeOut+0x86>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	f64f 03b4 	movw	r3, #63668	; 0xf8b4
 8004e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d008      	beq.n	8004e68 <xTaskCheckForTimeOut+0x50>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d803      	bhi.n	8004e68 <xTaskCheckForTimeOut+0x50>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8004e60:	f04f 0301 	mov.w	r3, #1
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	e01a      	b.n	8004e9e <xTaskCheckForTimeOut+0x86>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	1ad2      	subs	r2, r2, r3
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d20f      	bcs.n	8004e98 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6859      	ldr	r1, [r3, #4]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	1acb      	subs	r3, r1, r3
 8004e84:	18d2      	adds	r2, r2, r3
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff ffac 	bl	8004de8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	e002      	b.n	8004e9e <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
 8004e98:	f04f 0301 	mov.w	r3, #1
 8004e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e9e:	f001 f83f 	bl	8005f20 <vPortExitCritical>

	return xReturn;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f107 0710 	add.w	r7, r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop

08004eb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004eb4:	f64f 03b0 	movw	r3, #63664	; 0xf8b0
 8004eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ebc:	f04f 0201 	mov.w	r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]
}
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr

08004ec8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	e000      	b.n	8004ed4 <prvIdleTask+0xc>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8004ed2:	bf00      	nop
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 8004ed4:	f000 f8ac 	bl	8005030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ed8:	f24f 73c8 	movw	r3, #63432	; 0xf7c8
 8004edc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d9f5      	bls.n	8004ed2 <prvIdleTask+0xa>
			{
				taskYIELD();
 8004ee6:	f000 fff5 	bl	8005ed4 <vPortYield>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
 8004eea:	e7f2      	b.n	8004ed2 <prvIdleTask+0xa>

08004eec <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	e013      	b.n	8004f2a <prvInitialiseTCBVariables+0x3e>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	18d3      	adds	r3, r2, r3
 8004f08:	781a      	ldrb	r2, [r3, #0]
 8004f0a:	68f9      	ldr	r1, [r7, #12]
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	18cb      	adds	r3, r1, r3
 8004f10:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8004f14:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	18d3      	adds	r3, r2, r3
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <prvInitialiseTCBVariables+0x46>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f103 0301 	add.w	r3, r3, #1
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	2b0f      	cmp	r3, #15
 8004f2e:	d9e8      	bls.n	8004f02 <prvInitialiseTCBVariables+0x16>
 8004f30:	e000      	b.n	8004f34 <prvInitialiseTCBVariables+0x48>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
 8004f32:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d902      	bls.n	8004f4a <prvInitialiseTCBVariables+0x5e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f44:	f04f 0304 	mov.w	r3, #4
 8004f48:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f103 0304 	add.w	r3, r3, #4
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fe ff2b 	bl	8003db8 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f103 0318 	add.w	r3, r3, #24
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fe ff25 	bl	8003db8 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f1c3 0205 	rsb	r2, r3, #5
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
 8004f84:	f107 0718 	add.w	r7, r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f92:	f04f 0300 	mov.w	r3, #0
 8004f96:	607b      	str	r3, [r7, #4]
 8004f98:	e012      	b.n	8004fc0 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004fa2:	189b      	adds	r3, r3, r2
 8004fa4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004fa8:	f24f 72c8 	movw	r2, #63432	; 0xf7c8
 8004fac:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004fb0:	189b      	adds	r3, r3, r2
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fe fee0 	bl	8003d78 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f103 0301 	add.w	r3, r3, #1
 8004fbe:	607b      	str	r3, [r7, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d9e9      	bls.n	8004f9a <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8004fc6:	f64f 002c 	movw	r0, #63532	; 0xf82c
 8004fca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004fce:	f7fe fed3 	bl	8003d78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004fd2:	f64f 0040 	movw	r0, #63552	; 0xf840
 8004fd6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004fda:	f7fe fecd 	bl	8003d78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004fde:	f64f 005c 	movw	r0, #63580	; 0xf85c
 8004fe2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004fe6:	f7fe fec7 	bl	8003d78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004fea:	f64f 0070 	movw	r0, #63600	; 0xf870
 8004fee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004ff2:	f7fe fec1 	bl	8003d78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ff6:	f64f 0088 	movw	r0, #63624	; 0xf888
 8004ffa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004ffe:	f7fe febb 	bl	8003d78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005002:	f64f 0354 	movw	r3, #63572	; 0xf854
 8005006:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800500a:	f64f 022c 	movw	r2, #63532	; 0xf82c
 800500e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005012:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005014:	f64f 0358 	movw	r3, #63576	; 0xf858
 8005018:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800501c:	f64f 0240 	movw	r2, #63552	; 0xf840
 8005020:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005024:	601a      	str	r2, [r3, #0]
}
 8005026:	f107 0708 	add.w	r7, r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop

08005030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8005036:	e03d      	b.n	80050b4 <prvCheckTasksWaitingTermination+0x84>
		{
			vTaskSuspendAll();
 8005038:	f7ff fc08 	bl	800484c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800503c:	f64f 0370 	movw	r3, #63600	; 0xf870
 8005040:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	bf14      	ite	ne
 800504a:	2300      	movne	r3, #0
 800504c:	2301      	moveq	r3, #1
 800504e:	b2db      	uxtb	r3, r3
 8005050:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8005052:	f7ff fc0d 	bl	8004870 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d12b      	bne.n	80050b4 <prvCheckTasksWaitingTermination+0x84>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800505c:	f000 ff4a 	bl	8005ef4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005060:	f64f 0370 	movw	r3, #63600	; 0xf870
 8005064:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	f103 0304 	add.w	r3, r3, #4
 8005074:	4618      	mov	r0, r3
 8005076:	f7fe ff0b 	bl	8003e90 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800507a:	f64f 039c 	movw	r3, #63644	; 0xf89c
 800507e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005088:	f64f 039c 	movw	r3, #63644	; 0xf89c
 800508c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005090:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 8005092:	f64f 0384 	movw	r3, #63620	; 0xf884
 8005096:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80050a0:	f64f 0384 	movw	r3, #63620	; 0xf884
 80050a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80050a8:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 80050aa:	f000 ff39 	bl	8005f20 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80050ae:	6838      	ldr	r0, [r7, #0]
 80050b0:	f000 f88a 	bl	80051c8 <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 80050b4:	f64f 0384 	movw	r3, #63620	; 0xf884
 80050b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1ba      	bne.n	8005038 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
 80050c2:	f107 0708 	add.w	r7, r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop

080050cc <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80050d4:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 80050d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
 80050e2:	f64f 03a0 	movw	r3, #63648	; 0xf8a0
 80050e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d210      	bcs.n	8005114 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80050f2:	f64f 0358 	movw	r3, #63576	; 0xf858
 80050f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 8005100:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f103 0304 	add.w	r3, r3, #4
 800510a:	4610      	mov	r0, r2
 800510c:	4619      	mov	r1, r3
 800510e:	f7fe fe85 	bl	8003e1c <vListInsert>
 8005112:	e01d      	b.n	8005150 <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8005114:	f64f 0354 	movw	r3, #63572	; 0xf854
 8005118:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 8005122:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f103 0304 	add.w	r3, r3, #4
 800512c:	4610      	mov	r0, r2
 800512e:	4619      	mov	r1, r3
 8005130:	f7fe fe74 	bl	8003e1c <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8005134:	f240 1398 	movw	r3, #408	; 0x198
 8005138:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	429a      	cmp	r2, r3
 8005142:	d205      	bcs.n	8005150 <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
 8005144:	f240 1398 	movw	r3, #408	; 0x198
 8005148:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005150:	f107 0708 	add.w	r7, r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	6039      	str	r1, [r7, #0]
 8005162:	80fb      	strh	r3, [r7, #6]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8005164:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005168:	f000 fdb2 	bl	8005cd0 <pvPortMalloc>
 800516c:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d023      	beq.n	80051bc <prvAllocateTCBAndStack+0x64>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d107      	bne.n	800518a <prvAllocateTCBAndStack+0x32>
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fda5 	bl	8005cd0 <pvPortMalloc>
 8005186:	4603      	mov	r3, r0
 8005188:	e000      	b.n	800518c <prvAllocateTCBAndStack+0x34>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005194:	2b00      	cmp	r3, #0
 8005196:	d106      	bne.n	80051a6 <prvAllocateTCBAndStack+0x4e>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 fdf9 	bl	8005d90 <vPortFree>
			pxNewTCB = NULL;
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	e00a      	b.n	80051bc <prvAllocateTCBAndStack+0x64>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051aa:	88fb      	ldrh	r3, [r7, #6]
 80051ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80051b0:	4610      	mov	r0, r2
 80051b2:	f04f 01a5 	mov.w	r1, #165	; 0xa5
 80051b6:	461a      	mov	r2, r3
 80051b8:	f7fe fc84 	bl	8003ac4 <memset>
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
 80051bc:	68fb      	ldr	r3, [r7, #12]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	f107 0710 	add.w	r7, r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fddb 	bl	8005d90 <vPortFree>
		vPortFree( pxTCB );
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fdd8 	bl	8005d90 <vPortFree>
	}
 80051e0:	f107 0708 	add.w	r7, r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051ee:	f64f 0354 	movw	r3, #63572	; 0xf854
 80051f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d102      	bne.n	8005204 <prvResetNextTaskUnblockTime+0x1c>
 80051fe:	f04f 0301 	mov.w	r3, #1
 8005202:	e001      	b.n	8005208 <prvResetNextTaskUnblockTime+0x20>
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d007      	beq.n	800521c <prvResetNextTaskUnblockTime+0x34>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800520c:	f240 1398 	movw	r3, #408	; 0x198
 8005210:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005218:	601a      	str	r2, [r3, #0]
 800521a:	e00e      	b.n	800523a <prvResetNextTaskUnblockTime+0x52>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800521c:	f64f 0354 	movw	r3, #63572	; 0xf854
 8005220:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	f240 1398 	movw	r3, #408	; 0x198
 8005234:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005238:	601a      	str	r2, [r3, #0]
	}
}
 800523a:	f107 070c 	add.w	r7, r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	bc80      	pop	{r7}
 8005242:	4770      	bx	lr

08005244 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800524a:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 800524e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005256:	687b      	ldr	r3, [r7, #4]
	}
 8005258:	4618      	mov	r0, r3
 800525a:	f107 070c 	add.w	r7, r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d06a      	beq.n	800534c <vTaskPriorityInherit+0xe8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527a:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 800527e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005286:	429a      	cmp	r2, r3
 8005288:	d260      	bcs.n	800534c <vTaskPriorityInherit+0xe8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	2b00      	cmp	r3, #0
 8005290:	db09      	blt.n	80052a6 <vTaskPriorityInherit+0x42>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005292:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 8005296:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529e:	f1c3 0205 	rsb	r2, r3, #5
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6959      	ldr	r1, [r3, #20]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ae:	4613      	mov	r3, r2
 80052b0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80052b4:	189b      	adds	r3, r3, r2
 80052b6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80052ba:	f24f 72c8 	movw	r2, #63432	; 0xf7c8
 80052be:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80052c2:	189b      	adds	r3, r3, r2
 80052c4:	4299      	cmp	r1, r3
 80052c6:	d102      	bne.n	80052ce <vTaskPriorityInherit+0x6a>
 80052c8:	f04f 0301 	mov.w	r3, #1
 80052cc:	e001      	b.n	80052d2 <vTaskPriorityInherit+0x6e>
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d032      	beq.n	800533c <vTaskPriorityInherit+0xd8>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f103 0304 	add.w	r3, r3, #4
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fe fdd7 	bl	8003e90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80052e2:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 80052e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f6:	f64f 03a4 	movw	r3, #63652	; 0xf8a4
 80052fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d906      	bls.n	8005312 <vTaskPriorityInherit+0xae>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005308:	f64f 03a4 	movw	r3, #63652	; 0xf8a4
 800530c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005316:	4613      	mov	r3, r2
 8005318:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800531c:	189b      	adds	r3, r3, r2
 800531e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005322:	f24f 72c8 	movw	r2, #63432	; 0xf7c8
 8005326:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800532a:	189a      	adds	r2, r3, r2
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f103 0304 	add.w	r3, r3, #4
 8005332:	4610      	mov	r0, r2
 8005334:	4619      	mov	r1, r3
 8005336:	f7fe fd4d 	bl	8003dd4 <vListInsertEnd>
 800533a:	e007      	b.n	800534c <vTaskPriorityInherit+0xe8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800533c:	f24f 73c4 	movw	r3, #63428	; 0xf7c4
 8005340:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800534c:	f107 0710 	add.w	r7, r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d03d      	beq.n	80053e2 <vTaskPriorityDisinherit+0x8e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800536e:	429a      	cmp	r2, r3
 8005370:	d037      	beq.n	80053e2 <vTaskPriorityDisinherit+0x8e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f103 0304 	add.w	r3, r3, #4
 8005378:	4618      	mov	r0, r3
 800537a:	f7fe fd89 	bl	8003e90 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	62da      	str	r2, [r3, #44]	; 0x2c

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	2b00      	cmp	r3, #0
 800538c:	db05      	blt.n	800539a <vTaskPriorityDisinherit+0x46>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005392:	f1c3 0205 	rsb	r2, r3, #5
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	619a      	str	r2, [r3, #24]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddTaskToReadyList( pxTCB );
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539e:	f64f 03a4 	movw	r3, #63652	; 0xf8a4
 80053a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d906      	bls.n	80053ba <vTaskPriorityDisinherit+0x66>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b0:	f64f 03a4 	movw	r3, #63652	; 0xf8a4
 80053b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053be:	4613      	mov	r3, r2
 80053c0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80053c4:	189b      	adds	r3, r3, r2
 80053c6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80053ca:	f24f 72c8 	movw	r2, #63432	; 0xf7c8
 80053ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80053d2:	189a      	adds	r2, r3, r2
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f103 0304 	add.w	r3, r3, #4
 80053da:	4610      	mov	r0, r2
 80053dc:	4619      	mov	r1, r3
 80053de:	f7fe fcf9 	bl	8003dd4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053e2:	f107 0710 	add.w	r7, r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop

080053ec <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	73fb      	strb	r3, [r7, #15]
 80053fa:	f04f 0300 	mov.w	r3, #0
 80053fe:	73bb      	strb	r3, [r7, #14]
 8005400:	f04f 030f 	mov.w	r3, #15
 8005404:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	78db      	ldrb	r3, [r3, #3]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d045      	beq.n	800549a <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800540e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005412:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	ea6f 0303 	mvn.w	r3, r3
 800541c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005420:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8005424:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	f1c3 0304 	rsb	r3, r3, #4
 800542c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800542e:	7b7a      	ldrb	r2, [r7, #13]
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	fa42 f303 	asr.w	r3, r2, r3
 8005436:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	785b      	ldrb	r3, [r3, #1]
 800543c:	461a      	mov	r2, r3
 800543e:	7bbb      	ldrb	r3, [r7, #14]
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	789a      	ldrb	r2, [r3, #2]
 800544a:	7b7b      	ldrb	r3, [r7, #13]
 800544c:	4013      	ands	r3, r2
 800544e:	b2da      	uxtb	r2, r3
 8005450:	7bfb      	ldrb	r3, [r7, #15]
 8005452:	4313      	orrs	r3, r2
 8005454:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8005456:	7bfb      	ldrb	r3, [r7, #15]
 8005458:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800545c:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800545e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8005462:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	7812      	ldrb	r2, [r2, #0]
 800546a:	189b      	adds	r3, r3, r2
 800546c:	7bfa      	ldrb	r2, [r7, #15]
 800546e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005472:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8005476:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	7812      	ldrb	r2, [r2, #0]
 800547e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8005482:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	7809      	ldrb	r1, [r1, #0]
 8005488:	f001 011f 	and.w	r1, r1, #31
 800548c:	f04f 0001 	mov.w	r0, #1
 8005490:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005498:	e014      	b.n	80054c4 <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800549a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800549e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	7812      	ldrb	r2, [r2, #0]
 80054a6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80054aa:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	7809      	ldrb	r1, [r1, #0]
 80054b0:	f001 011f 	and.w	r1, r1, #31
 80054b4:	f04f 0001 	mov.w	r0, #1
 80054b8:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80054bc:	f102 0220 	add.w	r2, r2, #32
 80054c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80054c4:	f107 0714 	add.w	r7, r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop

080054d0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	f04f 0300 	mov.w	r3, #0
 80054e4:	613b      	str	r3, [r7, #16]
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	617b      	str	r3, [r7, #20]
 80054f2:	e086      	b.n	8005602 <GPIO_Init+0x132>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f04f 0201 	mov.w	r2, #1
 80054fa:	fa02 f303 	lsl.w	r3, r2, r3
 80054fe:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	4013      	ands	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	429a      	cmp	r2, r3
 8005510:	d173      	bne.n	80055fa <GPIO_Init+0x12a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800551c:	f04f 0103 	mov.w	r1, #3
 8005520:	fa01 f303 	lsl.w	r3, r1, r3
 8005524:	ea6f 0303 	mvn.w	r3, r3
 8005528:	401a      	ands	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	791b      	ldrb	r3, [r3, #4]
 8005536:	4619      	mov	r1, r3
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800553e:	fa01 f303 	lsl.w	r3, r1, r3
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	791b      	ldrb	r3, [r3, #4]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d003      	beq.n	8005558 <GPIO_Init+0x88>
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	791b      	ldrb	r3, [r3, #4]
 8005554:	2b02      	cmp	r3, #2
 8005556:	d134      	bne.n	80055c2 <GPIO_Init+0xf2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005562:	f04f 0103 	mov.w	r1, #3
 8005566:	fa01 f303 	lsl.w	r3, r1, r3
 800556a:	ea6f 0303 	mvn.w	r3, r3
 800556e:	401a      	ands	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	795b      	ldrb	r3, [r3, #5]
 800557c:	4619      	mov	r1, r3
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005584:	fa01 f303 	lsl.w	r3, r1, r3
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	b29b      	uxth	r3, r3
 8005596:	f04f 0101 	mov.w	r1, #1
 800559a:	fa01 f303 	lsl.w	r3, r1, r3
 800559e:	ea6f 0303 	mvn.w	r3, r3
 80055a2:	401a      	ands	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	799b      	ldrb	r3, [r3, #6]
 80055b0:	4619      	mov	r1, r3
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80055ce:	f04f 0103 	mov.w	r1, #3
 80055d2:	fa01 f303 	lsl.w	r3, r1, r3
 80055d6:	ea6f 0303 	mvn.w	r3, r3
 80055da:	401a      	ands	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	79db      	ldrb	r3, [r3, #7]
 80055e8:	4619      	mov	r1, r3
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80055f0:	fa01 f303 	lsl.w	r3, r1, r3
 80055f4:	431a      	orrs	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f103 0301 	add.w	r3, r3, #1
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b0f      	cmp	r3, #15
 8005606:	f67f af75 	bls.w	80054f4 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800560a:	f107 071c 	add.w	r7, r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	bc80      	pop	{r7}
 8005612:	4770      	bx	lr

08005614 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	4613      	mov	r3, r2
 800561e:	460a      	mov	r2, r1
 8005620:	807a      	strh	r2, [r7, #2]
 8005622:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8005630:	787a      	ldrb	r2, [r7, #1]
 8005632:	887b      	ldrh	r3, [r7, #2]
 8005634:	f003 0307 	and.w	r3, r3, #7
 8005638:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800563c:	fa02 f303 	lsl.w	r3, r2, r3
 8005640:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8005642:	887b      	ldrh	r3, [r7, #2]
 8005644:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8005648:	b29b      	uxth	r3, r3
 800564a:	461a      	mov	r2, r3
 800564c:	887b      	ldrh	r3, [r7, #2]
 800564e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8005652:	b29b      	uxth	r3, r3
 8005654:	4619      	mov	r1, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f101 0108 	add.w	r1, r1, #8
 800565c:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005660:	887b      	ldrh	r3, [r7, #2]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800566a:	f04f 000f 	mov.w	r0, #15
 800566e:	fa00 f303 	lsl.w	r3, r0, r3
 8005672:	ea6f 0303 	mvn.w	r3, r3
 8005676:	4019      	ands	r1, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f102 0208 	add.w	r2, r2, #8
 800567e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8005682:	887b      	ldrh	r3, [r7, #2]
 8005684:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8005688:	b29b      	uxth	r3, r3
 800568a:	461a      	mov	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f102 0208 	add.w	r2, r2, #8
 8005692:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4313      	orrs	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800569c:	887b      	ldrh	r3, [r7, #2]
 800569e:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f102 0208 	add.w	r2, r2, #8
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80056b2:	f107 0714 	add.w	r7, r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bc80      	pop	{r7}
 80056ba:	4770      	bx	lr

080056bc <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80056bc:	b480      	push	{r7}
 80056be:	b089      	sub	sp, #36	; 0x24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	61bb      	str	r3, [r7, #24]
 80056ca:	f04f 0300 	mov.w	r3, #0
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	f04f 0300 	mov.w	r3, #0
 80056d4:	61fb      	str	r3, [r7, #28]
 80056d6:	f04f 0302 	mov.w	r3, #2
 80056da:	613b      	str	r3, [r7, #16]
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	f04f 0302 	mov.w	r3, #2
 80056e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80056e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80056ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 030c 	and.w	r3, r3, #12
 80056f6:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d00a      	beq.n	8005714 <RCC_GetClocksFreq+0x58>
 80056fe:	2b08      	cmp	r3, #8
 8005700:	d00f      	beq.n	8005722 <RCC_GetClocksFreq+0x66>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d160      	bne.n	80057c8 <RCC_GetClocksFreq+0x10c>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800570c:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8005710:	6013      	str	r3, [r2, #0]
      break;
 8005712:	e060      	b.n	80057d6 <RCC_GetClocksFreq+0x11a>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800571a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800571e:	6013      	str	r3, [r2, #0]
      break;
 8005720:	e059      	b.n	80057d6 <RCC_GetClocksFreq+0x11a>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005722:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005726:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005730:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8005734:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005736:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800573a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005744:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d014      	beq.n	8005776 <RCC_GetClocksFreq+0xba>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800574c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8005750:	f2c0 037a 	movt	r3, #122	; 0x7a
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	fbb3 f2f2 	udiv	r2, r3, r2
 800575a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800575e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005762:	6859      	ldr	r1, [r3, #4]
 8005764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005768:	400b      	ands	r3, r1
 800576a:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800576e:	fb03 f302 	mul.w	r3, r3, r2
 8005772:	61fb      	str	r3, [r7, #28]
 8005774:	e013      	b.n	800579e <RCC_GetClocksFreq+0xe2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8005776:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800577a:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	fbb3 f2f2 	udiv	r2, r3, r2
 8005784:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005788:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800578c:	6859      	ldr	r1, [r3, #4]
 800578e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005792:	400b      	ands	r3, r1
 8005794:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8005798:	fb03 f302 	mul.w	r3, r3, r2
 800579c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800579e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80057a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057ac:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80057b0:	f103 0301 	add.w	r3, r3, #1
 80057b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80057b8:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80057ba:	69fa      	ldr	r2, [r7, #28]
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	fbb2 f2f3 	udiv	r2, r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	601a      	str	r2, [r3, #0]
      break;
 80057c6:	e006      	b.n	80057d6 <RCC_GetClocksFreq+0x11a>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80057ce:	f2c0 03f4 	movt	r3, #244	; 0xf4
 80057d2:	6013      	str	r3, [r2, #0]
      break;
 80057d4:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80057d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80057da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057e4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	ea4f 1313 	mov.w	r3, r3, lsr #4
 80057ec:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80057ee:	f240 139c 	movw	r3, #412	; 0x19c
 80057f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	189b      	adds	r3, r3, r2
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	fa22 f203 	lsr.w	r2, r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800580e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005812:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800581c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	ea4f 2393 	mov.w	r3, r3, lsr #10
 8005824:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8005826:	f240 139c 	movw	r3, #412	; 0x19c
 800582a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	189b      	adds	r3, r3, r2
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	fa22 f203 	lsr.w	r2, r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8005846:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800584a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005854:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800585c:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800585e:	f240 139c 	movw	r3, #412	; 0x19c
 8005862:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	189b      	adds	r3, r3, r2
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	fa22 f203 	lsr.w	r2, r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	60da      	str	r2, [r3, #12]
}
 800587e:	f107 0724 	add.w	r7, r7, #36	; 0x24
 8005882:	46bd      	mov	sp, r7
 8005884:	bc80      	pop	{r7}
 8005886:	4770      	bx	lr

08005888 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	460b      	mov	r3, r1
 8005892:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00c      	beq.n	80058b4 <RCC_AHB1PeriphClockCmd+0x2c>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800589a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800589e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80058a2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80058a6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80058aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	631a      	str	r2, [r3, #48]	; 0x30
 80058b2:	e00d      	b.n	80058d0 <RCC_AHB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80058b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80058b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80058bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80058c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80058c4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	ea6f 0202 	mvn.w	r2, r2
 80058cc:	400a      	ands	r2, r1
 80058ce:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80058d0:	f107 070c 	add.w	r7, r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bc80      	pop	{r7}
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop

080058dc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	460b      	mov	r3, r1
 80058e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80058e8:	78fb      	ldrb	r3, [r7, #3]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00c      	beq.n	8005908 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80058ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80058f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80058f6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80058fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80058fe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	430a      	orrs	r2, r1
 8005904:	645a      	str	r2, [r3, #68]	; 0x44
 8005906:	e00d      	b.n	8005924 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8005908:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800590c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005910:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005914:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005918:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	ea6f 0202 	mvn.w	r2, r2
 8005920:	400a      	ands	r2, r1
 8005922:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8005924:	f107 070c 	add.w	r7, r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	bc80      	pop	{r7}
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop

08005930 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08a      	sub	sp, #40	; 0x28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800593a:	f04f 0300 	mov.w	r3, #0
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	8a1b      	ldrh	r3, [r3, #16]
 8005956:	b29b      	uxth	r3, r3
 8005958:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005960:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	88db      	ldrh	r3, [r3, #6]
 8005966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005968:	4313      	orrs	r3, r2
 800596a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	b29a      	uxth	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	899b      	ldrh	r3, [r3, #12]
 8005978:	b29b      	uxth	r3, r3
 800597a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005982:	f023 030c 	bic.w	r3, r3, #12
 8005986:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	889a      	ldrh	r2, [r3, #4]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	891b      	ldrh	r3, [r3, #8]
 8005990:	4313      	orrs	r3, r2
 8005992:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8005998:	4313      	orrs	r3, r2
 800599a:	b29b      	uxth	r3, r3
 800599c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800599e:	4313      	orrs	r3, r2
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	8a9b      	ldrh	r3, [r3, #20]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	899b      	ldrh	r3, [r3, #12]
 80059be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c0:	4313      	orrs	r3, r2
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80059cc:	f107 0308 	add.w	r3, r7, #8
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7ff fe73 	bl	80056bc <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d006      	beq.n	80059f2 <USART_Init+0xc2>
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80059ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d102      	bne.n	80059f8 <USART_Init+0xc8>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	623b      	str	r3, [r7, #32]
 80059f6:	e001      	b.n	80059fc <USART_Init+0xcc>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	899b      	ldrh	r3, [r3, #12]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	b21b      	sxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	da0f      	bge.n	8005a2a <USART_Init+0xfa>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8005a0a:	6a3a      	ldr	r2, [r7, #32]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005a12:	189b      	adds	r3, r3, r2
 8005a14:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8005a18:	189a      	adds	r2, r3, r2
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	e00e      	b.n	8005a48 <USART_Init+0x118>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8005a2a:	6a3a      	ldr	r2, [r7, #32]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005a32:	189b      	adds	r3, r3, r2
 8005a34:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8005a38:	189a      	adds	r2, r3, r2
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8005a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a46:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	f248 531f 	movw	r3, #34079	; 0x851f
 8005a4e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8005a52:	fba3 1302 	umull	r1, r3, r3, r2
 8005a56:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005a5a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8005a66:	f04f 0264 	mov.w	r2, #100	; 0x64
 8005a6a:	fb02 f303 	mul.w	r3, r2, r3
 8005a6e:	69fa      	ldr	r2, [r7, #28]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	899b      	ldrh	r3, [r3, #12]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	b21b      	sxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	da12      	bge.n	8005aa8 <USART_Init+0x178>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005a88:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a8c:	f248 531f 	movw	r3, #34079	; 0x851f
 8005a90:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8005a94:	fba3 1302 	umull	r1, r3, r3, r2
 8005a98:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa6:	e011      	b.n	8005acc <USART_Init+0x19c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005aae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005ab2:	f248 531f 	movw	r3, #34079	; 0x851f
 8005ab6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8005aba:	fba3 1302 	umull	r1, r3, r3, r2
 8005abe:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005ac2:	f003 030f 	and.w	r3, r3, #15
 8005ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	811a      	strh	r2, [r3, #8]
}
 8005ad4:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d008      	beq.n	8005b00 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	899b      	ldrh	r3, [r3, #12]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	819a      	strh	r2, [r3, #12]
 8005afe:	e007      	b.n	8005b10 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	899b      	ldrh	r3, [r3, #12]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	819a      	strh	r2, [r3, #12]
  }
}
 8005b10:	f107 070c 	add.w	r7, r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bc80      	pop	{r7}
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop

08005b1c <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8005b28:	887b      	ldrh	r3, [r7, #2]
 8005b2a:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8005b2e:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	809a      	strh	r2, [r3, #4]
}
 8005b38:	f107 070c 	add.w	r7, r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop

08005b44 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	889b      	ldrh	r3, [r3, #4]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8005b56:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8005b5a:	b29b      	uxth	r3, r3
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f107 070c 	add.w	r7, r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr

08005b68 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	4613      	mov	r3, r2
 8005b72:	460a      	mov	r2, r1
 8005b74:	807a      	strh	r2, [r7, #2]
 8005b76:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	613b      	str	r3, [r7, #16]
 8005b7e:	f04f 0300 	mov.w	r3, #0
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8005b8a:	f04f 0300 	mov.w	r3, #0
 8005b8e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8005b94:	887b      	ldrh	r3, [r7, #2]
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8005ba0:	887b      	ldrh	r3, [r7, #2]
 8005ba2:	f003 031f 	and.w	r3, r3, #31
 8005ba6:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f04f 0201 	mov.w	r2, #1
 8005bae:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb2:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d104      	bne.n	8005bc4 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f103 030c 	add.w	r3, r3, #12
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	e00b      	b.n	8005bdc <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d104      	bne.n	8005bd4 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f103 0310 	add.w	r3, r3, #16
 8005bd0:	617b      	str	r3, [r7, #20]
 8005bd2:	e003      	b.n	8005bdc <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f103 0314 	add.w	r3, r3, #20
 8005bda:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8005bdc:	787b      	ldrb	r3, [r7, #1]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d006      	beq.n	8005bf0 <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	6811      	ldr	r1, [r2, #0]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e007      	b.n	8005c00 <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	6811      	ldr	r1, [r2, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	ea6f 0202 	mvn.w	r2, r2
 8005bfc:	400a      	ands	r2, r1
 8005bfe:	601a      	str	r2, [r3, #0]
  }
}
 8005c00:	f107 071c 	add.w	r7, r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bc80      	pop	{r7}
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop

08005c0c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	f04f 0300 	mov.w	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8005c30:	887b      	ldrh	r3, [r7, #2]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8005c3c:	887b      	ldrh	r3, [r7, #2]
 8005c3e:	f003 031f 	and.w	r3, r3, #31
 8005c42:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f04f 0201 	mov.w	r2, #1
 8005c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d106      	bne.n	8005c64 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	899b      	ldrh	r3, [r3, #12]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	e00f      	b.n	8005c84 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d106      	bne.n	8005c78 <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	8a1b      	ldrh	r3, [r3, #16]
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4013      	ands	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]
 8005c76:	e005      	b.n	8005c84 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	8a9b      	ldrh	r3, [r3, #20]
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4013      	ands	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8005c84:	887b      	ldrh	r3, [r7, #2]
 8005c86:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f04f 0201 	mov.w	r2, #1
 8005c94:	fa02 f303 	lsl.w	r3, r2, r3
 8005c98:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d006      	beq.n	8005cba <USART_GetITStatus+0xae>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d003      	beq.n	8005cba <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
 8005cb2:	f04f 0301 	mov.w	r3, #1
 8005cb6:	74fb      	strb	r3, [r7, #19]
 8005cb8:	e002      	b.n	8005cc0 <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
 8005cba:	f04f 0300 	mov.w	r3, #0
 8005cbe:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8005cc0:	7cfb      	ldrb	r3, [r7, #19]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f107 071c 	add.w	r7, r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bc80      	pop	{r7}
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop

08005cd0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8005cd8:	f04f 0300 	mov.w	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d005      	beq.n	8005cf4 <pvPortMalloc+0x24>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f023 0307 	bic.w	r3, r3, #7
 8005cee:	f103 0308 	add.w	r3, r3, #8
 8005cf2:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
 8005cf4:	f7fe fdaa 	bl	800484c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8005cf8:	f643 43c4 	movw	r3, #15556	; 0x3cc4
 8005cfc:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d108      	bne.n	8005d18 <pvPortMalloc+0x48>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
 8005d06:	4b21      	ldr	r3, [pc, #132]	; (8005d8c <pvPortMalloc+0xbc>)
 8005d08:	f023 0307 	bic.w	r3, r3, #7
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	f643 43c4 	movw	r3, #15556	; 0x3cc4
 8005d12:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005d16:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8005d18:	f643 43c0 	movw	r3, #15552	; 0x3cc0
 8005d1c:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	18d2      	adds	r2, r2, r3
 8005d26:	f244 33f7 	movw	r3, #17399	; 0x43f7
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d825      	bhi.n	8005d7a <pvPortMalloc+0xaa>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8005d2e:	f643 43c0 	movw	r3, #15552	; 0x3cc0
 8005d32:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	18d2      	adds	r2, r2, r3
 8005d3c:	f643 43c0 	movw	r3, #15552	; 0x3cc0
 8005d40:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005d44:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d917      	bls.n	8005d7a <pvPortMalloc+0xaa>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8005d4a:	f643 43c4 	movw	r3, #15556	; 0x3cc4
 8005d4e:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	f643 43c0 	movw	r3, #15552	; 0x3cc0
 8005d58:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	18d3      	adds	r3, r2, r3
 8005d60:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8005d62:	f643 43c0 	movw	r3, #15552	; 0x3cc0
 8005d66:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	18d2      	adds	r2, r2, r3
 8005d70:	f643 43c0 	movw	r3, #15552	; 0x3cc0
 8005d74:	f2c2 0301 	movt	r3, #8193	; 0x2001
 8005d78:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}	
	xTaskResumeAll();
 8005d7a:	f7fe fd79 	bl	8004870 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	f107 0710 	add.w	r7, r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	2000f8c8 	.word	0x2000f8c8

08005d90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
 8005d98:	f107 070c 	add.w	r7, r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bc80      	pop	{r7}
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop

08005da4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f1a3 0304 	sub.w	r3, r3, #4
 8005db6:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005dbe:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f1a3 0304 	sub.w	r3, r3, #4
 8005dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f1a3 0304 	sub.w	r3, r3, #4
 8005dd4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005dd6:	f645 6319 	movw	r3, #24089	; 0x5e19
 8005dda:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	6013      	str	r3, [r2, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f1a3 0314 	sub.w	r3, r3, #20
 8005de8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f1a3 0304 	sub.w	r3, r3, #4
 8005df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f06f 0202 	mvn.w	r2, #2
 8005dfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f1a3 0320 	sub.w	r3, r3, #32
 8005e06:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e08:	68fb      	ldr	r3, [r7, #12]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f107 0714 	add.w	r7, r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bc80      	pop	{r7}
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop

08005e18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 8005e1c:	f000 f89a 	bl	8005f54 <ulPortSetInterruptMask>
	for( ;; );
 8005e20:	e7fe      	b.n	8005e20 <prvTaskExitError+0x8>
 8005e22:	bf00      	nop

08005e24 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e24:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <pxCurrentTCBConst2>)
 8005e26:	6819      	ldr	r1, [r3, #0]
 8005e28:	6808      	ldr	r0, [r1, #0]
 8005e2a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e2e:	f380 8809 	msr	PSP, r0
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f04f 0000 	mov.w	r0, #0
 8005e3a:	f380 8811 	msr	BASEPRI, r0
 8005e3e:	4770      	bx	lr

08005e40 <pxCurrentTCBConst2>:
 8005e40:	2000f7c4 	.word	0x2000f7c4

08005e44 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005e44:	4805      	ldr	r0, [pc, #20]	; (8005e5c <prvPortStartFirstTask+0x18>)
 8005e46:	6800      	ldr	r0, [r0, #0]
 8005e48:	6800      	ldr	r0, [r0, #0]
 8005e4a:	f380 8808 	msr	MSP, r0
 8005e4e:	b662      	cpsie	i
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	df00      	svc	0
 8005e5a:	bf00      	nop
 8005e5c:	e000ed08 	.word	0xe000ed08

08005e60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e64:	f64e 5320 	movw	r3, #60704	; 0xed20
 8005e68:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005e6c:	f64e 5220 	movw	r2, #60704	; 0xed20
 8005e70:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8005e74:	6812      	ldr	r2, [r2, #0]
 8005e76:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
 8005e7a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e7c:	f64e 5320 	movw	r3, #60704	; 0xed20
 8005e80:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005e84:	f64e 5220 	movw	r2, #60704	; 0xed20
 8005e88:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8005e8c:	6812      	ldr	r2, [r2, #0]
 8005e8e:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
 8005e92:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e94:	f000 f8ae 	bl	8005ff4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e98:	f240 13ac 	movw	r3, #428	; 0x1ac
 8005e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005ea0:	f04f 0200 	mov.w	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005ea6:	f000 f8bb 	bl	8006020 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005eaa:	f64e 7334 	movw	r3, #61236	; 0xef34
 8005eae:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005eb2:	f64e 7234 	movw	r2, #61236	; 0xef34
 8005eb6:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8005eba:	6812      	ldr	r2, [r2, #0]
 8005ebc:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8005ec0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ec2:	f7ff ffbf 	bl	8005e44 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8005ec6:	f7ff ffa7 	bl	8005e18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005eca:	f04f 0300 	mov.w	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop

08005ed4 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ed8:	f64e 5304 	movw	r3, #60676	; 0xed04
 8005edc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee4:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 8005ee6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005eea:	f3bf 8f6f 	isb	sy
}
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bc80      	pop	{r7}
 8005ef2:	4770      	bx	lr

08005ef4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8005ef8:	f000 f82c 	bl	8005f54 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 8005efc:	f240 13ac 	movw	r3, #428	; 0x1ac
 8005f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f103 0201 	add.w	r2, r3, #1
 8005f0a:	f240 13ac 	movw	r3, #428	; 0x1ac
 8005f0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f12:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8005f14:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005f18:	f3bf 8f6f 	isb	sy
}
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop

08005f20 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8005f24:	f240 13ac 	movw	r3, #428	; 0x1ac
 8005f28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005f32:	f240 13ac 	movw	r3, #428	; 0x1ac
 8005f36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f3a:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8005f3c:	f240 13ac 	movw	r3, #428	; 0x1ac
 8005f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d103      	bne.n	8005f52 <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
 8005f4a:	f04f 0000 	mov.w	r0, #0
 8005f4e:	f000 f80b 	bl	8005f68 <vPortClearInterruptMask>
	}
}
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
 8005f54:	f3ef 8011 	mrs	r0, BASEPRI
 8005f58:	f04f 01bf 	mov.w	r1, #191	; 0xbf
 8005f5c:	f381 8811 	msr	BASEPRI, r1
 8005f60:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
 8005f62:	f04f 0300 	mov.w	r3, #0
}
 8005f66:	4618      	mov	r0, r3

08005f68 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
 8005f68:	f380 8811 	msr	BASEPRI, r0
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop

08005f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f70:	f3ef 8009 	mrs	r0, PSP
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	4b12      	ldr	r3, [pc, #72]	; (8005fc4 <pxCurrentTCBConst>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	f01e 0f10 	tst.w	lr, #16
 8005f80:	bf08      	it	eq
 8005f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8a:	6010      	str	r0, [r2, #0]
 8005f8c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8005f90:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8005f94:	f380 8811 	msr	BASEPRI, r0
 8005f98:	f7fe fe1a 	bl	8004bd0 <vTaskSwitchContext>
 8005f9c:	f04f 0000 	mov.w	r0, #0
 8005fa0:	f380 8811 	msr	BASEPRI, r0
 8005fa4:	bc08      	pop	{r3}
 8005fa6:	6819      	ldr	r1, [r3, #0]
 8005fa8:	6808      	ldr	r0, [r1, #0]
 8005faa:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fae:	f01e 0f10 	tst.w	lr, #16
 8005fb2:	bf08      	it	eq
 8005fb4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005fb8:	f380 8809 	msr	PSP, r0
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop

08005fc4 <pxCurrentTCBConst>:
 8005fc4:	2000f7c4 	.word	0x2000f7c4

08005fc8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 8005fcc:	f7ff ffc2 	bl	8005f54 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005fd0:	f7fe fcfe 	bl	80049d0 <xTaskIncrementTick>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d006      	beq.n	8005fe8 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005fda:	f64e 5304 	movw	r3, #60676	; 0xed04
 8005fde:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe6:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 8005fe8:	f04f 0000 	mov.w	r0, #0
 8005fec:	f7ff ffbc 	bl	8005f68 <vPortClearInterruptMask>
}
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop

08005ff4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ff8:	f24e 0314 	movw	r3, #57364	; 0xe014
 8005ffc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006000:	f64f 427f 	movw	r2, #64639	; 0xfc7f
 8006004:	f2c0 020a 	movt	r2, #10
 8006008:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800600a:	f24e 0310 	movw	r3, #57360	; 0xe010
 800600e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006012:	f04f 0207 	mov.w	r2, #7
 8006016:	601a      	str	r2, [r3, #0]
}
 8006018:	46bd      	mov	sp, r7
 800601a:	bc80      	pop	{r7}
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop

08006020 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006020:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006030 <vPortEnableVFP+0x10>
 8006024:	6801      	ldr	r1, [r0, #0]
 8006026:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800602a:	6001      	str	r1, [r0, #0]
 800602c:	4770      	bx	lr
 800602e:	0000      	.short	0x0000
 8006030:	e000ed88 	.word	0xe000ed88

08006034 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006034:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006036:	f000 b804 	b.w	8006042 <LoopCopyDataInit>

0800603a <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800603a:	4b0c      	ldr	r3, [pc, #48]	; (800606c <LoopFillZerobss+0x12>)
  ldr  r3, [r3, r1]
 800603c:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800603e:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006040:	3104      	adds	r1, #4

08006042 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006042:	480b      	ldr	r0, [pc, #44]	; (8006070 <LoopFillZerobss+0x16>)
  ldr  r3, =_edata
 8006044:	4b0b      	ldr	r3, [pc, #44]	; (8006074 <LoopFillZerobss+0x1a>)
  adds  r2, r0, r1
 8006046:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006048:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800604a:	f4ff aff6 	bcc.w	800603a <CopyDataInit>
  ldr  r2, =_sbss
 800604e:	4a0a      	ldr	r2, [pc, #40]	; (8006078 <LoopFillZerobss+0x1e>)
  b  LoopFillZerobss
 8006050:	f000 b803 	b.w	800605a <LoopFillZerobss>

08006054 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006054:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006056:	f842 3b04 	str.w	r3, [r2], #4

0800605a <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800605a:	4b08      	ldr	r3, [pc, #32]	; (800607c <LoopFillZerobss+0x22>)
  cmp  r2, r3
 800605c:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800605e:	f4ff aff9 	bcc.w	8006054 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006062:	f000 f80f 	bl	8006084 <SystemInit>
/* Call the application's entry point.*/
  bl  main
 8006066:	f7fc f8e9 	bl	800223c <main>
  bx  lr    
 800606a:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800606c:	080069ac 	.word	0x080069ac
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006070:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006074:	200005d8 	.word	0x200005d8
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8006078:	200005d8 	.word	0x200005d8
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800607c:	20013cc8 	.word	0x20013cc8

08006080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006080:	f7ff bffe 	b.w	8006080 <ADC_IRQHandler>

08006084 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006088:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800608c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8006090:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8006094:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8006098:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800609c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80060a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80060a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80060a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80060b0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80060b4:	6812      	ldr	r2, [r2, #0]
 80060b6:	f042 0201 	orr.w	r2, r2, #1
 80060ba:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80060bc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80060c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060c4:	f04f 0200 	mov.w	r2, #0
 80060c8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80060ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80060ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060d2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80060d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80060da:	6812      	ldr	r2, [r2, #0]
 80060dc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80060e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80060e4:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80060e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80060ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060ee:	f243 0210 	movw	r2, #12304	; 0x3010
 80060f2:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80060f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80060f8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80060fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006100:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006104:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006108:	6812      	ldr	r2, [r2, #0]
 800610a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800610e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006110:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006114:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800611e:	f000 f809 	bl	8006134 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006122:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8006126:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800612a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800612e:	609a      	str	r2, [r3, #8]
#endif
}
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop

08006134 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800613a:	f04f 0300 	mov.w	r3, #0
 800613e:	607b      	str	r3, [r7, #4]
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8006146:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800614a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800614e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006152:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006156:	6812      	ldr	r2, [r2, #0]
 8006158:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800615c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800615e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006162:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616c:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f103 0301 	add.w	r3, r3, #1
 8006174:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d103      	bne.n	8006184 <SetSysClock+0x50>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006182:	d1ec      	bne.n	800615e <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8006184:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006188:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 8006196:	f04f 0301 	mov.w	r3, #1
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	e002      	b.n	80061a4 <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	f040 8082 	bne.w	80062b0 <SetSysClock+0x17c>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80061ac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80061b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80061b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80061b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80061bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80061be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80061c2:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80061c4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80061c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80061cc:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80061d0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80061d4:	6812      	ldr	r2, [r2, #0]
 80061d6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80061da:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80061dc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80061e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80061e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80061e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80061ec:	6892      	ldr	r2, [r2, #8]
 80061ee:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80061f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80061f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80061f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80061fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006200:	6892      	ldr	r2, [r2, #8]
 8006202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006206:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8006208:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800620c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006210:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006214:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006218:	6892      	ldr	r2, [r2, #8]
 800621a:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800621e:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8006220:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006224:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006228:	f644 3219 	movw	r2, #19225	; 0x4b19
 800622c:	f2c0 7240 	movt	r2, #1856	; 0x740
 8006230:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8006232:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006236:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800623a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800623e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006242:	6812      	ldr	r2, [r2, #0]
 8006244:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006248:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800624a:	bf00      	nop
 800624c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006250:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0f6      	beq.n	800624c <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_4WS;
 800625e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006262:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006266:	f240 6204 	movw	r2, #1540	; 0x604
 800626a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800626c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006270:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006274:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006278:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800627c:	6892      	ldr	r2, [r2, #8]
 800627e:	f022 0203 	bic.w	r2, r2, #3
 8006282:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8006284:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006288:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800628c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006290:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006294:	6892      	ldr	r2, [r2, #8]
 8006296:	f042 0202 	orr.w	r2, r2, #2
 800629a:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800629c:	bf00      	nop
 800629e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80062a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 030c 	and.w	r3, r3, #12
 80062ac:	2b08      	cmp	r3, #8
 80062ae:	d1f6      	bne.n	800629e <SetSysClock+0x16a>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80062b0:	f107 070c 	add.w	r7, r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bc80      	pop	{r7}
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop

080062bc <__register_exitproc>:
 80062bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c0:	4c27      	ldr	r4, [pc, #156]	; (8006360 <__register_exitproc+0xa4>)
 80062c2:	6825      	ldr	r5, [r4, #0]
 80062c4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80062c8:	b084      	sub	sp, #16
 80062ca:	4607      	mov	r7, r0
 80062cc:	2c00      	cmp	r4, #0
 80062ce:	d041      	beq.n	8006354 <__register_exitproc+0x98>
 80062d0:	6866      	ldr	r6, [r4, #4]
 80062d2:	2e1f      	cmp	r6, #31
 80062d4:	dd1c      	ble.n	8006310 <__register_exitproc+0x54>
 80062d6:	4823      	ldr	r0, [pc, #140]	; (8006364 <__register_exitproc+0xa8>)
 80062d8:	b910      	cbnz	r0, 80062e0 <__register_exitproc+0x24>
 80062da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062de:	e01f      	b.n	8006320 <__register_exitproc+0x64>
 80062e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80062e4:	9103      	str	r1, [sp, #12]
 80062e6:	9202      	str	r2, [sp, #8]
 80062e8:	9301      	str	r3, [sp, #4]
 80062ea:	f7fa f8c5 	bl	8000478 <malloc>
 80062ee:	9903      	ldr	r1, [sp, #12]
 80062f0:	9a02      	ldr	r2, [sp, #8]
 80062f2:	9b01      	ldr	r3, [sp, #4]
 80062f4:	4604      	mov	r4, r0
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d0ef      	beq.n	80062da <__register_exitproc+0x1e>
 80062fa:	f8d5 6148 	ldr.w	r6, [r5, #328]	; 0x148
 80062fe:	2000      	movs	r0, #0
 8006300:	6060      	str	r0, [r4, #4]
 8006302:	6026      	str	r6, [r4, #0]
 8006304:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8006308:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 800630c:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 8006310:	6865      	ldr	r5, [r4, #4]
 8006312:	b947      	cbnz	r7, 8006326 <__register_exitproc+0x6a>
 8006314:	1ca8      	adds	r0, r5, #2
 8006316:	3501      	adds	r5, #1
 8006318:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
 800631c:	6065      	str	r5, [r4, #4]
 800631e:	2000      	movs	r0, #0
 8006320:	b004      	add	sp, #16
 8006322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006326:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 800632a:	2001      	movs	r0, #1
 800632c:	eb04 0885 	add.w	r8, r4, r5, lsl #2
 8006330:	fa00 f005 	lsl.w	r0, r0, r5
 8006334:	4306      	orrs	r6, r0
 8006336:	2f02      	cmp	r7, #2
 8006338:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800633c:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8006340:	f8c8 3108 	str.w	r3, [r8, #264]	; 0x108
 8006344:	d1e6      	bne.n	8006314 <__register_exitproc+0x58>
 8006346:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 800634a:	ea43 0200 	orr.w	r2, r3, r0
 800634e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8006352:	e7df      	b.n	8006314 <__register_exitproc+0x58>
 8006354:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8006358:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800635c:	e7b8      	b.n	80062d0 <__register_exitproc+0x14>
 800635e:	bf00      	nop
 8006360:	08006994 	.word	0x08006994
 8006364:	08000479 	.word	0x08000479

08006368 <__libc_fini_array>:
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	4b11      	ldr	r3, [pc, #68]	; (80063b0 <__libc_fini_array+0x48>)
 800636c:	4c11      	ldr	r4, [pc, #68]	; (80063b4 <__libc_fini_array+0x4c>)
 800636e:	1b18      	subs	r0, r3, r4
 8006370:	1081      	asrs	r1, r0, #2
 8006372:	d018      	beq.n	80063a6 <__libc_fini_array+0x3e>
 8006374:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8006378:	1e4e      	subs	r6, r1, #1
 800637a:	4635      	mov	r5, r6
 800637c:	f854 2d04 	ldr.w	r2, [r4, #-4]!
 8006380:	f006 0601 	and.w	r6, r6, #1
 8006384:	4790      	blx	r2
 8006386:	b175      	cbz	r5, 80063a6 <__libc_fini_array+0x3e>
 8006388:	b126      	cbz	r6, 8006394 <__libc_fini_array+0x2c>
 800638a:	f854 3d04 	ldr.w	r3, [r4, #-4]!
 800638e:	4798      	blx	r3
 8006390:	3d01      	subs	r5, #1
 8006392:	d008      	beq.n	80063a6 <__libc_fini_array+0x3e>
 8006394:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 8006398:	4780      	blx	r0
 800639a:	3d01      	subs	r5, #1
 800639c:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 80063a0:	4788      	blx	r1
 80063a2:	3d01      	subs	r5, #1
 80063a4:	d1f6      	bne.n	8006394 <__libc_fini_array+0x2c>
 80063a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063aa:	f000 b81b 	b.w	80063e4 <_fini>
 80063ae:	bf00      	nop
 80063b0:	080069ac 	.word	0x080069ac
 80063b4:	080069a8 	.word	0x080069a8

080063b8 <register_fini>:
 80063b8:	4b02      	ldr	r3, [pc, #8]	; (80063c4 <register_fini+0xc>)
 80063ba:	b113      	cbz	r3, 80063c2 <register_fini+0xa>
 80063bc:	4802      	ldr	r0, [pc, #8]	; (80063c8 <register_fini+0x10>)
 80063be:	f000 b805 	b.w	80063cc <atexit>
 80063c2:	4770      	bx	lr
 80063c4:	00000000 	.word	0x00000000
 80063c8:	08006369 	.word	0x08006369

080063cc <atexit>:
 80063cc:	4601      	mov	r1, r0
 80063ce:	2000      	movs	r0, #0
 80063d0:	4602      	mov	r2, r0
 80063d2:	4603      	mov	r3, r0
 80063d4:	f7ff bf72 	b.w	80062bc <__register_exitproc>

080063d8 <_init>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	bf00      	nop
 80063dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063de:	bc08      	pop	{r3}
 80063e0:	469e      	mov	lr, r3
 80063e2:	4770      	bx	lr

080063e4 <_fini>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	bf00      	nop
 80063e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ea:	bc08      	pop	{r3}
 80063ec:	469e      	mov	lr, r3
 80063ee:	4770      	bx	lr
